%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP5B89.tmp.pdf
%%Creator: Adobe Acrobat 9.5.3
%%For: user
%%CreationDate: 2013-1-25, 16:08:27
%%BoundingBox: 0 0 199 126
%%HiResBoundingBox: 0 0 198.3180 125.6411
%%CropBox: 0 0 198.3180 125.6411
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 22279 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="Adobe Illustrator CS4"
   xmp:CreateDate="2013-01-25T16:07:37+08:00"
   xmp:ModifyDate="2013-01-25T16:07:37+08:00"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 9.5.3 (Windows)"
   xmpMM:DocumentID="uuid:d8dc5587-802f-44ba-8cfe-73112bbc9ea6"
   xmpMM:InstanceID="uuid:9423c185-7c63-4e19-aa56-8986be3d124e">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="164"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWJa/PqMH5geVli&#xA;v51sb1byK404FBAxigaRZDRfULVI+05UUFADUkJHJhNx+Yt9p+jeb5Le9vLjV4EvL3SZbn6rNYpZ&#xA;jU5rRJbUw/Gwi25C43+H4fgxtNMr8rea7y38u+aL3WrmTU4vLF7fQ/XBHEs89vaQrPUrGIYTIOZT&#xA;4QoqMUEJv/ifW/8AqUdW/wCRuk/9l+FDv8T63/1KOrf8jdJ/7L8Vd/ifW/8AqUdW/wCRuk/9l+Ku&#xA;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&#xA;r//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpTPg:MaxPageSize
    stDim:w="210.001480"
    stDim:h="297.000132"
    stDim:unit="Millimeters"/>
   <xmpTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="cplsy8PS"
      stFnt:fontFamily="cplsy8"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="Version 0.01"
      stFnt:composite="False"
      stFnt:fontFileName="cplsy8.ttf"/>
     <rdf:li
      stFnt:fontName="cplr7i"
      stFnt:fontFamily="cplr7i"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="Version 0.01"
      stFnt:composite="False"
      stFnt:fontFileName="cplr7i.ttf"/>
     <rdf:li
      stFnt:fontName="cplr7PS"
      stFnt:fontFamily="cplr7"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="Version 0.01"
      stFnt:composite="False"
      stFnt:fontFileName="cplr7.ttf"/>
    </rdf:Bag>
   </xmpTPg:Fonts>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="默认色板组"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">fig1.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>user</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -125.641 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 125.641 li
198.318 125.641 li
198.318 0 li
cp
clp
[1 0 0 1 0 0 ]ct
false sop
.815518 .799191 .76849 .613642 cmyk
%ADOBeginSubsetFont: PBAAAA+cplr7PS Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+cplr7PS def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (cplr7PS) def
/FSType 4 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 100 /d put
def
/FontBBox {-27 -250 1119 750} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/d <1C60D8A8C9B66A6BAACB909075B95EBF15F4F257BAADD647DFC21DC8F1E4
1315629898B6CAC9A0DFDB1CBC018CCA63C92562D800DAFA6082A89D063C0D82
CDF5D70790C418BC65B81C7F852432453EBFA3F083BE3611FFD012E256037E80
B79B935E67605F0F99D5DEBDC07EC0733803BE3D237E3BD868144B968CF170B4
DFEF79E88AE3F43D6115C285FD74B8BA27D6CAC9357A425E324A924F13F07E43
93A20205C5F362BA40C3C43D35F1D886FEE5B76E9B5EDF1F9236138767F796E1
1977D255E8D5C89D9AB192263F5397A207938EB9826CE7D840B1B1C079EE3253
7FB96FC1FE4F758A1EC963BAC28786> |-
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A8415741C8C01
03E4FA257B8A4C6C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/PQRVXC+cplr7PS /PBAAAA+cplr7PS findfont ct_VMDictPut
/PQRVXC+cplr7PS*1 
[100{/.notdef}rp /d 155{/.notdef}rp]
PQRVXC+cplr7PS nf
PQRVXC+cplr7PS*1 [0 -8 -8 0 0 0 ]msf
196.318 69.5205 mo
(d)sh
%ADOBeginSubsetFont: HIBBAA+cplr7i Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+cplr7i def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (cplr7i) def
/FSType 4 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 77 /M put
def
/FontBBox {-1 -250 1169 750} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/M <1C60D8A8C9B5479ED3A3287D2E5F304C5B08F29E202E4CB3A8A54C543A5D
909D4884A8E51ABEA14874516A70E11FF0F2115ACE1F5A84936CF3631F6CB290
B1FCBA80C7231D30F52703A194C8C65E80E0DCA14E780E8731BD39F240DA82AE
5232455B76C449389444DFA467F77F37EA12930CE77C59187D6F298EB1F199F3
846ADC6169657BEAABDEB502BF865FAFED3BB51F9281DA9E01DBC6B89E4A3717
B075DC35CE0B0573DDA201CFD1CD0B30D1EC462A889F1D352C4840DB20C89AA2
D9B654CFDFF76DFD77C5B2DD48888403A3FB6ADBDAB581C591C2CC1C23783C9D
39B7B36344B31AE1FC60CFF891FC33EAE234787F21268A6CA8B553D9F32789C5
EC1C8503EE5353C38897777A572CAEEFFDE0861CD0716BF9154E864A8E1AEF7A
B0B899855A1286D9C603AB8A804843B6A1AA5C3FD929B2535167868438D0F2FE
A9F39A4566E00B307244B296AF5A6AE6FFD6D7BF069BB00398CAB3CB81F6DA81
7B27CFAEAFC24C2830C8300BDF1533A9F535C03434357E3563CD66A37219DA8F
F7A805B2091C9F6DB793A558504EA94AED66697CC0> |-
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A8415741C8C01
03E4FA257B8A4C6C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/PQRVXD+cplr7i /HIBBAA+cplr7i findfont ct_VMDictPut
/PQRVXD+cplr7i*1 
[77{/.notdef}rp /M 178{/.notdef}rp]
PQRVXD+cplr7i nf
PQRVXD+cplr7i*1 [0 -8 -8 0 0 0 ]msf
196.318 64.4765 mo
(M)sh
gsave
2.6719 .00100708 mo
198.271 .00100708 li
198.271 125.641 li
2.6719 125.641 li
cp
clp
%ADOBeginSubsetFont: PBAAAA+cplr7PS AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
PQRVXC+cplr7PS dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B7E2CE28C008B14480B59C6987F42927853A76117B478F
2DF9474251FCA3089F87742DE02A060969926381AA1370CD15CBA5ED453BE0E5
6777ACFC7FA53FAE01EEED033EED5F10D62771830B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PQRVXC+cplr7PS /Encoding get
dup 47 /slash put
pop
%ADOEndSubsetFont
/PQRVXC+cplr7PS*1 
[47{/.notdef}rp /slash 52{/.notdef}rp /d 155{/.notdef}rp]
PQRVXC+cplr7PS nf
PQRVXC+cplr7PS*1 [0 -8 -8 0 0 0 ]msf
196.318 55.7656 mo
(/)sh
grestore
PQRVXC+cplr7PS*1 [0 -8 -8 0 0 0 ]msf
196.318 51.2158 mo
(d)sh
%ADOBeginSubsetFont: HIBBAA+cplr7i AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
PQRVXD+cplr7i dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B65648C3DCAD9D06E45866FEA3342FC2265D308461F346E2A1
BB3E0D6775156FB562E6E3B84CDB4A3FAD5D59EF42C35054846E84484C513E71
0C1AE3EE95CC3298C30E31E3E9C318001FF16B12604AB3CAFF2E10298FF50D48
20B55D1989EC94FF5F037F3686A148587D3697F13013823233F1A181DCF69DD9
4F67045DA5A1DB140F7A453573845A10F4DA8AD2D3DD4C3D7C7132A334AC9265
5C89738729A3E9844E0EEDC711F610DF096AC072951842FA01D83DCE3C6F5C8D
012767DC174730F11AFEC7DED073B0D5CA8DF86C2A6E12CCFCCD2F4578513D4B
558DC1E3FE29ACE6EB8D71C7DA22AA4FCB12EAE3BF07B1EB33C27C1A02B1E7B4
A6A3CDC4ADE553E2ED7ED2F6520CA77E9EDCAE70E557EF23D72CD63DB1CDF82C
A06C96F71DB9B0AE81A460F7F2245003BC7AFE5FAEC9A5E6F92B4ADE91FB9914
7E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PQRVXD+cplr7i /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/PQRVXD+cplr7i*1 
[77{/.notdef}rp /M 6{/.notdef}rp /T 171{/.notdef}rp]
PQRVXD+cplr7i nf
PQRVXD+cplr7i*1 [0 -8 -8 0 0 0 ]msf
196.318 46.1614 mo
(T)sh
PQRVXC+cplr7PS*1 [8 0 0 -8 0 0 ]msf
119.337 26.5391 mo
(d)sh
PQRVXD+cplr7i*1 [8 0 0 -8 0 0 ]msf
124.373 26.5391 mo
(M)sh
PQRVXC+cplr7PS*1 [8 0 0 -8 0 0 ]msf
133.084 26.5391 mo
(/d)
[4.5504 0 ]xsh
PQRVXD+cplr7i*1 [8 0 0 -8 0 0 ]msf
142.687 26.5391 mo
(T)sh
.629 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
110.505 11.754 mo
116.541 11.754 li
@
97.836 11.754 mo
103.794 11.754 li
@
105.529 13.338 mo
108.695 13.338 li
108.695 10.1705 li
105.529 10.1705 li
cp
.869474 .665949 .0384833 0 cmyk
f
108.695 10.17 mo
105.529 10.17 li
105.529 13.338 li
108.695 13.338 li
cp
@
.815518 .799191 .76849 .613642 cmyk
PQRVXD+cplr7i*1 [8 0 0 -8 0 0 ]msf
118.795 14.625 mo
(M)sh
110.505 23.191 mo
116.541 23.191 li
0 .915251 .82208 0 cmyk
@
97.836 23.191 mo
103.794 23.191 li
@
108.921 23.115 mo
108.921 22.135 108.093 21.381 107.113 21.381 cv
106.132 21.381 105.378 22.135 105.378 23.115 cv
105.378 24.02 106.132 24.85 107.113 24.85 cv
108.093 24.85 108.921 24.02 108.921 23.115 cv
ef
108.921 23.115 mo
108.921 22.135 108.093 21.381 107.113 21.381 cv
106.132 21.381 105.378 22.135 105.378 23.115 cv
105.378 24.02 106.132 24.85 107.113 24.85 cv
108.093 24.85 108.921 24.02 108.921 23.115 cv
cp
@
101.445 118.171 mo
103.876 118.171 li
103.835 118.027 103.789 117.883 103.724 117.739 cv
103.66 117.588 103.517 117.396 103.285 117.14 cv
103.349 117.084 li
103.843 117.268 104.148 117.443 104.236 117.611 cv
104.332 117.779 104.277 117.963 104.068 118.171 cv
106.251 118.171 li
106.626 117.804 li
107.162 118.331 li
101.382 118.331 li
101.397 119.603 101.357 120.602 101.237 121.346 cv
101.126 122.081 100.974 122.696 100.79 123.168 cv
100.598 123.648 100.35 124.08 100.038 124.456 cv
99.942 124.392 li
100.398 123.473 100.678 122.577 100.774 121.705 cv
100.862 120.826 100.918 120.066 100.926 119.427 cv
100.942 118.779 100.926 118.259 100.878 117.859 cv
101.445 118.171 li
cp
103.285 120.609 mo
103.285 120.609 mo
105.035 120.609 li
105.035 119.674 li
103.285 119.674 li
cp
104.22 122.889 mo
104.621 122.513 104.972 122.089 105.283 121.609 cv
103.101 121.609 li
103.476 122.129 103.843 122.561 104.22 122.889 cv
cp
104.533 123.137 mo
105.203 123.561 106.083 123.784 107.187 123.824 cv
107.187 123.952 li
106.859 124.016 106.658 124.152 106.595 124.359 cv
105.66 124.168 104.876 123.848 104.251 123.393 cv
103.236 123.976 102.14 124.328 100.974 124.456 cv
100.974 124.328 li
102.22 124.08 103.22 123.672 103.972 123.112 cv
103.556 122.696 103.189 122.193 102.876 121.609 cv
102.564 121.609 li
102.285 121.705 li
102.037 121.457 li
105.316 121.457 li
105.595 121.17 li
106.068 121.642 li
105.755 121.801 li
105.275 122.4 104.867 122.849 104.533 123.137 cv
cp
102.876 119.674 mo
101.974 119.674 li
101.693 119.771 li
101.445 119.515 li
102.876 119.515 li
102.876 119.202 102.869 118.858 102.845 118.483 cv
103.533 118.803 li
103.285 119.051 li
103.285 119.515 li
105.035 119.515 li
105.035 119.162 105.027 118.827 105.003 118.515 cv
105.691 118.858 li
105.443 119.114 li
105.443 119.515 li
106.13 119.515 li
106.5 119.139 li
107.035 119.674 li
105.443 119.674 li
105.443 120.298 105.451 120.706 105.476 120.89 cv
105.035 121.082 li
105.035 120.77 li
103.285 120.77 li
103.285 120.953 li
102.845 121.138 li
102.869 120.722 102.876 120.234 102.876 119.674 cv
cp
93.613 118.139 mo
93.686 118.355 93.653 118.531 93.518 118.675 cv
93.381 118.818 93.27 118.755 93.174 118.475 cv
93.085 118.188 92.878 117.859 92.566 117.483 cv
92.63 117.396 li
93.213 117.684 93.542 117.932 93.613 118.139 cv
cp
93.07 120.13 mo
93.07 120.362 93.014 120.53 92.894 120.609 cv
92.782 120.697 92.678 120.594 92.582 120.314 cv
92.494 120.034 92.27 119.698 91.91 119.299 cv
91.974 119.202 li
92.702 119.578 93.07 119.891 93.07 120.13 cv
cp
93.149 122.217 mo
93.07 122.48 93.046 122.801 93.054 123.168 cv
93.062 123.544 93.07 123.808 93.085 123.952 cv
93.094 124.096 92.974 124.128 92.726 124.048 cv
92.478 123.96 92.414 123.704 92.534 123.28 cv
92.662 122.856 92.662 122.585 92.534 122.473 cv
92.414 122.353 92.19 122.257 91.878 122.169 cv
91.878 122.049 li
92.254 122.089 92.494 122.105 92.582 122.097 cv
92.678 122.081 92.782 121.993 92.894 121.81 cv
93.014 121.633 93.493 120.53 94.349 118.483 cv
94.477 118.515 li
93.661 120.722 93.222 121.961 93.149 122.217 cv
cp
94.661 121.361 mo
97.939 121.361 li
98.283 121.05 li
98.723 121.545 li
98.443 121.77 li
98.443 123.888 li
98.595 123.888 li
98.906 123.512 li
99.41 124.048 li
94.069 124.048 li
93.837 124.048 93.629 124.08 93.445 124.136 cv
93.189 123.888 li
94.189 123.888 li
94.189 121.825 li
94.189 121.617 94.181 121.369 94.165 121.082 cv
94.661 121.361 li
cp
94.693 117.46 mo
95.189 117.771 li
97.475 117.771 li
97.819 117.396 li
98.283 117.892 li
98.003 118.02 li
98.003 119.251 98.011 120.138 98.035 120.706 cv
97.595 120.857 li
97.595 120.394 li
95.132 120.394 li
95.132 120.737 li
94.693 120.922 li
94.725 120.33 li
94.725 118.667 94.717 117.707 94.693 117.46 cv
cp
97.131 123.888 mo
97.131 123.888 mo
98.0349 123.888 li
98.0349 121.514 li
97.131 121.514 li
cp
95.876 123.888 mo
95.876 123.888 mo
96.7559 123.888 li
96.7559 121.514 li
95.876 121.514 li
cp
94.597 123.888 mo
94.597 123.888 mo
95.5008 123.888 li
95.5008 121.514 li
94.597 121.514 li
cp
95.132 120.234 mo
95.132 120.234 mo
97.5949 120.234 li
97.5949 119.083 li
95.132 119.083 li
cp
95.132 118.923 mo
95.132 118.923 mo
97.5949 118.923 li
97.5949 117.923 li
95.132 117.923 li
cp
.815518 .799191 .76849 .613642 cmyk
f
PQRVXD+cplr7i*1 [8 0 0 -8 0 0 ]msf
110.654 123.638 mo
(T)sh
119.843 117.644 mo
119.755 117.644 119.691 117.684 119.66 117.764 cv
116.628 125.375 li
116.613 125.407 116.613 125.432 116.613 125.447 cv
116.613 125.527 116.652 125.591 116.74 125.623 cv
116.773 125.631 116.796 125.639 116.812 125.639 cv
116.892 125.639 116.949 125.599 116.988 125.52 cv
120.019 117.907 li
120.027 117.875 120.035 117.852 120.035 117.835 cv
120.035 117.756 119.994 117.691 119.916 117.659 cv
119.882 117.651 119.859 117.644 119.843 117.644 cv
f
%ADOBeginSubsetFont: PBAAAA+cplr7PS AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
PQRVXC+cplr7PS dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B73A41C7> |-
/parenleft <1C60D8A8C9B77D5F9B86EC43E5C53D1BB4EEBD57F7F0491ECCCD
EFDE91B5C84ECCC1F494D74E8C36BEA26D55B254AFD23E30DEFF782A1BFF56DD
254474883D37C05363DB9ADF94B98FF0677E3FDE30A99F3E73C38BE3EDB9D84E
01796646F814D40F1461901864AC0CB1E4B13AF1832E7E424EBAFB9195C72A69
CDE710E5F883A4C11997F91876662D712AFA7882F5A19BE9B4EEBE25DAF642D1
51FC9FC1EF5277A9898B5F5194C551> |-
/parenright <1C60D8A8C9B77D5FB0895550F30210256CB0AD3392E6CBF5FFC
C57AC742F5768A5AC96F4C12EC1694DEA3B65479FA4C1869187CC9CCCEAED1CA
D0F1D72C07B34D2271C4A0252888D827017D5D0538311B5381A9A20FACD48C77
79D71E62D79269D26CEB592E2BE425C90F9C9F38F6A8312CA0DBE0F8DBCC6FC2
5B55086BD9C83D190C075DC668C6F9FE84534> |-
/hyphen <1C60D8A8C9B51034897E1E5FA403F7A711AACC080A7C9C86CAC901B
89528D8719DF3D9054A6A0B5A9F9AF6F4C033F77AD2FE5CC51465DAA553FF548
E0F858933E0473F5ADCD42165337AB1C916> |-
/one <1C60D8A8C9B7E2CE27DFAE4CCE9102F65E5C216A826A5C076E2865F873
E22B0021DA450330815809043886477845C94A3C464F50B4934A4CEB98E5BE2C
375249D21E8B8394968814753159AD1CF4559D9B1A3E2A5F39DA384B7F06704A
0901EBA83234DFCF8AAC6B12667DAFF3C7118A110935091EED> |-
/G <1C60D8A8C9B59A8D87902562B096E43D8A6B4C4D7EE53C9AC310B5CCEC17
19B936E089AF988A7A938D87E6B2969F79B564C5625A090331439772712C2054
65D3E3C00BD47F74258852307D24034CB5AF147FD00A1649043EECB4E86AEAC2
E3072EF287B1E7EE8930AEFF5E07B0D232478A92422D2C9AE9725C6CF8D9E22A
58B7A49C00E01567FF67E472F56D41B2BEF2BD14A8247AEA82DB1A25A8E78702
EEB1D8C161BA3B1D6EC18C787703127661C401C4F5F8BD56BA749D6A0C639734
6560B5A32CF2D12012C606772C18F5E1D11CF5E192BCF6B241A63F3F631A3FC1
E62AA906AF3DD92768602233C516418F0F4ABD2EF8D1707158CFDA45B4BC41D3
FD9D09F2204A4D85A9E4388ADDDF7E4537D7C0293421ADE5C82A013C9596A293
6AE207AF3AA75C35EEFB2ACC047ECD8EA7FD96878446554B9DC1CBCB2531A00C
04955EDE66BE8F16157E2C1221C57B3F4983D4C38A7B061C6F94C3F9F4AEE7A8
FBC9> |-
/K <1C60D8A8C9B69F2EDCA52FF434955C011F7001A997E73B1EE3FA7023AE0A
F238FFD06DA4B4FE11A2C366AF2CD1D7473781B43B04F2089D5B1FBB5B5A37B3
FC73989B2962FDC2BAD4A61C5CADC651513BA9240345229212E88693DABAF683
35F3FAD8B5A9EA7272F13A16A89A513AC603E72E991DEE0633DB2DE8F7147122
EE7880467C6BD226B2ED17E77859A61D3C74C77D23FA081B756E7E464095F3F6
02B116276C7A2176D1BBB5FABE48BAB3862AD80B4B5E05043E2F0A2426484620
9552DAD3FAEA1886253B6B45D9A13F7C24B72D8972FCC558D91C1719F54CACF4
B0BAD00CF1C3DB5859F51667540F7E88230A4F1F5CA185E2CEAA51E70DC74C53
12D77F78F8F3> |-
/a <1C60D8A8C9B7E2CE27EE999224785D58443081F88F4A44700C9D078D39D6
E9E6655745445F321C920F86ECDAC1D62050CC6B1EC22703FE92DCC52AA4D686
4CFF6CCF20D6D2980222FE905CA085C24F6BDE11F9F4D5DA6BFF0A3D50DB7B85
D1AC64C4D17E25D11345FA6F99EFA69B6682170F46F277D3AD3E8C6E83E86C2E
F61BE8585FE6ED866F39B1CDF7631B1D5AE65E079861CF530E6F113F537A8394
0A5E09238A891A3ACD50F4D4CE2E9FDA033E092693B7172C7224F5F232B1A4A9
45758E2B1FDB89252F1686B1B8C14348C163B986C69AAEC9AD034F48978C77E5
4472336701FF7AA139D77215DBAB5AD3AC95ABEB73C4401D45616AE78EA5FAD6
C005C261A10529163180413FA1242152F01FDC27E05333C9FC476C2514348104
D587C96CEECC337E86F41A833136C3DBF386D7096D290FF379> |-
/e <1C60D8A8C9B7BF865D9DC6DB6635185C94F3173B2CE9F364F8EABF0902A1
61552AE4C80432EA3E0A448B87E09EF98B24B75BD4FBA73CDA084C8FEB694465
7D5AE8217BCCB1F0BE7C7944A316953695F12C1D8F81D299A7673FC04F9BC890
6871C8DAEA84F38AF1C10FAF19C475A90FE32A203447120D12B7C3902079BD45
F83D8DD89947262A7C18DCE4DD845DD3610D80BF0EE5ADB3C495B64295BFE8CF
EF59F6ECF814ED6956315A13E5EC00D4AA6851CB1940A207CA8FB5E408B6DA94
DC6F865183F7B8D3470C9B32E560F08795CE5466D8F057AAE4404927FE581ED0
7CB064A3C93CE37C7FEA80A0EC7E9596ED> |-
/g <1C60D8A8C9B7E2CE31F9280637CC30B65A6F32C260DFA0D5DC8F30E9F412
5488B731B0D6EDC0D8B3E7AB61F71EB0AC04E931418F7CEF9643B1523F04B709
5A9CEE8CAA4C3E8A3B728FE41FB37AA381E492F2063FD089709A326BC9C10CE2
D27DA66C3B9AF3945CA17809C5C5AFD19B08C8D30DAD04DA25F879F0AAC7A52E
9EE2F403DB89FFC04AE1F44DE190A74BC815F732579C1D04B9F5DE0DF85BD31B
FD6A7B4E44743C34F21B56B97F79A5648901941BF35A4DE677D365ADD25C3B2F
EF1DB06E8280FF2960BD9D8CA09B4B3A8165AC75F56BFD13E89960074C0C005A
DC9FE84283FC11E9C9CAB9D5D2F3FED28F60D410925B9C5CA70298B4726B0C49
838A6EC805BFF2917DF7F6A690E7071F129FCD969D2DDA2C11240448A8494992
CF47E09B82A465E47B5AA1B0D63C70E7C5D585B407F8F7D8768A5E8D567D33D4
8E09DC92A70C62A3C4D415367E75B9021B75149A1F82CDB1D828FB90B153B20C
F18B61B57F7EE4742CF79047083E0A74F84D2287FC6E29383230F64C4156C946
E3D250B23A52911BE61A9B86C7E312C4852F69D4332B2BE86F575E65FF7C3131
38DB49F7BEBC38EC899681B3700771ED6C35294BE81EBA786FFD> |-
/h <1C60D8A8C9B66A6BA52F37E5AB04A5610ED1400848EB4512FF7BE3843958
78639BAEAB06E4E3F8D66DA7FC688738559258D43954214096D7B37B0A935DDD
9541D563D9F71E570BBD5CADF4D5D7E3A65EAA5BC0677AE3916C893A4A6838D0
C874B62F429BCE41826F2F68F61FF358DD3BA341441C711933F0C906D11571C0
FC6E92A701B176BFC0E79E8EA8AC6C2EC9EC6182FF8C21CCE27D82FA2DAD7C2A
517F5EF91D3525705C701BDED6FD4687FC656BCC5C9960F99FE0B83EF660CD87
8718FD8AA69008F331A39406> |-
/m <1C60D8A8C9B5AC092BD67DB652F063F88917B8E9D9B0D010E4979A8E027F
BB96BB6CFB64AE7CFA0A70C8F76F83E25D2EC18F9C00FD005BFAB56E25085E13
8370D9C813013E5EA21DFB2A3A0A5AD93088FFCEC93EFE8CCDDAE45B257B44BB
75D3A151B4F138B40224E7B256B10309B84616201B1685B3C92B383684AA616C
B2DB56CF443B8F85815D9A646ED65F1EC35FB61CB36E7775528BB93C14A478EC
1D63FC6E26DC0377874C77B2B409231C119C33B6B2531668A0D2600C89AC4CFE
1B2F81CD802A274AE7B5968AFF2B99D992DE81D1DE7C088B3FF58FD6E851D1D2
F2BF6F087CE6AAE19FF74EB87701902D997951AE1154DD12238A9F3D7392785E
DD0F4B1E39B196A6701102EDE0B9B00C15B9995D803D314A6488558FC22D9752
681B19E39002C01E48EBE89F9CDEE933372C93C18AF34AC7DC357C0DBDA32092
7EE93D81D134> |-
/o <1C60D8A8C9B7E2CE15AC9A492684873135DF08C4E0B319BEBF4BF288F9BF
68AE0FFCA7358431AA915C99ABA9292E6140A926BDDCBE62764FD2A10BEBB31E
78A26672584D36D5E590D0D7156EC1D9B76022521F55C3E7A24B3A1577DBAC94
659E125B1503BA2FBB9A17679F16106EB50B4EA0A0DA3BB421F95561D6B8A012
DE06237DF4320A5EDC11013F1661C630EB7654C237D122B9DC94E5D0498FA4F0
C6895E4683352E2C54D94F1F3B101CA952667D704D2BBDF8BEE34F28D9158EC9
98349DF0F98BB71240D73029391D55695B02AF501CAA9870A04F8B7863CCF58B
659D0D3D10EE4545667FE138129CC5BAC09A5852A52A2397EF8DD9627E75D494
FD09D8> |-
/p <1C60D8A8C9B66A6BA5B19B9717E1E49D1652C6C3FE079E143CE0BA57C9B9
C5FF096FE0FC0C2732D511498D07275760FD78B12A560ADC70E644F5B8A7F0E4
7114246C04F0C3B7AD502517D6E8BFEF1FAC952E74C877D819AF8A3750E72357
830E8D1FA475BF28FF8B426D2D717FBF4F4655DD8D384E84B0707CAB688B4047
6D9705FE2878EEE1F14B7108FD96446FE9D6C36F401F02305BDBE58D91E1E1E5
54A1BBA1D2DCF27D240C2AF2410EF7905D2CA572A407A88DE314760066E2302B
C9DF97B19193586721C4AC685DED59278BDE17E1A7B209E6977EEB37779A271D
27078700171478E50D9730B0594DF8DEDC01E59D3498AD32727E29D07830> |-
/r <1C60D8A8C9B77D5F9466A0EAC55135B3E4B14D17E75490B9FA930EF08E0B
17DF4FBACBD4DA2F59F3C44E2535088389A405B1CE8138FD7F7007D6A6521A66
18057BB951CE02A69A44FD35AEA61CB863F23F29870B99A50D0F02103EFB9B02
BF63C9C4ACDB62E84972DD70831CC9E976B78A5303B9F2AEB18751D09C272857
C21EA6F9552D48E571B3EBC24F3F48D3541899DFD159B277DE1750E21E092A0C
A45365FA09026D208F5D937E11D504DF544CEAC328C7E9F48A158752A5738003
4D05> |-
/s <1C60D8A8C9B776A0631D31B49ADC809A56DA82B3D7A7E35FCD9E78B7E7FD
544F844F0F63CEB4697DA70D2907D06C02379A338B229A8DB9AEE794DA8A3892
7F80441201393A6E1C85F7668997C6E819B10D3441E87C9204F288821A5DE237
828E55358D70A3731740B597EEA8C2848E9655690A021F7BE3E5E9A6EE16DB98
5EB95216310858D4424744356F979B0A380A4A5247CF0085DF8F322AF4CF05A3
1F8E0724C6B33F3CBD5007802A593BC2FD3EE6DBEAEC735CD8AE2FA96B5705C7
3F5A0451C53BF53CAE5A9C211046105E6420D397ECD1C8D15236254B558FB383
8B7C6EF3F0A0C889960DE2EF3FA220DB1C32E087253640FA8ABEE44965EAA758
B8505904786882F9251CF9CBD484E3786E0694C44070B5EE71680193D2916500
07EB911D1A99DA261A562ACBBE2E343C> |-
/u <1C60D8A8C9B66A6BA5DC81E192F30D4E2078ADCCFC5D6587DD158971D84F
07CC16DFBD49AE206CDC4E551AA793CDBB67915DB580C4D19D6EF5BD8E4B1ABA
07DF18CFB3848A6CA7EA58F94283A1C151C9778085170AD2BB590C1B6C5DD4C8
2124F9CE4008EEE694425435057206B41E293E44C78B219EBFA205DF0E386121
0869B12B8951297B50E8D5C1AAE636DDA863D5C4C7970FEADC26026943CA3667
080BC0B7B7D5EEE25AF937BF1C252DB2C3E6F6D7FA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PQRVXC+cplr7PS /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 49 /one put
dup 71 /G put
dup 75 /K put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 117 /u put
pop
%ADOEndSubsetFont
/PQRVXC+cplr7PS*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /.notdef 
/slash /.notdef /one 21{/.notdef}rp /G 3{/.notdef}rp /K 21{/.notdef}rp 
/a 2{/.notdef}rp /d /e /.notdef /g /h 4{/.notdef}rp 
/m /.notdef /o /p /.notdef /r /s /.notdef 
/u 138{/.notdef}rp]
PQRVXC+cplr7PS nf
PQRVXC+cplr7PS*1 [8 0 0 -8 0 0 ]msf
120.618 123.638 mo
(K)sh
PQRVXC+cplr7PS*1 [0 -8 -8 0 0 0 ]msf
9.3965 81.8984 mo
( )sh
PQRVXD+cplr7i*1 [0 -8 -8 0 0 0 ]msf
9.3965 78.8176 mo
(M)sh
PQRVXC+cplr7PS*1 [0 -8 -8 0 0 0 ]msf
9.3965 70.1064 mo
(/\(emu)
[-4.55041 -3.56639 -4.06237 -7.23923 0 ]ysh
%ADOBeginSubsetFont: QJJAAA+cplsy8PS Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+cplsy8PS def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (cplsy8PS) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 83 /S put
def
/FontBBox {-39 -250 1110 902} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/S <1C60D8A8C9B845C8733BEF8DFC0466E744ECD6D2BCEB3D2D2EBA57B6374C
69D2C390B0140987B12343B8F90717D83410AB996B53773A91DD5E296CA1C5F7
0B28995BF6A760A9A1CA2D423D82B2FEA2B59A3425C1> |-
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A8415741C8C01
03E4FA257B8A4C6C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/PQRVXE+cplsy8PS /QJJAAA+cplsy8PS findfont ct_VMDictPut
/PQRVXE+cplsy8PS*1 
[83{/.notdef}rp /S 172{/.notdef}rp]
PQRVXE+cplsy8PS nf
PQRVXE+cplsy8PS*1 [0 -8 -8 0 0 0 ]msf
9.3965 45.6408 mo
(S)sh
PQRVXC+cplr7PS*1 [0 -8 -8 0 0 0 ]msf
9.3965 43.2816 mo
(g)sh
PQRVXC+cplr7PS*1 [0 -4.664 -4.664 0 0 0 ]msf
6.7324 38.7305 mo
(-1)
[-4.69151 0 ]ysh
PQRVXC+cplr7PS*1 [0 -8 -8 0 0 0 ]msf
9.3965 31.3862 mo
(\))sh
PQRVXD+cplr7i*1 [8 0 0 -8 0 0 ]msf
145.232 85.7031 mo
(T)sh
PQRVXC+cplr7PS*1 [5.6 0 0 -5.6 0 0 ]msf
150.633 86.8975 mo
(Gd)
[4.9493 0 ]xsh
PQRVXD+cplr7i*1 [8 0 0 -8 0 0 ]msf
78.9541 97.3096 mo
(T)sh
PQRVXC+cplr7PS*1 [5.6 0 0 -5.6 0 0 ]msf
84.3496 98.5049 mo
(amorphous)
[3.18528 5.2517 3.18528 2.49648 3.53246 3.53246 3.18528 3.53246 0 ]xsh
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
.5 lw
2 lc
0 lj
184.263 102.732 mo
183.958 102.732 li
183.601 102.732 183.246 102.732 182.888 102.732 cv
182.66 102.732 li
182.531 102.732 182.404 102.732 182.277 102.732 cv
182.201 102.656 li
182.125 102.656 li
181.998 102.656 181.871 102.656 181.744 102.656 cv
181.285 102.656 li
181.158 102.656 181.029 102.656 180.902 102.656 cv
180.521 102.656 li
180.443 102.58 li
180.138 102.58 li
179.757 102.58 179.376 102.58 178.994 102.58 cv
178.763 102.58 li
178.763 102.504 li
178.687 102.504 li
178.433 102.504 178.179 102.504 177.923 102.504 cv
177.847 102.504 li
177.847 102.427 li
177.771 102.427 li
177.058 102.427 176.345 102.427 175.632 102.427 cv
175.556 102.427 li
175.556 102.504 li
175.404 102.504 li
175.404 102.58 li
175.328 102.58 li
174.64 102.58 173.953 102.58 173.265 102.58 cv
173.189 102.58 li
173.189 102.504 li
173.113 102.504 li
172.857 102.504 172.603 102.504 172.349 102.504 cv
172.273 102.504 li
172.273 102.427 li
172.121 102.427 li
171.916 102.427 171.712 102.427 171.509 102.427 cv
171.431 102.427 li
171.355 102.352 li
171.126 102.352 170.898 102.352 170.669 102.352 cv
170.515 102.352 li
170.515 102.274 li
170.439 102.274 li
170.287 102.274 170.134 102.274 169.98 102.274 cv
169.904 102.274 li
169.904 102.198 li
169.83 102.198 li
169.703 102.198 169.574 102.198 169.447 102.198 cv
169.371 102.198 li
169.371 102.121 li
169.294 102.121 li
169.142 102.121 168.988 102.121 168.835 102.121 cv
168.759 102.121 li
168.759 102.045 li
168.148 102.045 li
168.072 101.969 li
167.613 101.969 li
167.613 101.894 li
167.232 101.894 li
167.156 101.816 li
166.773 101.816 li
166.773 101.739 li
166.314 101.739 li
166.314 101.663 li
165.933 101.663 li
165.857 101.587 li
165.474 101.587 li
165.474 101.511 li
165.017 101.511 li
165.017 101.436 li
164.558 101.436 li
164.558 101.357 li
164.177 101.357 li
164.101 101.281 li
163.796 101.281 li
163.718 101.205 li
163.414 101.205 li
163.414 101.129 li
163.107 101.129 li
163.107 101.053 li
162.802 101.053 li
162.802 100.977 li
162.574 100.977 li
162.498 100.899 li
162.267 100.899 li
162.191 100.823 li
161.962 100.823 li
161.962 100.747 li
161.658 100.747 li
161.658 100.671 li
161.427 100.671 li
161.351 100.594 li
161.123 100.594 li
161.123 100.519 li
160.816 100.519 li
160.816 100.441 li
160.511 100.441 li
160.511 100.365 li
160.207 100.365 li
160.207 100.289 li
159.9 100.289 li
159.9 100.212 li
159.595 100.212 li
159.595 100.136 li
159.367 100.136 li
159.367 100.061 li
159.136 100.061 li
159.136 99.983 li
158.908 99.983 li
158.832 99.907 li
158.677 99.907 li
158.601 99.83 li
158.451 99.83 li
158.451 99.754 li
158.22 99.754 li
158.22 99.678 li
157.992 99.678 li
157.992 99.602 li
157.761 99.602 li
157.761 99.525 li
157.609 99.525 li
157.609 99.448 li
157.38 99.448 li
157.38 99.372 li
157.15 99.372 li
157.15 99.296 li
156.921 99.296 li
156.921 99.22 li
156.769 99.22 li
156.548 99.052 156.227 99.081 156.005 98.914 cv
155.851 98.914 li
155.851 98.838 li
155.625 98.838 li
155.625 98.762 li
155.394 98.762 li
155.394 98.685 li
155.242 98.685 li
155.242 98.608 li
155.089 98.608 li
155.011 98.532 li
154.935 98.532 li
154.859 98.456 li
154.707 98.456 li
154.707 98.379 li
154.554 98.379 li
154.554 98.303 li
154.402 98.303 li
154.402 98.227 li
154.25 98.227 li
154.25 98.15 li
154.095 98.15 li
154.095 98.074 li
153.943 98.074 li
153.867 97.997 li
153.791 97.997 li
153.791 97.921 li
153.638 97.921 li
153.56 97.845 li
153.41 97.845 li
153.41 97.769 li
153.333 97.769 li
153.255 97.692 li
153.103 97.692 li
153.103 97.615 li
153.027 97.615 li
152.951 97.539 li
152.875 97.539 li
152.796 97.463 li
152.72 97.463 li
152.644 97.387 li
152.568 97.387 li
152.568 97.311 li
152.416 97.311 li
152.416 97.233 li
152.263 97.233 li
152.263 97.157 li
152.111 97.157 li
152.111 97.081 li
151.958 97.081 li
151.958 97.005 li
151.804 97.005 li
151.804 96.929 li
151.652 96.929 li
151.652 96.852 li
151.5 96.852 li
151.5 96.775 li
151.423 96.775 li
151.265 96.634 151.046 96.612 150.888 96.47 cv
150.812 96.47 li
150.812 96.394 li
150.66 96.394 li
150.66 96.317 li
150.583 96.317 li
150.505 96.241 li
150.429 96.241 li
150.429 96.165 li
150.277 96.165 li
150.277 96.088 li
150.125 96.088 li
150.125 96.012 li
150.048 96.012 li
149.972 95.935 li
149.896 95.935 li
149.896 95.859 li
149.818 95.859 li
149.744 95.783 li
149.667 95.783 li
149.667 95.706 li
149.589 95.706 li
149.513 95.63 li
149.437 95.63 li
149.437 95.554 li
149.361 95.554 li
149.361 95.478 li
149.285 95.478 li
149.208 95.401 li
149.132 95.401 li
149.132 95.324 li
149.054 95.324 li
148.978 95.248 li
148.902 95.248 li
148.902 95.172 li
148.828 95.172 li
148.828 95.096 li
148.673 95.096 li
148.673 95.02 li
148.597 95.02 li
148.521 94.942 li
148.445 94.866 li
148.369 94.866 li
148.369 94.79 li
148.292 94.79 li
148.214 94.714 li
148.138 94.714 li
148.138 94.637 li
148.062 94.637 li
148.062 94.561 li
147.986 94.561 li
147.986 94.484 li
147.91 94.484 li
147.833 94.408 li
147.757 94.408 li
147.757 94.332 li
147.681 94.332 li
147.681 94.255 li
147.603 94.255 li
147.603 94.179 li
147.527 94.179 li
147.527 94.103 li
147.453 94.103 li
147.376 94.026 li
147.298 93.95 li
147.222 93.873 li
147.146 93.873 li
147.146 93.797 li
147.07 93.797 li
147.07 93.721 li
146.994 93.721 li
146.917 93.644 li
146.839 93.568 li
146.763 93.568 li
146.763 93.491 li
146.687 93.491 li
146.611 93.415 li
146.537 93.339 li
146.458 93.339 li
146.458 93.263 li
146.382 93.263 li
146.382 93.187 li
146.306 93.187 li
146.23 93.109 li
146.152 93.033 li
146.078 93.033 li
146.078 92.957 li
146.001 92.957 li
146.001 92.881 li
145.923 92.881 li
145.923 92.805 li
145.771 92.805 li
145.771 92.727 li
145.695 92.727 li
145.695 92.651 li
145.619 92.651 li
145.619 92.575 li
145.542 92.575 li
145.542 92.499 li
145.388 92.499 li
145.388 92.423 li
145.312 92.423 li
145.312 92.346 li
145.236 92.346 li
145.236 92.27 li
145.162 92.27 li
145.162 92.193 li
145.085 92.193 li
145.007 92.117 li
144.931 92.04 li
144.855 92.04 li
144.855 91.964 li
144.779 91.964 li
144.779 91.888 li
144.703 91.888 li
144.703 91.812 li
144.626 91.812 li
144.626 91.735 li
144.548 91.735 li
144.472 91.658 li
144.396 91.582 li
144.32 91.506 li
144.244 91.506 li
144.244 91.43 li
144.167 91.43 li
144.167 91.353 li
144.091 91.353 li
144.091 91.276 li
144.015 91.276 li
144.015 91.2 li
143.939 91.2 li
143.863 91.124 li
143.787 91.048 li
143.71 90.972 li
143.632 90.972 li
143.632 90.895 li
143.556 90.895 li
143.556 90.818 li
143.48 90.818 li
143.48 90.742 li
143.404 90.742 li
143.404 90.666 li
143.328 90.666 li
143.251 90.59 li
143.175 90.513 li
143.097 90.513 li
143.097 90.436 li
143.021 90.436 li
143.021 90.36 li
142.945 90.36 li
142.945 90.284 li
142.871 90.284 li
142.871 90.208 li
142.794 90.208 li
142.716 90.131 li
142.564 89.979 li
142.488 89.979 li
142.488 89.902 li
142.412 89.902 li
142.412 89.826 li
142.335 89.826 li
142.335 89.749 li
142.257 89.749 li
142.257 89.673 li
142.181 89.673 li
142.105 89.597 li
142.029 89.597 li
142.029 89.521 li
141.953 89.521 li
141.953 89.444 li
141.876 89.444 li
141.876 89.367 li
141.8 89.367 li
141.724 89.291 li
141.648 89.291 li
141.648 89.215 li
141.57 89.215 li
141.419 89.063 li
141.341 89.063 li
141.341 88.985 li
141.265 88.985 li
141.189 88.909 li
141.113 88.909 li
141.113 88.833 li
141.037 88.833 li
141.037 88.757 li
140.96 88.757 li
140.96 88.681 li
140.882 88.681 li
140.806 88.604 li
140.73 88.604 li
140.73 88.527 li
140.654 88.527 li
140.654 88.451 li
140.58 88.451 li
140.58 88.375 li
140.501 88.375 li
140.501 88.299 li
140.425 88.299 li
140.349 88.222 li
140.273 88.145 li
140.197 88.069 li
140.121 88.069 li
140.121 87.993 li
140.044 87.993 li
140.044 87.916 li
139.966 87.916 li
139.966 87.84 li
139.89 87.84 li
139.89 87.764 li
139.814 87.764 li
139.662 87.611 li
139.585 87.611 li
139.585 87.534 li
139.509 87.534 li
139.509 87.458 li
139.433 87.458 li
139.433 87.382 li
139.355 87.382 li
139.279 87.306 li
139.205 87.306 li
139.205 87.23 li
139.128 87.23 li
139.128 87.152 li
139.05 87.152 li
138.974 87.076 li
138.898 87 li
138.822 87 li
138.822 86.924 li
138.746 86.924 li
138.669 86.848 li
138.591 86.848 li
138.591 86.771 li
138.515 86.771 li
138.515 86.694 li
138.439 86.694 li
138.363 86.618 li
138.287 86.618 li
138.287 86.542 li
138.21 86.542 li
138.134 86.466 li
138.058 86.466 li
138.058 86.389 li
137.904 86.389 li
137.904 86.313 li
137.83 86.313 li
137.83 86.236 li
137.675 86.236 li
137.675 86.16 li
137.599 86.16 li
137.599 86.084 li
137.447 86.084 li
137.447 86.007 li
137.371 86.007 li
137.371 85.931 li
137.218 85.931 li
137.218 85.855 li
137.14 85.855 li
136.988 85.702 li
136.914 85.702 li
136.914 85.625 li
136.759 85.625 li
136.759 85.549 li
136.683 85.549 li
136.607 85.473 li
136.531 85.473 li
136.531 85.396 li
136.455 85.396 li
136.378 85.32 li
136.3 85.32 li
136.3 85.243 li
136.148 85.243 li
136.148 85.167 li
135.996 85.167 li
135.996 85.091 li
135.919 85.091 li
135.919 85.016 li
135.767 85.016 li
135.767 84.939 li
135.689 84.939 li
135.689 84.861 li
135.613 84.861 li
135.539 84.785 li
135.462 84.785 li
135.462 84.709 li
135.384 84.709 li
135.232 84.557 li
135.156 84.557 li
135.156 84.48 li
135.08 84.48 li
135.08 84.403 li
135.003 84.403 li
134.925 84.327 li
134.849 84.327 li
134.849 84.251 li
134.773 84.251 li
134.773 84.174 li
134.697 84.174 li
134.623 84.098 li
134.544 84.098 li
134.544 84.022 li
134.468 84.022 li
134.468 83.945 li
134.392 83.945 li
134.316 83.869 li
134.24 83.869 li
134.24 83.792 li
134.164 83.792 li
134.087 83.716 li
134.009 83.716 li
134.009 83.64 li
133.933 83.64 li
133.933 83.564 li
133.781 83.564 li
133.781 83.487 li
133.705 83.487 li
133.628 83.41 li
133.552 83.334 li
133.476 83.334 li
133.476 83.258 li
133.322 83.258 li
133.322 83.182 li
133.248 83.182 li
133.248 83.105 li
133.171 83.105 li
133.093 83.028 li
133.017 82.952 li
132.941 82.952 li
132.941 82.876 li
132.865 82.876 li
132.865 82.8 li
132.789 82.8 li
132.712 82.725 li
132.634 82.725 li
132.634 82.647 li
132.558 82.647 li
132.558 82.57 li
132.482 82.57 li
132.482 82.494 li
132.408 82.494 li
132.408 82.418 li
132.253 82.418 li
132.253 82.342 li
132.177 82.342 li
132.177 82.266 li
132.101 82.266 li
132.101 82.188 li
132.025 82.188 li
132.025 82.112 li
131.949 82.112 li
131.873 82.036 li
131.796 81.959 li
131.718 81.959 li
131.718 81.883 li
131.642 81.883 li
131.642 81.807 li
131.566 81.807 li
131.566 81.731 li
131.49 81.731 li
131.49 81.654 li
131.337 81.654 li
131.337 81.577 li
131.261 81.577 li
131.261 81.501 li
131.183 81.501 li
131.183 81.425 li
131.107 81.425 li
131.107 81.35 li
131.031 81.35 li
130.957 81.273 li
130.88 81.273 li
130.88 81.195 li
130.802 81.195 li
130.802 81.119 li
130.726 81.119 li
130.726 81.043 li
130.65 81.043 li
130.65 80.967 li
130.498 80.967 li
130.498 80.892 li
130.421 80.892 li
130.421 80.814 li
130.343 80.814 li
130.343 80.737 li
130.267 80.737 li
130.267 80.661 li
130.191 80.661 li
130.117 80.585 li
130.039 80.509 li
129.962 80.509 li
129.962 80.432 li
129.886 80.432 li
129.886 80.356 li
129.81 80.356 li
129.81 80.279 li
129.734 80.279 li
129.656 80.203 li
129.656 80.127 li
129.582 80.127 li
129.505 80.05 li
129.427 79.975 li
129.351 79.975 li
129.351 79.897 li
129.275 79.897 li
129.275 79.821 li
129.199 79.821 li
129.199 79.745 li
129.123 79.745 li
129.123 79.668 li
129.046 79.668 li
129.046 79.592 li
128.97 79.592 li
128.814 79.441 128.666 79.284 128.511 79.134 cv
128.435 79.134 li
128.435 79.057 li
128.359 79.057 li
128.359 78.981 li
128.283 78.981 li
128.283 78.904 li
128.207 78.904 li
128.207 78.828 li
128.13 78.828 li
128.052 78.752 li
128.052 78.676 li
127.976 78.676 li
127.976 78.601 li
127.9 78.601 li
127.824 78.523 li
127.748 78.446 li
127.748 78.37 li
127.671 78.37 li
127.187 77.887 126.705 77.402 126.22 76.919 cv
126.22 76.843 li
126.144 76.843 li
126.144 76.767 li
126.068 76.767 li
126.068 76.69 li
125.992 76.69 li
125.992 76.613 li
125.916 76.613 li
125.916 76.537 li
125.839 76.461 li
125.761 76.461 li
125.761 76.385 li
125.685 76.309 li
125.609 76.231 li
125.533 76.155 li
125.533 76.079 li
125.457 76.079 li
125.457 76.003 li
125.38 76.003 li
125.38 75.926 li
125.304 75.926 li
125.304 75.85 li
125.226 75.85 li
125.226 75.773 li
125.15 75.773 li
125.15 75.697 li
125.076 75.621 li
125 75.621 li
125 75.544 li
124.845 75.391 li
124.769 75.391 li
124.769 75.315 li
124.361 74.907 123.955 74.5 123.546 74.093 cv
123.546 74.018 li
123.47 74.018 li
123.394 73.94 li
123.394 73.864 li
123.318 73.864 li
123.242 73.788 li
123.242 73.711 li
123.166 73.711 li
123.166 73.635 li
123.089 73.635 li
123.089 73.559 li
123.013 73.559 li
123.013 73.482 li
122.935 73.482 li
122.935 73.406 li
122.859 73.406 li
122.859 73.329 li
122.785 73.329 li
122.785 73.253 li
122.708 73.253 li
122.708 73.177 li
122.554 73.024 li
122.478 72.947 li
122.402 72.871 li
122.402 72.795 li
122.326 72.795 li
122.326 72.719 li
122.25 72.719 li
122.25 72.643 li
122.171 72.643 li
122.171 72.565 li
122.095 72.565 li
122.095 72.489 li
122.019 72.489 li
122.019 72.413 li
121.943 72.413 li
121.943 72.337 li
121.869 72.337 li
121.869 72.26 li
121.791 72.184 li
121.714 72.184 li
121.714 72.107 li
121.562 71.955 li
121.562 71.878 li
121.486 71.878 li
121.41 71.802 li
121.41 71.726 li
121.333 71.726 li
121.333 71.649 li
121.255 71.649 li
121.255 71.573 li
121.179 71.573 li
121.179 71.496 li
121.103 71.496 li
121.103 71.42 li
121.027 71.344 li
120.951 71.344 li
120.951 71.268 li
120.875 71.191 li
120.798 71.114 li
120.798 71.038 li
120.72 71.038 li
120.644 70.962 li
120.644 70.886 li
120.568 70.886 li
120.568 70.81 li
120.494 70.81 li
120.494 70.732 li
120.417 70.732 li
120.417 70.656 li
120.339 70.656 li
120.339 70.58 li
120.263 70.58 li
120.263 70.504 li
120.187 70.504 li
120.187 70.428 li
120.111 70.428 li
120.111 70.351 li
120.035 70.351 li
120.035 70.274 li
119.958 70.198 li
119.88 70.198 li
119.88 70.122 li
119.705 69.942 119.523 69.766 119.347 69.587 cv
119.347 69.511 li
119.271 69.511 li
119.193 69.435 li
119.119 69.358 li
119.119 69.282 li
119.042 69.282 li
119.042 69.205 li
118.964 69.205 li
118.888 69.129 li
118.888 69.053 li
118.812 69.053 li
118.812 68.977 li
118.736 68.977 li
118.736 68.9 li
118.66 68.9 li
118.66 68.823 li
118.583 68.823 li
118.583 68.747 li
118.505 68.747 li
118.505 68.671 li
118.429 68.671 li
118.429 68.595 li
118.353 68.518 li
118.277 68.441 li
118.203 68.365 li
118.125 68.289 li
118.125 68.213 li
118.048 68.213 li
118.048 68.136 li
117.972 68.136 li
117.972 68.06 li
117.896 68.06 li
117.896 67.983 li
117.82 67.983 li
117.82 67.907 li
117.744 67.907 li
117.744 67.831 li
117.667 67.831 li
117.667 67.754 li
117.589 67.754 li
117.589 67.678 li
117.513 67.678 li
117.513 67.602 li
117.361 67.449 li
117.285 67.372 li
117.208 67.296 li
117.208 67.22 li
117.132 67.22 li
117.132 67.144 li
117.056 67.144 li
117.056 67.067 li
116.978 67.067 li
116.978 66.99 li
116.902 66.99 li
116.902 66.914 li
116.828 66.914 li
116.828 66.838 li
116.751 66.838 li
116.751 66.762 li
116.673 66.762 li
116.673 66.685 li
116.597 66.608 li
116.521 66.532 li
116.369 66.38 li
116.369 66.304 li
116.292 66.304 li
116.292 66.227 li
116.214 66.227 li
116.214 66.15 li
116.138 66.15 li
116.138 66.074 li
116.062 66.074 li
116.062 65.998 li
115.986 65.998 li
115.986 65.922 li
115.912 65.922 li
115.912 65.845 li
115.833 65.845 li
115.833 65.769 li
115.757 65.692 li
115.681 65.692 li
115.681 65.616 li
115.605 65.54 li
115.529 65.463 li
115.453 65.387 li
115.376 65.311 li
115.376 65.234 li
115.298 65.234 li
115.298 65.158 li
115.222 65.158 li
115.222 65.081 li
115.146 65.081 li
115.146 65.005 li
115.07 65.005 li
115.07 64.929 li
114.994 64.929 li
114.994 64.853 li
114.917 64.853 li
114.917 64.776 li
114.841 64.776 li
114.841 64.699 li
114.763 64.699 li
114.763 64.623 li
114.687 64.623 li
114.687 64.547 li
114.611 64.471 li
114.537 64.471 li
114.537 64.394 li
114.025 63.885 113.517 63.375 113.007 62.866 cv
113.007 62.79 li
112.931 62.79 li
112.855 62.714 li
112.855 62.639 li
112.779 62.639 li
112.779 62.56 li
112.703 62.56 li
112.703 62.484 li
112.626 62.484 li
112.626 62.408 li
112.55 62.408 li
112.55 62.332 li
112.472 62.332 li
112.472 62.256 li
112.396 62.256 li
112.396 62.18 li
112.32 62.18 li
112.32 62.103 li
112.246 62.103 li
112.246 62.026 li
112.169 62.026 li
112.169 61.95 li
112.091 61.874 li
112.015 61.874 li
112.015 61.797 li
111.761 61.542 111.505 61.288 111.251 61.033 cv
111.251 60.957 li
111.175 60.957 li
111.099 60.881 li
111.099 60.805 li
111.021 60.805 li
111.021 60.728 li
110.945 60.728 li
110.945 60.651 li
110.871 60.651 li
110.871 60.575 li
110.794 60.575 li
110.794 60.499 li
110.716 60.499 li
110.716 60.423 li
110.64 60.423 li
110.64 60.347 li
110.564 60.347 li
110.564 60.269 li
110.488 60.269 li
110.488 60.193 li
110.412 60.193 li
110.412 60.117 li
110.335 60.117 li
110.335 60.041 li
110.257 60.041 li
110.257 59.965 li
110.181 59.965 li
110.181 59.888 li
110.105 59.888 li
110.105 59.811 li
110.029 59.811 li
110.029 59.735 li
109.955 59.735 li
109.955 59.659 li
109.876 59.659 li
109.876 59.583 li
109.8 59.583 li
109.8 59.506 li
109.724 59.506 li
109.724 59.43 li
109.648 59.43 li
109.648 59.353 li
109.572 59.353 li
109.572 59.277 li
109.496 59.277 li
109.419 59.201 li
109.419 59.124 li
109.341 59.124 li
109.138 58.92 108.935 58.717 108.73 58.514 cv
108.654 58.514 li
108.654 58.437 li
108.58 58.36 li
108.503 58.284 li
108.425 58.284 li
108.425 58.208 li
108.349 58.208 li
108.349 58.132 li
108.273 58.055 li
108.197 58.055 li
108.197 57.978 li
108.121 57.978 li
108.121 57.902 li
108.044 57.902 li
108.044 57.826 li
107.966 57.826 li
107.966 57.75 li
107.89 57.75 li
107.74 57.595 107.583 57.445 107.433 57.291 cv
107.357 57.291 li
107.357 57.215 li
107.279 57.215 li
107.279 57.139 li
107.205 57.139 li
107.205 57.062 li
107.128 57.062 li
107.128 56.986 li
107.05 56.986 li
107.05 56.909 li
106.974 56.909 li
106.898 56.833 li
106.898 56.757 li
106.822 56.757 li
106.822 56.681 li
106.746 56.681 li
106.669 56.604 li
106.593 56.527 li
106.593 56.451 li
106.515 56.451 li
106.439 56.375 li
106.363 56.299 li
106.289 56.299 li
106.289 56.223 li
106.212 56.145 li
106.134 56.069 li
106.058 56.069 li
106.058 55.993 li
105.982 55.917 li
105.906 55.84 li
105.83 55.84 li
105.83 55.764 li
105.753 55.764 li
105.753 55.687 li
105.675 55.611 li
105.599 55.611 li
105.599 55.535 li
105.523 55.535 li
105.523 55.458 li
105.447 55.458 li
105.447 55.382 li
105.371 55.382 li
105.371 55.306 li
105.294 55.306 li
105.294 55.229 li
105.218 55.229 li
105.142 55.153 li
105.142 55.076 li
105.064 55.076 li
105.064 55 li
104.988 55 li
104.914 54.924 li
104.837 54.848 li
104.837 54.771 li
104.759 54.771 li
104.683 54.695 li
104.607 54.618 li
104.531 54.618 li
104.531 54.542 li
104.455 54.466 li
104.378 54.39 li
104.3 54.39 li
104.3 54.312 li
104.224 54.312 li
104.224 54.236 li
104.148 54.236 li
104.148 54.16 li
104.072 54.16 li
104.072 54.084 li
103.998 54.084 li
103.998 54.008 li
103.919 54.008 li
103.919 53.931 li
103.843 53.931 li
103.843 53.854 li
103.767 53.854 li
103.691 53.778 li
103.615 53.702 li
103.539 53.702 li
103.539 53.626 li
103.462 53.626 li
103.462 53.549 li
103.384 53.549 li
103.384 53.473 li
103.308 53.473 li
103.308 53.396 li
103.232 53.396 li
103.156 53.32 li
103.08 53.244 li
103.003 53.167 li
102.927 53.167 li
102.927 53.091 li
102.851 53.091 li
102.851 53.015 li
102.773 53.015 li
102.773 52.938 li
102.697 52.938 li
102.697 52.862 li
102.623 52.862 li
102.623 52.785 li
102.544 52.785 li
102.468 52.709 li
102.392 52.633 li
102.316 52.633 li
102.316 52.557 li
102.24 52.557 li
102.24 52.48 li
102.164 52.48 li
102.164 52.403 li
102.087 52.403 li
102.087 52.327 li
102.009 52.327 li
101.933 52.251 li
101.857 52.251 li
101.857 52.175 li
101.781 52.175 li
101.781 52.099 li
101.706 52.099 li
101.706 52.021 li
101.628 52.021 li
101.628 51.945 li
101.552 51.945 li
101.476 51.869 li
101.399 51.793 li
101.323 51.793 li
101.323 51.717 li
101.247 51.717 li
101.247 51.64 li
101.17 51.64 li
101.17 51.563 li
101.094 51.563 li
101.094 51.487 li
101.018 51.487 li
101.018 51.411 li
100.942 51.411 li
100.942 51.335 li
100.865 51.335 li
100.789 51.258 li
100.712 51.182 li
100.636 51.182 li
100.636 51.105 li
100.559 51.105 li
100.559 51.029 li
100.483 51.029 li
100.483 50.953 li
100.407 50.953 li
100.407 50.876 li
100.254 50.876 li
100.254 50.8 li
100.177 50.8 li
100.177 50.724 li
100.101 50.724 li
100.101 50.647 li
100.025 50.647 li
100.025 50.57 li
99.949 50.57 li
99.949 50.494 li
99.795 50.494 li
99.795 50.418 li
99.719 50.418 li
99.719 50.342 li
99.643 50.342 li
99.643 50.266 li
99.567 50.266 li
99.567 50.188 li
99.491 50.188 li
99.414 50.112 li
99.337 50.036 li
99.261 50.036 li
99.261 49.96 li
99.185 49.96 li
99.185 49.884 li
99.109 49.884 li
99.109 49.807 li
99.032 49.807 li
98.879 49.654 li
98.803 49.654 li
98.803 49.578 li
98.727 49.578 li
98.727 49.502 li
98.65 49.502 li
98.65 49.425 li
98.574 49.425 li
98.498 49.349 li
98.421 49.272 li
98.345 49.272 li
98.345 49.196 li
98.268 49.196 li
98.268 49.12 li
98.192 49.12 li
98.192 49.043 li
98.116 49.043 li
98.04 48.967 li
97.963 48.967 li
97.963 48.891 li
97.886 48.891 li
97.886 48.814 li
97.81 48.814 li
97.734 48.738 li
97.658 48.661 li
97.581 48.661 li
97.581 48.585 li
97.504 48.585 li
97.428 48.509 li
97.352 48.433 li
97.276 48.433 li
97.276 48.355 li
97.199 48.355 li
97.199 48.279 li
97.046 48.279 li
97.046 48.203 li
96.97 48.203 li
96.97 48.127 li
96.894 48.127 li
96.817 48.051 li
96.741 48.051 li
96.741 47.974 li
96.665 47.974 li
96.665 47.897 li
96.588 47.897 li
96.512 47.821 li
96.435 47.821 li
96.435 47.745 li
96.359 47.745 li
96.359 47.669 li
96.206 47.669 li
96.206 47.592 li
96.131 47.592 li
96.131 47.516 li
96.053 47.516 li
95.977 47.439 li
95.901 47.363 li
95.825 47.363 li
95.825 47.287 li
95.748 47.287 li
95.595 47.134 li
95.519 47.134 li
95.519 47.058 li
95.443 47.058 li
95.443 46.981 li
95.367 46.981 li
95.29 46.905 li
95.213 46.905 li
95.213 46.828 li
95.137 46.828 li
95.137 46.752 li
95.061 46.752 li
95.061 46.676 li
94.908 46.676 li
94.908 46.6 li
94.831 46.6 li
94.831 46.523 li
94.756 46.523 li
94.756 46.446 li
94.679 46.446 li
94.602 46.37 li
94.526 46.294 li
94.45 46.294 li
94.45 46.218 li
94.373 46.218 li
94.373 46.142 li
94.22 46.142 li
94.22 46.064 li
94.144 46.064 li
93.992 45.912 li
93.915 45.912 li
93.915 45.836 li
93.762 45.836 li
93.762 45.759 li
93.685 45.759 li
93.685 45.683 li
93.61 45.683 li
93.534 45.606 li
93.456 45.606 li
93.456 45.53 li
93.381 45.53 li
93.304 45.454 li
93.228 45.377 li
93.152 45.377 li
93.152 45.301 li
93.075 45.301 li
92.998 45.224 li
92.923 45.224 li
92.923 45.148 li
92.846 45.148 li
92.846 45.072 li
92.77 45.072 li
92.693 44.996 li
92.617 44.996 li
92.617 44.919 li
92.54 44.919 li
92.464 44.843 li
92.388 44.843 li
92.388 44.767 li
92.235 44.767 li
92.235 44.69 li
92.159 44.69 li
92.159 44.613 li
92.006 44.613 li
92.006 44.537 li
91.929 44.537 li
91.929 44.461 li
91.777 44.461 li
91.777 44.385 li
91.701 44.385 li
91.701 44.308 li
91.548 44.308 li
91.548 44.231 li
91.471 44.231 li
91.394 44.155 li
91.319 44.079 li
91.242 44.079 li
91.242 44.003 li
91.089 44.003 li
91.089 43.927 li
91.013 43.927 li
91.013 43.85 li
90.936 43.85 li
90.86 43.773 li
90.784 43.773 li
90.784 43.697 li
90.707 43.697 li
90.631 43.621 li
90.555 43.621 li
90.555 43.545 li
90.477 43.545 li
90.477 43.468 li
90.402 43.468 li
90.326 43.392 li
90.249 43.392 li
90.249 43.315 li
90.173 43.315 li
90.096 43.239 li
90.02 43.239 li
90.02 43.163 li
89.944 43.163 li
89.944 43.086 li
89.791 43.086 li
89.791 43.01 li
89.714 43.01 li
89.638 42.933 li
89.562 42.857 li
89.486 42.857 li
89.486 42.781 li
89.332 42.781 li
89.332 42.704 li
89.256 42.704 li
89.256 42.628 li
89.103 42.628 li
89.103 42.552 li
89.028 42.552 li
89.028 42.475 li
88.874 42.475 li
88.874 42.399 li
88.798 42.399 li
88.722 42.322 li
88.645 42.322 li
88.645 42.246 li
88.569 42.246 li
88.493 42.17 li
88.416 42.17 li
88.416 42.094 li
88.34 42.094 li
88.264 42.017 li
88.186 42.017 li
88.186 41.94 li
88.111 41.94 li
88.111 41.864 li
88.035 41.864 li
87.958 41.788 li
87.881 41.788 li
87.881 41.712 li
87.805 41.712 li
87.728 41.636 li
87.653 41.636 li
87.653 41.558 li
87.577 41.558 li
87.499 41.482 li
87.423 41.482 li
87.423 41.406 li
87.347 41.406 li
87.27 41.33 li
87.195 41.33 li
87.195 41.253 li
87.118 41.253 li
87.041 41.177 li
86.965 41.177 li
86.889 41.1 li
86.812 41.1 li
86.736 41.024 li
86.66 41.024 li
86.66 40.948 li
86.507 40.948 li
86.507 40.871 li
86.431 40.871 li
86.353 40.795 li
86.278 40.795 li
86.278 40.719 li
86.126 40.719 li
86.126 40.642 li
85.972 40.642 li
85.972 40.566 li
85.895 40.566 li
85.82 40.489 li
85.744 40.489 li
85.744 40.413 li
85.668 40.413 li
85.59 40.337 li
85.514 40.337 li
85.514 40.261 li
85.437 40.261 li
85.362 40.184 li
85.286 40.184 li
85.286 40.107 li
85.209 40.107 li
85.132 40.031 li
85.056 40.031 li
85.056 39.955 li
84.979 39.955 li
84.903 39.879 li
84.827 39.879 li
84.827 39.803 li
84.751 39.803 li
84.751 39.725 li
84.598 39.725 li
84.598 39.649 li
84.52 39.649 li
84.445 39.573 li
84.369 39.573 li
84.293 39.497 li
84.216 39.497 li
84.216 39.421 li
84.062 39.421 li
84.062 39.344 li
83.911 39.344 li
83.911 39.267 li
83.757 39.267 li
83.757 39.191 li
83.681 39.191 li
83.604 39.115 li
83.529 39.115 li
83.453 39.039 li
83.376 39.039 li
83.376 38.962 li
83.223 38.962 li
83.223 38.886 li
83.146 38.886 li
83.071 38.809 li
82.994 38.809 li
82.994 38.733 li
82.918 38.733 li
82.841 38.657 li
82.765 38.657 li
82.765 38.58 li
82.612 38.58 li
82.612 38.504 li
82.536 38.504 li
82.46 38.428 li
82.383 38.428 li
82.383 38.351 li
82.229 38.351 li
82.229 38.274 li
82.154 38.274 li
82.078 38.198 li
82.002 38.198 li
81.924 38.122 li
81.848 38.122 li
81.848 38.046 li
81.696 38.046 li
81.696 37.97 li
81.543 37.97 li
81.543 37.892 li
81.466 37.892 li
81.39 37.816 li
81.313 37.816 li
81.238 37.74 li
81.161 37.74 li
81.161 37.664 li
81.008 37.664 li
81.008 37.588 li
80.932 37.588 li
80.855 37.511 li
80.779 37.511 li
80.779 37.434 li
80.627 37.434 li
80.627 37.358 li
80.55 37.358 li
80.474 37.282 li
80.396 37.282 li
80.321 37.206 li
80.245 37.206 li
80.245 37.129 li
80.092 37.129 li
80.092 37.053 li
79.938 37.053 li
79.938 36.976 li
79.787 36.976 li
79.787 36.9 li
79.633 36.9 li
79.633 36.824 li
79.48 36.824 li
79.48 36.747 li
79.405 36.747 li
79.246 36.606 79.029 36.583 78.87 36.442 cv
78.794 36.442 li
78.794 36.365 li
78.641 36.365 li
78.641 36.289 li
78.564 36.289 li
78.488 36.213 li
78.412 36.213 li
78.412 36.137 li
78.259 36.137 li
78.259 36.06 li
78.105 36.06 li
78.105 35.983 li
77.954 35.983 li
77.954 35.907 li
77.801 35.907 li
77.801 35.831 li
77.647 35.831 li
77.647 35.755 li
77.496 35.755 li
77.496 35.679 li
77.342 35.679 li
77.342 35.601 li
77.189 35.601 li
77.189 35.525 li
77.037 35.525 li
76.853 35.377 76.382 35.218 76.197 35.067 cv
76.121 35.067 li
76.121 34.991 li
75.968 34.991 li
75.968 34.915 li
75.814 34.915 li
75.814 34.838 li
75.663 34.838 li
75.663 34.762 li
75.509 34.762 li
75.509 34.685 li
75.356 34.685 li
75.356 34.609 li
75.205 34.609 li
75.205 34.532 li
75.051 34.532 li
75.051 34.456 li
74.975 34.456 li
74.781 34.429 74.635 34.254 74.441 34.227 cv
74.364 34.227 li
74.364 34.15 li
74.288 34.15 li
74.212 34.074 li
74.059 34.074 li
74.059 33.998 li
73.982 33.998 li
73.771 33.833 73.506 33.781 73.295 33.616 cv
73.142 33.616 li
73.142 33.54 li
72.989 33.54 li
72.989 33.464 li
72.837 33.464 li
72.76 33.387 li
72.606 33.387 li
72.606 33.31 li
72.455 33.31 li
72.455 33.234 li
72.302 33.234 li
72.226 33.158 li
72.073 33.158 li
72.073 33.082 li
71.92 33.082 li
71.92 33.005 li
71.768 33.005 li
71.768 32.929 li
71.615 32.929 li
71.538 32.852 li
71.386 32.852 li
71.386 32.776 li
71.233 32.776 li
71.233 32.7 li
71.08 32.7 li
71.004 32.623 li
70.851 32.623 li
70.851 32.547 li
70.698 32.547 li
70.698 32.471 li
70.545 32.471 li
70.545 32.394 li
70.393 32.394 li
70.393 32.318 li
70.24 32.318 li
70.164 32.241 li
70.011 32.241 li
70.011 32.165 li
69.935 32.165 li
69.858 32.089 li
69.706 32.089 li
69.706 32.013 li
69.629 32.013 li
69.553 31.936 li
69.476 31.936 li
69.4 31.859 li
69.247 31.859 li
69.247 31.783 li
69.094 31.783 li
69.094 31.707 li
68.941 31.707 li
68.865 31.631 li
68.712 31.631 li
68.712 31.555 li
68.483 31.555 li
68.483 31.477 li
68.255 31.477 li
68.255 31.401 li
68.102 31.401 li
68.025 31.325 li
67.873 31.325 li
67.873 31.249 li
67.72 31.249 li
67.72 31.172 li
67.567 31.172 li
67.491 31.096 li
67.338 31.096 li
67.338 31.019 li
67.185 31.019 li
67.185 30.943 li
67.032 30.943 li
66.956 30.867 li
66.803 30.867 li
66.803 30.79 li
66.651 30.79 li
66.651 30.714 li
66.498 30.714 li
66.498 30.638 li
66.345 30.638 li
66.269 30.561 li
66.116 30.561 li
66.116 30.485 li
65.963 30.485 li
65.963 30.408 li
65.811 30.408 li
65.734 30.332 li
65.581 30.332 li
65.581 30.256 li
65.429 30.256 li
65.429 30.18 li
65.276 30.18 li
65.199 30.103 li
65.123 30.103 li
65.047 30.026 li
64.894 30.026 li
64.894 29.95 li
64.741 29.95 li
64.741 29.874 li
64.588 29.874 li
64.512 29.798 li
64.359 29.798 li
64.359 29.722 li
64.131 29.722 li
64.131 29.644 li
63.977 29.644 li
63.901 29.568 li
63.748 29.568 li
63.748 29.492 li
63.596 29.492 li
63.519 29.416 li
63.367 29.416 li
63.367 29.34 li
63.214 29.34 li
63.137 29.263 li
62.985 29.263 li
62.985 29.186 li
62.755 29.186 li
62.755 29.11 li
62.602 29.11 li
62.526 29.034 li
62.374 29.034 li
62.297 28.958 li
62.145 28.958 li
62.068 28.881 li
61.915 28.881 li
61.915 28.805 li
61.686 28.805 li
61.686 28.728 li
61.457 28.728 li
61.457 28.652 li
61.227 28.652 li
61.227 28.576 li
60.998 28.576 li
60.998 28.499 li
60.693 28.499 li
60.693 28.423 li
60.464 28.423 li
60.464 28.347 li
60.235 28.347 li
60.235 28.27 li
60.006 28.27 li
60.006 28.193 li
59.777 28.193 li
59.701 28.117 li
59.548 28.117 li
59.472 28.041 li
59.319 28.041 li
59.243 27.965 li
59.09 27.965 li
59.013 27.889 li
58.86 27.889 li
58.784 27.811 li
58.631 27.811 li
58.555 27.735 li
58.402 27.735 li
58.326 27.659 li
58.173 27.659 li
58.097 27.583 li
57.868 27.583 li
57.868 27.507 li
57.639 27.507 li
57.639 27.43 li
57.41 27.43 li
57.41 27.353 li
57.18 27.353 li
57.103 27.277 li
56.798 27.277 li
56.798 27.201 li
56.493 27.201 li
56.416 27.125 li
56.111 27.125 li
56.111 27.048 li
55.882 27.048 li
55.882 26.972 li
55.729 26.972 li
55.653 26.895 li
55.5 26.895 li
55.5 26.819 li
55.348 26.819 li
55.348 26.743 li
55.195 26.743 li
55.195 26.666 li
55.041 26.666 li
54.966 26.59 li
54.812 26.59 li
54.812 26.514 li
54.583 26.514 li
54.583 26.437 li
54.507 26.437 li
54.329 26.437 54.151 26.437 53.973 26.437 cv
53.896 26.437 li
53.896 26.361 li
53.82 26.361 li
53.591 26.361 53.362 26.361 53.133 26.361 cv
53.056 26.361 li
53.056 26.284 li
52.827 26.284 li
52.75 26.208 li
52.598 26.208 li
52.598 26.132 li
52.445 26.132 li
52.369 26.056 li
52.216 26.056 li
52.216 25.979 li
51.987 25.979 li
51.911 25.902 li
51.682 25.902 li
51.682 25.826 li
51.453 25.826 li
51.375 25.75 li
51.224 25.75 li
51.146 25.674 li
50.994 25.674 li
50.918 25.598 li
50.688 25.598 li
50.688 25.52 li
50.383 25.52 li
50.383 25.444 li
49.772 25.444 li
49.696 25.368 li
49.467 25.368 li
49.238 25.368 49.009 25.368 48.78 25.368 cv
48.627 25.368 li
48.627 25.292 li
48.397 25.292 li
48.397 25.216 li
48.245 25.216 li
48.169 25.139 li
48.016 25.139 li
48.016 25.062 li
47.863 25.062 li
47.863 24.986 li
47.711 24.986 li
47.634 24.91 li
47.48 24.91 li
47.48 24.834 li
47.252 24.834 li
47.252 24.757 li
46.947 24.757 li
46.947 24.681 li
46.87 24.681 li
46.59 24.681 46.31 24.681 46.03 24.681 cv
45.954 24.681 li
45.954 24.604 li
45.878 24.604 li
45.749 24.604 45.623 24.604 45.496 24.604 cv
45.419 24.604 li
45.419 24.528 li
45.114 24.528 li
45.037 24.451 li
44.808 24.451 li
44.732 24.375 li
44.503 24.375 li
44.503 24.299 li
44.197 24.299 li
44.121 24.223 li
43.739 24.223 li
43.739 24.146 li
43.357 24.146 li
43.281 24.069 li
42.899 24.069 li
42.899 23.993 li
42.593 23.993 li
42.517 23.917 li
42.212 23.917 li
42.212 23.841 li
41.83 23.841 li
41.83 23.765 li
41.372 23.765 li
41.295 23.687 li
40.761 23.687 li
40.684 23.611 li
40.302 23.611 li
40.226 23.535 li
39.844 23.535 li
39.844 23.459 li
39.386 23.459 li
39.31 23.383 li
38.775 23.383 li
38.699 23.306 li
37.858 23.306 li
37.858 23.229 li
37.782 23.229 li
37.069 23.229 36.356 23.229 35.644 23.229 cv
35.567 23.229 li
35.567 23.153 li
35.491 23.153 li
35.338 23.153 35.185 23.153 35.033 23.153 cv
34.956 23.153 li
34.956 23.077 li
34.88 23.077 li
34.676 23.077 34.473 23.077 34.269 23.077 cv
34.116 23.077 li
.912261 .865354 .871092 .774319 cmyk
@
182.736 103.2 mo
184.351 103.2 li
184.351 101.205 li
182.736 101.205 li
cp
.869474 .665949 .0384833 0 cmyk
f
182.736 101.205 mo
185.714 101.205 li
185.714 104.185 li
182.736 104.185 li
cp
@
182.048 103.2 mo
184.351 103.2 li
184.351 101.205 li
182.048 101.205 li
cp
f
182.048 101.205 mo
185.027 101.205 li
185.027 104.185 li
182.048 104.185 li
cp
@
181.13 103.2 mo
184.109 103.2 li
184.109 101.205 li
181.13 101.205 li
cp
f
181.13 101.205 mo
184.109 101.205 li
184.109 104.185 li
181.13 104.185 li
cp
@
180.292 103.2 mo
183.269 103.2 li
183.269 101.129 li
180.292 101.129 li
cp
f
180.292 101.129 mo
183.269 101.129 li
183.269 104.107 li
180.292 104.107 li
cp
@
179.376 103.2 mo
182.353 103.2 li
182.353 101.129 li
179.376 101.129 li
cp
f
179.376 101.129 mo
182.353 101.129 li
182.353 104.107 li
179.376 104.107 li
cp
@
178.535 103.2 mo
181.513 103.2 li
181.513 101.053 li
178.535 101.053 li
cp
f
178.535 101.053 mo
181.513 101.053 li
181.513 104.031 li
178.535 104.031 li
cp
@
177.619 103.2 mo
180.597 103.2 li
180.597 101.053 li
177.619 101.053 li
cp
f
177.619 101.053 mo
180.597 101.053 li
180.597 104.031 li
177.619 104.031 li
cp
@
176.779 103.2 mo
179.757 103.2 li
179.757 100.977 li
176.779 100.977 li
cp
f
176.779 100.977 mo
179.757 100.977 li
179.757 103.954 li
176.779 103.954 li
cp
@
175.861 103.2 mo
178.839 103.2 li
178.839 100.899 li
175.861 100.899 li
cp
f
175.861 100.899 mo
178.839 100.899 li
178.839 103.878 li
175.861 103.878 li
cp
@
174.945 103.2 mo
177.923 103.2 li
177.923 100.899 li
174.945 100.899 li
cp
f
174.945 100.899 mo
177.923 100.899 li
177.923 103.878 li
174.945 103.878 li
cp
@
174.105 103.2 mo
177.083 103.2 li
177.083 100.823 li
174.105 100.823 li
cp
f
174.105 100.823 mo
177.083 100.823 li
177.083 103.802 li
174.105 103.802 li
cp
@
173.8 103.2 mo
176.779 103.2 li
176.779 101.129 li
173.8 101.129 li
cp
f
173.8 101.129 mo
176.779 101.129 li
176.779 104.107 li
173.8 104.107 li
cp
@
173.037 103.2 mo
176.013 103.2 li
176.013 101.053 li
173.037 101.053 li
cp
f
173.037 101.053 mo
176.013 101.053 li
176.013 104.031 li
173.037 104.031 li
cp
@
172.121 103.2 mo
175.097 103.2 li
175.097 101.053 li
172.121 101.053 li
cp
f
172.121 101.053 mo
175.097 101.053 li
175.097 104.031 li
172.121 104.031 li
cp
@
171.205 103.2 mo
174.181 103.2 li
174.181 100.977 li
171.205 100.977 li
cp
f
171.205 100.977 mo
174.181 100.977 li
174.181 103.954 li
171.205 103.954 li
cp
@
170.287 103.2 mo
173.265 103.2 li
173.265 100.899 li
170.287 100.899 li
cp
f
170.287 100.899 mo
173.265 100.899 li
173.265 103.878 li
170.287 103.878 li
cp
@
169.447 103.2 mo
172.425 103.2 li
172.425 100.823 li
169.447 100.823 li
cp
f
169.447 100.823 mo
172.425 100.823 li
172.425 103.802 li
169.447 103.802 li
cp
@
168.529 103.2 mo
171.509 103.2 li
171.509 100.747 li
168.529 100.747 li
cp
f
168.529 100.747 mo
171.509 100.747 li
171.509 103.727 li
168.529 103.727 li
cp
@
167.689 103.2 mo
170.669 103.2 li
170.669 100.594 li
167.689 100.594 li
cp
f
167.689 100.594 mo
170.669 100.594 li
170.669 103.572 li
167.689 103.572 li
cp
@
166.773 103.2 mo
169.753 103.2 li
169.753 100.519 li
166.773 100.519 li
cp
f
166.773 100.519 mo
169.753 100.519 li
169.753 103.496 li
166.773 103.496 li
cp
@
165.857 103.2 mo
168.835 103.2 li
168.835 100.365 li
165.857 100.365 li
cp
f
165.857 100.365 mo
168.835 100.365 li
168.835 103.344 li
165.857 103.344 li
cp
@
grestore
165.017 103.19 mo
167.996 103.19 li
167.996 100.212 li
165.017 100.212 li
cp
.869474 .665949 .0384833 0 cmyk
f
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
.5 lw
2 lc
0 lj
165.017 100.212 mo
167.996 100.212 li
167.996 103.19 li
165.017 103.19 li
cp
@
grestore
164.177 103.038 mo
167.156 103.038 li
167.156 100.061 li
164.177 100.061 li
cp
f
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
.5 lw
2 lc
0 lj
164.177 100.061 mo
167.156 100.061 li
167.156 103.038 li
164.177 103.038 li
cp
@
grestore
163.259 102.886 mo
166.238 102.886 li
166.238 99.9072 li
163.259 99.9072 li
cp
f
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
.5 lw
2 lc
0 lj
163.259 99.907 mo
166.238 99.907 li
166.238 102.886 li
163.259 102.886 li
cp
@
grestore
162.343 102.732 mo
165.322 102.732 li
165.322 99.7539 li
162.343 99.7539 li
cp
f
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
.5 lw
2 lc
0 lj
162.343 99.754 mo
165.322 99.754 li
165.322 102.732 li
162.343 102.732 li
cp
@
grestore
161.427 102.504 mo
164.406 102.504 li
164.406 99.5254 li
161.427 99.5254 li
cp
f
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
.5 lw
2 lc
0 lj
161.427 99.525 mo
164.406 99.525 li
164.406 102.504 li
161.427 102.504 li
cp
@
grestore
160.587 102.274 mo
163.566 102.274 li
163.566 99.2959 li
160.587 99.2959 li
cp
f
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
.5 lw
2 lc
0 lj
160.587 99.296 mo
163.566 99.296 li
163.566 102.274 li
160.587 102.274 li
cp
@
grestore
159.748 102.045 mo
162.726 102.045 li
162.726 99.0664 li
159.748 99.0664 li
cp
f
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
.5 lw
2 lc
0 lj
159.748 99.066 mo
162.726 99.066 li
162.726 102.045 li
159.748 102.045 li
cp
@
grestore
158.832 101.816 mo
161.81 101.816 li
161.81 98.8379 li
158.832 98.8379 li
cp
f
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
.5 lw
2 lc
0 lj
158.832 98.838 mo
161.81 98.838 li
161.81 101.816 li
158.832 101.816 li
cp
@
grestore
157.916 101.587 mo
160.892 101.587 li
160.892 98.6084 li
157.916 98.6084 li
cp
f
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
.5 lw
2 lc
0 lj
157.916 98.608 mo
160.892 98.608 li
160.892 101.587 li
157.916 101.587 li
cp
@
grestore
157 101.281 mo
159.976 101.281 li
159.976 98.3027 li
157 98.3027 li
cp
f
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
.5 lw
2 lc
0 lj
157 98.303 mo
159.976 98.303 li
159.976 101.281 li
157 101.281 li
cp
@
grestore
156.158 100.977 mo
159.136 100.977 li
159.136 97.9971 li
156.158 97.9971 li
cp
f
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
.5 lw
2 lc
0 lj
156.158 97.997 mo
159.136 97.997 li
159.136 100.977 li
156.158 100.977 li
cp
@
grestore
155.318 100.671 mo
158.296 100.671 li
158.296 97.6924 li
155.318 97.6924 li
cp
f
.5 lw
2 lc
0 lj
155.318 97.692 mo
158.296 97.692 li
158.296 100.671 li
155.318 100.671 li
cp
@
154.402 100.365 mo
157.38 100.365 li
157.38 97.3867 li
154.402 97.3867 li
cp
f
154.402 97.387 mo
157.38 97.387 li
157.38 100.365 li
154.402 100.365 li
cp
@
153.56 100.061 mo
156.541 100.061 li
156.541 97.0811 li
153.56 97.0811 li
cp
f
153.56 97.081 mo
156.541 97.081 li
156.541 100.061 li
153.56 100.061 li
cp
@
152.644 99.603 mo
155.625 99.603 li
155.625 96.6245 li
152.644 96.6245 li
cp
f
152.644 96.623 mo
155.625 96.623 li
155.625 99.6016 li
152.644 99.6016 li
cp
@
151.804 99.22 mo
154.785 99.22 li
154.785 96.2415 li
151.804 96.2415 li
cp
f
151.804 96.241 mo
154.785 96.241 li
154.785 99.2195 li
151.804 99.2195 li
cp
@
150.964 98.762 mo
153.943 98.762 li
153.943 95.7835 li
150.964 95.7835 li
cp
f
150.964 95.783 mo
153.943 95.783 li
153.943 98.7615 li
150.964 98.7615 li
cp
@
150.048 98.303 mo
153.027 98.303 li
153.027 95.3245 li
150.048 95.3245 li
cp
f
150.048 95.324 mo
153.027 95.324 li
153.027 98.3025 li
150.048 98.3025 li
cp
@
149.208 97.845 mo
152.187 97.845 li
152.187 94.8665 li
149.208 94.8665 li
cp
f
149.208 94.866 mo
152.187 94.866 li
152.187 97.8445 li
149.208 97.8445 li
cp
@
148.292 97.312 mo
151.269 97.312 li
151.269 94.3335 li
148.292 94.3335 li
cp
f
148.292 94.332 mo
151.269 94.332 li
151.269 97.3105 li
148.292 97.3105 li
cp
@
147.453 96.699 mo
150.429 96.699 li
150.429 93.7205 li
147.453 93.7205 li
cp
f
147.453 93.721 mo
150.429 93.721 li
150.429 96.6995 li
147.453 96.6995 li
cp
@
146.537 96.088 mo
149.513 96.088 li
149.513 93.1095 li
146.537 93.1095 li
cp
f
146.537 93.109 mo
149.513 93.109 li
149.513 96.0875 li
146.537 96.0875 li
cp
@
145.695 95.324 mo
148.673 95.324 li
148.673 92.3455 li
145.695 92.3455 li
cp
f
145.695 92.346 mo
148.673 92.346 li
148.673 95.3245 li
145.695 95.3245 li
cp
@
144.779 94.637 mo
147.757 94.637 li
147.757 91.6585 li
144.779 91.6585 li
cp
f
144.779 91.658 mo
147.757 91.658 li
147.757 94.6365 li
144.779 94.6365 li
cp
@
143.939 93.95 mo
146.917 93.95 li
146.917 90.9715 li
143.939 90.9715 li
cp
f
143.939 90.972 mo
146.917 90.972 li
146.917 93.9505 li
143.939 93.9505 li
cp
@
143.021 93.188 mo
146.001 93.188 li
146.001 90.2095 li
143.021 90.2095 li
cp
f
143.021 90.208 mo
146.001 90.208 li
146.001 93.1865 li
143.021 93.1865 li
cp
@
142.181 92.423 mo
145.162 92.423 li
145.162 89.4444 li
142.181 89.4444 li
cp
f
142.181 89.444 mo
145.162 89.444 li
145.162 92.4226 li
142.181 92.4226 li
cp
@
141.265 91.658 mo
144.244 91.658 li
144.244 88.6805 li
141.265 88.6805 li
cp
f
141.265 88.681 mo
144.244 88.681 li
144.244 91.6585 li
141.265 91.6585 li
cp
@
140.425 90.896 mo
143.404 90.896 li
143.404 87.9175 li
140.425 87.9175 li
cp
f
140.425 87.916 mo
143.404 87.916 li
143.404 90.8945 li
140.425 90.8945 li
cp
@
139.509 90.284 mo
142.488 90.284 li
142.488 87.3055 li
139.509 87.3055 li
cp
f
139.509 87.306 mo
142.488 87.306 li
142.488 90.2845 li
139.509 90.2845 li
cp
@
138.669 89.521 mo
141.648 89.521 li
141.648 86.5425 li
138.669 86.5425 li
cp
f
138.669 86.542 mo
141.648 86.542 li
141.648 89.5205 li
138.669 89.5205 li
cp
@
137.753 88.757 mo
140.73 88.757 li
140.73 85.7785 li
137.753 85.7785 li
cp
f
137.753 85.778 mo
140.73 85.778 li
140.73 88.7565 li
137.753 88.7565 li
cp
@
136.837 88.069 mo
139.814 88.069 li
139.814 85.0905 li
136.837 85.0905 li
cp
f
136.837 85.091 mo
139.814 85.091 li
139.814 88.0695 li
136.837 88.0695 li
cp
@
135.996 87.534 mo
138.974 87.534 li
138.974 84.5564 li
135.996 84.5564 li
cp
f
135.996 84.557 mo
138.974 84.557 li
138.974 87.5346 li
135.996 87.5346 li
cp
@
135.08 86.924 mo
138.058 86.924 li
138.058 83.9455 li
135.08 83.9455 li
cp
f
135.08 83.945 mo
138.058 83.945 li
138.058 86.9235 li
135.08 86.9235 li
cp
@
134.164 86.389 mo
137.14 86.389 li
137.14 83.4105 li
134.164 83.4105 li
cp
f
134.164 83.41 mo
137.14 83.41 li
137.14 86.3885 li
134.164 86.3885 li
cp
@
133.398 85.778 mo
136.378 85.778 li
136.378 82.7995 li
133.398 82.7995 li
cp
f
133.398 82.8 mo
136.378 82.8 li
136.378 85.7785 li
133.398 85.7785 li
cp
@
132.558 85.167 mo
135.539 85.167 li
135.539 82.1885 li
132.558 82.1885 li
cp
f
132.558 82.188 mo
135.539 82.188 li
135.539 85.1665 li
132.558 85.1665 li
cp
@
131.642 84.557 mo
134.623 84.557 li
134.623 81.5775 li
131.642 81.5775 li
cp
f
131.642 81.577 mo
134.623 81.577 li
134.623 84.5565 li
131.642 84.5565 li
cp
@
130.802 83.869 mo
133.781 83.869 li
133.781 80.8905 li
130.802 80.8905 li
cp
f
130.802 80.892 mo
133.781 80.892 li
133.781 83.8695 li
130.802 83.8695 li
cp
@
129.886 83.105 mo
132.865 83.105 li
132.865 80.1265 li
129.886 80.1265 li
cp
f
129.886 80.127 mo
132.865 80.127 li
132.865 83.1055 li
129.886 83.1055 li
cp
@
129.046 82.418 mo
132.025 82.418 li
132.025 79.4395 li
129.046 79.4395 li
cp
f
129.046 79.44 mo
132.025 79.44 li
132.025 82.4185 li
129.046 82.4185 li
cp
@
128.13 81.654 mo
131.107 81.654 li
131.107 78.6755 li
128.13 78.6755 li
cp
f
128.13 78.676 mo
131.107 78.676 li
131.107 81.6545 li
128.13 81.6545 li
cp
@
127.214 80.814 mo
130.191 80.814 li
130.191 77.8355 li
127.214 77.8355 li
cp
f
127.214 77.835 mo
130.191 77.835 li
130.191 80.8135 li
127.214 80.8135 li
cp
@
126.375 80.05 mo
129.351 80.05 li
129.351 77.0715 li
126.375 77.0715 li
cp
f
126.375 77.071 mo
129.351 77.071 li
129.351 80.0495 li
126.375 80.0495 li
cp
@
125.457 79.134 mo
128.435 79.134 li
128.435 76.1555 li
125.457 76.1555 li
cp
f
125.457 76.155 mo
128.435 76.155 li
128.435 79.1335 li
125.457 79.1335 li
cp
@
124.541 78.217 mo
127.519 78.217 li
127.519 75.2395 li
124.541 75.2395 li
cp
f
124.541 75.239 mo
127.519 75.239 li
127.519 78.2165 li
124.541 78.2165 li
cp
@
123.701 77.226 mo
126.677 77.226 li
126.677 74.2475 li
123.701 74.2475 li
cp
f
123.701 74.246 mo
126.677 74.246 li
126.677 77.2245 li
123.701 77.2245 li
cp
@
122.859 76.385 mo
125.839 76.385 li
125.839 73.4065 li
122.859 73.4065 li
cp
f
122.859 73.406 mo
125.839 73.406 li
125.839 76.3845 li
122.859 76.3845 li
cp
@
121.869 75.393 mo
124.845 75.393 li
124.845 72.4145 li
121.869 72.4145 li
cp
f
121.869 72.413 mo
124.845 72.413 li
124.845 75.3915 li
121.869 75.3915 li
cp
@
121.027 74.476 mo
124.005 74.476 li
124.005 71.4975 li
121.027 71.4975 li
cp
f
121.027 71.496 mo
124.005 71.496 li
124.005 74.4745 li
121.027 74.4745 li
cp
@
120.111 73.482 mo
123.089 73.482 li
123.089 70.5035 li
120.111 70.5035 li
cp
f
120.111 70.504 mo
123.089 70.504 li
123.089 73.4825 li
120.111 73.4825 li
cp
@
119.347 72.644 mo
122.326 72.644 li
122.326 69.6654 li
119.347 69.6654 li
cp
f
119.347 69.664 mo
122.326 69.664 li
122.326 72.6425 li
119.347 72.6425 li
cp
@
118.429 71.649 mo
121.41 71.649 li
121.41 68.6705 li
118.429 68.6705 li
cp
f
118.429 68.671 mo
121.41 68.671 li
121.41 71.6495 li
118.429 71.6495 li
cp
@
117.589 70.81 mo
120.568 70.81 li
120.568 67.8315 li
117.589 67.8315 li
cp
f
117.589 67.831 mo
120.568 67.831 li
120.568 70.8095 li
117.589 70.8095 li
cp
@
116.751 69.894 mo
119.728 69.894 li
119.728 66.9154 li
116.751 66.9154 li
cp
f
116.751 66.914 mo
119.728 66.914 li
119.728 69.8925 li
116.751 69.8925 li
cp
@
115.833 68.9 mo
118.812 68.9 li
118.812 65.9215 li
115.833 65.9215 li
cp
f
115.833 65.922 mo
118.812 65.922 li
118.812 68.9005 li
115.833 68.9005 li
cp
@
114.994 67.983 mo
117.972 67.983 li
117.972 65.0045 li
114.994 65.0045 li
cp
f
114.994 65.005 mo
117.972 65.005 li
117.972 67.9835 li
114.994 67.9835 li
cp
@
114.078 66.99 mo
117.056 66.99 li
117.056 64.0115 li
114.078 64.0115 li
cp
f
114.078 64.012 mo
117.056 64.012 li
117.056 66.9905 li
114.078 66.9905 li
cp
@
113.007 65.845 mo
115.986 65.845 li
115.986 62.8675 li
113.007 62.8675 li
cp
f
113.007 62.866 mo
115.986 62.866 li
115.986 65.8445 li
113.007 65.8445 li
cp
@
112.32 65.158 mo
115.298 65.158 li
115.298 62.1795 li
112.32 62.1795 li
cp
f
112.32 62.18 mo
115.298 62.18 li
115.298 65.158 li
112.32 65.158 li
cp
@
111.404 64.241 mo
114.382 64.241 li
114.382 61.2625 li
111.404 61.2625 li
cp
f
111.404 61.263 mo
114.382 61.263 li
114.382 64.241 li
111.404 64.241 li
cp
@
110.564 63.325 mo
113.542 63.325 li
113.542 60.3465 li
110.564 60.3465 li
cp
f
110.564 60.347 mo
113.542 60.347 li
113.542 63.325 li
110.564 63.325 li
cp
@
109.648 62.408 mo
112.626 62.408 li
112.626 59.4295 li
109.648 59.4295 li
cp
f
109.648 59.43 mo
112.626 59.43 li
112.626 62.4085 li
109.648 62.4085 li
cp
@
108.806 61.492 mo
111.787 61.492 li
111.787 58.5135 li
108.806 58.5135 li
cp
f
108.806 58.514 mo
111.787 58.514 li
111.787 61.4925 li
108.806 61.4925 li
cp
@
107.89 60.651 mo
110.871 60.651 li
110.871 57.6725 li
107.89 57.6725 li
cp
f
107.89 57.673 mo
110.871 57.673 li
110.871 60.6511 li
107.89 60.6511 li
cp
@
106.974 59.735 mo
109.955 59.735 li
109.955 56.7564 li
106.974 56.7564 li
cp
f
106.974 56.757 mo
109.955 56.757 li
109.955 59.7355 li
106.974 59.7355 li
cp
@
106.134 58.972 mo
109.113 58.972 li
109.113 55.9935 li
106.134 55.9935 li
cp
f
106.134 55.993 mo
109.113 55.993 li
109.113 58.9715 li
106.134 58.9715 li
cp
@
105.218 58.132 mo
108.197 58.132 li
108.197 55.1535 li
105.218 55.1535 li
cp
f
105.218 55.153 mo
108.197 55.153 li
108.197 58.1315 li
105.218 58.1315 li
cp
@
104.378 57.291 mo
107.357 57.291 li
107.357 54.3125 li
104.378 54.3125 li
cp
f
104.378 54.312 mo
107.357 54.312 li
107.357 57.2905 li
104.378 57.2905 li
cp
@
103.462 56.451 mo
106.439 56.451 li
106.439 53.4725 li
103.462 53.4725 li
cp
f
103.462 53.473 mo
106.439 53.473 li
106.439 56.4516 li
103.462 56.4516 li
cp
@
102.623 55.611 mo
105.599 55.611 li
105.599 52.632 li
102.623 52.632 li
cp
f
102.623 52.633 mo
105.599 52.633 li
105.599 55.6115 li
102.623 55.6115 li
cp
@
101.706 54.848 mo
104.683 54.848 li
104.683 51.8695 li
101.706 51.8695 li
cp
f
101.706 51.869 mo
104.683 51.869 li
104.683 54.8476 li
101.706 54.8476 li
cp
@
100.865 54.084 mo
103.843 54.084 li
103.843 51.1055 li
100.865 51.1055 li
cp
f
100.865 51.105 mo
103.843 51.105 li
103.843 54.0835 li
100.865 54.0835 li
cp
@
100.025 53.396 mo
103.003 53.396 li
103.003 50.4175 li
100.025 50.4175 li
cp
f
100.025 50.418 mo
103.003 50.418 li
103.003 53.3965 li
100.025 53.3965 li
cp
@
99.185 52.633 mo
102.164 52.633 li
102.164 49.6545 li
99.185 49.6545 li
cp
f
99.185 49.654 mo
102.164 49.654 li
102.164 52.6325 li
99.185 52.6325 li
cp
@
98.345 51.945 mo
101.323 51.945 li
101.323 48.9665 li
98.345 48.9665 li
cp
f
98.345 48.967 mo
101.323 48.967 li
101.323 51.9455 li
98.345 51.9455 li
cp
@
97.428 51.182 mo
100.406 51.182 li
100.406 48.2035 li
97.428 48.2035 li
cp
f
97.428 48.203 mo
100.406 48.203 li
100.406 51.1815 li
97.428 51.1815 li
cp
@
96.512 50.418 mo
99.4905 50.418 li
99.4905 47.4395 li
96.512 47.4395 li
cp
f
96.512 47.439 mo
99.4905 47.439 li
99.4905 50.4175 li
96.512 50.4175 li
cp
@
95.595 49.73 mo
98.5735 49.73 li
98.5735 46.7515 li
95.595 46.7515 li
cp
f
95.595 46.752 mo
98.5735 46.752 li
98.5735 49.7305 li
95.595 49.7305 li
cp
@
94.756 49.12 mo
97.7345 49.12 li
97.7345 46.1415 li
94.756 46.1415 li
cp
f
94.756 46.142 mo
97.7345 46.142 li
97.7345 49.1205 li
94.756 49.1205 li
cp
@
93.838 48.433 mo
96.8165 48.433 li
96.8165 45.4545 li
93.838 45.4545 li
cp
f
93.838 45.454 mo
96.8165 45.454 li
96.8165 48.4325 li
93.838 48.4325 li
cp
@
92.998 47.745 mo
95.9766 47.745 li
95.9766 44.7665 li
92.998 44.7665 li
cp
f
92.998 44.767 mo
95.9766 44.767 li
95.9766 47.7455 li
92.998 47.7455 li
cp
@
92.082 47.134 mo
95.061 47.134 li
95.061 44.1555 li
92.082 44.1555 li
cp
f
92.082 44.155 mo
95.061 44.155 li
95.061 47.1335 li
92.082 47.1335 li
cp
@
91.165 46.446 mo
94.1435 46.446 li
94.1435 43.4675 li
91.165 43.4675 li
cp
f
91.165 43.468 mo
94.1435 43.468 li
94.1435 46.4465 li
91.165 46.4465 li
cp
@
90.326 45.912 mo
93.3045 45.912 li
93.3045 42.9335 li
90.326 42.9335 li
cp
f
90.326 42.934 mo
93.3045 42.934 li
93.3045 45.9125 li
90.326 45.9125 li
cp
@
89.41 45.301 mo
92.3885 45.301 li
92.3885 42.3225 li
89.41 42.3225 li
cp
f
89.41 42.322 mo
92.3885 42.322 li
92.3885 45.3005 li
89.41 45.3005 li
cp
@
88.569 44.69 mo
91.5476 44.69 li
91.5476 41.7115 li
88.569 41.7115 li
cp
f
88.569 41.712 mo
91.5476 41.712 li
91.5476 44.691 li
88.569 44.691 li
cp
@
87.653 44.079 mo
90.6315 44.079 li
90.6315 41.1005 li
87.653 41.1005 li
cp
f
87.653 41.101 mo
90.6315 41.101 li
90.6315 44.0795 li
87.653 44.0795 li
cp
@
86.813 43.545 mo
89.7915 43.545 li
89.7915 40.5665 li
86.813 40.5665 li
cp
f
86.813 40.566 mo
89.7915 40.566 li
89.7915 43.545 li
86.813 43.545 li
cp
@
85.896 42.857 mo
88.8745 42.857 li
88.8745 39.8785 li
85.896 39.8785 li
cp
f
85.896 39.879 mo
88.8745 39.879 li
88.8745 42.858 li
85.896 42.858 li
cp
@
85.056 42.399 mo
88.0345 42.399 li
88.0345 39.4205 li
85.056 39.4205 li
cp
f
85.056 39.421 mo
88.0345 39.421 li
88.0345 42.3995 li
85.056 42.3995 li
cp
@
84.139 41.864 mo
87.1175 41.864 li
87.1175 38.8854 li
84.139 38.8854 li
cp
f
84.139 38.886 mo
87.1175 38.886 li
87.1175 41.8645 li
84.139 41.8645 li
cp
@
83.299 41.253 mo
86.2775 41.253 li
86.2775 38.2745 li
83.299 38.2745 li
cp
f
83.299 38.274 mo
86.2775 38.274 li
86.2775 41.253 li
83.299 41.253 li
cp
@
82.46 40.795 mo
85.4385 40.795 li
85.4385 37.8165 li
82.46 37.8165 li
cp
f
82.46 37.816 mo
85.4385 37.816 li
85.4385 40.795 li
82.46 40.795 li
cp
@
81.62 40.337 mo
84.5985 40.337 li
84.5985 37.3585 li
81.62 37.3585 li
cp
f
81.62 37.358 mo
84.5985 37.358 li
84.5985 40.3365 li
81.62 40.3365 li
cp
@
80.703 39.726 mo
83.6816 39.726 li
83.6816 36.7475 li
80.703 36.7475 li
cp
f
80.703 36.747 mo
83.6816 36.747 li
83.6816 39.7255 li
80.703 39.7255 li
cp
@
79.787 39.268 mo
82.7655 39.268 li
82.7655 36.2895 li
79.787 36.2895 li
cp
f
79.787 36.289 mo
82.7655 36.289 li
82.7655 39.2675 li
79.787 39.2675 li
cp
@
78.947 38.733 mo
81.9245 38.733 li
81.9245 35.755 li
78.947 35.755 li
cp
f
78.947 35.755 mo
81.9245 35.755 li
81.9245 38.7335 li
78.947 38.7335 li
cp
@
78.03 38.274 mo
81.0085 38.274 li
81.0085 35.297 li
78.03 35.297 li
cp
f
78.03 35.297 mo
81.0085 35.297 li
81.0085 38.274 li
78.03 38.274 li
cp
@
77.189 37.816 mo
80.1675 37.816 li
80.1675 34.8375 li
77.189 34.8375 li
cp
f
77.189 34.838 mo
80.1675 34.838 li
80.1675 37.8165 li
77.189 37.8165 li
cp
@
76.272 37.282 mo
79.2505 37.282 li
79.2505 34.3035 li
76.272 34.3035 li
cp
f
76.272 34.304 mo
79.2505 34.304 li
79.2505 37.2825 li
76.272 37.2825 li
cp
@
75.356 36.9 mo
78.3346 36.9 li
78.3346 33.922 li
75.356 33.922 li
cp
f
75.356 33.922 mo
78.3346 33.922 li
78.3346 36.9005 li
75.356 36.9005 li
cp
@
74.517 36.442 mo
77.496 36.442 li
77.496 33.464 li
74.517 33.464 li
cp
f
74.517 33.464 mo
77.496 33.464 li
77.496 36.4425 li
74.517 36.4425 li
cp
@
73.6 35.983 mo
76.5785 35.983 li
76.5785 33.005 li
73.6 33.005 li
cp
f
73.6 33.005 mo
76.5785 33.005 li
76.5785 35.9835 li
73.6 35.9835 li
cp
@
72.76 35.602 mo
75.7385 35.602 li
75.7385 32.6234 li
72.76 32.6234 li
cp
f
72.76 32.623 mo
75.7385 32.623 li
75.7385 35.6016 li
72.76 35.6016 li
cp
@
71.92 35.144 mo
74.899 35.144 li
74.899 32.1655 li
71.92 32.1655 li
cp
f
71.92 32.165 mo
74.899 32.165 li
74.899 35.1436 li
71.92 35.1436 li
cp
@
71.004 34.762 mo
73.982 34.762 li
73.982 31.7835 li
71.004 31.7835 li
cp
f
71.004 31.783 mo
73.982 31.783 li
73.982 34.7615 li
71.004 34.7615 li
cp
@
70.164 34.38 mo
73.1425 34.38 li
73.1425 31.4015 li
70.164 31.4015 li
cp
f
70.164 31.401 mo
73.1425 31.401 li
73.1425 34.379 li
70.164 34.379 li
cp
@
69.247 33.998 mo
72.2255 33.998 li
72.2255 31.0195 li
69.247 31.0195 li
cp
f
69.247 31.02 mo
72.2255 31.02 li
72.2255 33.9985 li
69.247 33.9985 li
cp
@
68.407 33.616 mo
71.3856 33.616 li
71.3856 30.6375 li
68.407 30.6375 li
cp
f
68.407 30.638 mo
71.3856 30.638 li
71.3856 33.6165 li
68.407 33.6165 li
cp
@
67.567 33.158 mo
70.5455 33.158 li
70.5455 30.1795 li
67.567 30.1795 li
cp
f
67.567 30.18 mo
70.5455 30.18 li
70.5455 33.1585 li
67.567 33.1585 li
cp
@
66.574 32.853 mo
69.5525 32.853 li
69.5525 29.8745 li
66.574 29.8745 li
cp
f
66.574 29.874 mo
69.5525 29.874 li
69.5525 32.8525 li
66.574 32.8525 li
cp
@
65.734 32.471 mo
68.7125 32.471 li
68.7125 29.4925 li
65.734 29.4925 li
cp
f
65.734 29.492 mo
68.7125 29.492 li
68.7125 32.4705 li
65.734 32.4705 li
cp
@
64.894 32.089 mo
67.8725 32.089 li
67.8725 29.1104 li
64.894 29.1104 li
cp
f
64.894 29.11 mo
67.8725 29.11 li
67.8725 32.0885 li
64.894 32.0885 li
cp
@
63.977 31.707 mo
66.9556 31.707 li
66.9556 28.7285 li
63.977 28.7285 li
cp
f
63.977 28.728 mo
66.9556 28.728 li
66.9556 31.7065 li
63.977 31.7065 li
cp
@
63.137 31.325 mo
66.1155 31.325 li
66.1155 28.3465 li
63.137 28.3465 li
cp
f
63.137 28.347 mo
66.1155 28.347 li
66.1155 31.3255 li
63.137 31.3255 li
cp
@
62.297 31.02 mo
65.2755 31.02 li
65.2755 28.0415 li
62.297 28.0415 li
cp
f
62.297 28.041 mo
65.2755 28.041 li
65.2755 31.0195 li
62.297 31.0195 li
cp
@
61.381 30.638 mo
64.3595 30.638 li
64.3595 27.6595 li
61.381 27.6595 li
cp
f
61.381 27.659 mo
64.3595 27.659 li
64.3595 30.6375 li
61.381 30.6375 li
cp
@
60.464 30.332 mo
63.4425 30.332 li
63.4425 27.3535 li
60.464 27.3535 li
cp
f
60.464 27.353 mo
63.4425 27.353 li
63.4425 30.3315 li
60.464 30.3315 li
cp
@
59.624 30.026 mo
62.603 30.026 li
62.603 27.0475 li
59.624 27.0475 li
cp
f
59.624 27.048 mo
62.603 27.048 li
62.603 30.0266 li
59.624 30.0266 li
cp
@
58.784 29.798 mo
61.7625 29.798 li
61.7625 26.8195 li
58.784 26.8195 li
cp
f
58.784 26.819 mo
61.7625 26.819 li
61.7625 29.7976 li
58.784 29.7976 li
cp
@
57.868 29.492 mo
60.8465 29.492 li
60.8465 26.5135 li
57.868 26.5135 li
cp
f
57.868 26.514 mo
60.8465 26.514 li
60.8465 29.4925 li
57.868 29.4925 li
cp
@
56.951 29.187 mo
59.9295 29.187 li
59.9295 26.2085 li
56.951 26.2085 li
cp
f
56.951 26.208 mo
59.9295 26.208 li
59.9295 29.1865 li
56.951 29.1865 li
cp
@
56.035 28.881 mo
59.0135 28.881 li
59.0135 25.9025 li
56.035 25.9025 li
cp
f
56.035 25.902 mo
59.0135 25.902 li
59.0135 28.8806 li
56.035 28.8806 li
cp
@
55.195 28.652 mo
58.1735 28.652 li
58.1735 25.6735 li
55.195 25.6735 li
cp
f
55.195 25.674 mo
58.1735 25.674 li
58.1735 28.6525 li
55.195 28.6525 li
cp
@
54.278 28.499 mo
57.2565 28.499 li
57.2565 25.5205 li
54.278 25.5205 li
cp
f
54.278 25.52 mo
57.2565 25.52 li
57.2565 28.4985 li
54.278 28.4985 li
cp
@
53.515 28.041 mo
56.4936 28.041 li
56.4936 25.0625 li
53.515 25.0625 li
cp
f
53.515 25.062 mo
56.4936 25.062 li
56.4936 28.0405 li
53.515 28.0405 li
cp
@
52.674 27.812 mo
55.6525 27.812 li
55.6525 24.8345 li
52.674 24.8345 li
cp
f
52.674 24.834 mo
55.6525 24.834 li
55.6525 27.8115 li
52.674 27.8115 li
cp
@
51.605 27.889 mo
54.5835 27.889 li
54.5835 24.9104 li
51.605 24.9104 li
cp
f
51.605 24.91 mo
54.5835 24.91 li
54.5835 27.8885 li
51.605 27.8885 li
cp
@
50.688 27.43 mo
53.6665 27.43 li
53.6665 24.4515 li
50.688 24.4515 li
cp
f
50.688 24.451 mo
53.6665 24.451 li
53.6665 27.4295 li
50.688 27.4295 li
cp
@
49.925 27.277 mo
52.9035 27.277 li
52.9035 24.2985 li
49.925 24.2985 li
cp
f
49.925 24.299 mo
52.9035 24.299 li
52.9035 27.2775 li
49.925 27.2775 li
cp
@
49.161 26.972 mo
52.1396 26.972 li
52.1396 23.9935 li
49.161 23.9935 li
cp
f
49.161 23.993 mo
52.1396 23.993 li
52.1396 26.9715 li
49.161 26.9715 li
cp
@
48.245 26.819 mo
51.2235 26.819 li
51.2235 23.8405 li
48.245 23.8405 li
cp
f
48.245 23.841 mo
51.2235 23.841 li
51.2235 26.8195 li
48.245 26.8195 li
cp
@
47.252 26.895 mo
50.23 26.895 li
50.23 23.9165 li
47.252 23.9165 li
cp
f
47.252 23.917 mo
50.23 23.917 li
50.23 26.8955 li
47.252 26.8955 li
cp
@
46.412 26.514 mo
49.3905 26.514 li
49.3905 23.5354 li
46.412 23.5354 li
cp
f
46.412 23.535 mo
49.3905 23.535 li
49.3905 26.5135 li
46.412 26.5135 li
cp
@
45.572 26.132 mo
48.5505 26.132 li
48.5505 23.1535 li
45.572 23.1535 li
cp
f
45.572 23.153 mo
48.5505 23.153 li
48.5505 26.1315 li
45.572 26.1315 li
cp
@
44.579 26.132 mo
47.5575 26.132 li
47.5575 23.1535 li
44.579 23.1535 li
cp
f
44.579 23.153 mo
47.5575 23.153 li
47.5575 26.1315 li
44.579 26.1315 li
cp
@
43.587 25.979 mo
46.5655 25.979 li
46.5655 23.0005 li
43.587 23.0005 li
cp
f
43.587 23.001 mo
46.5655 23.001 li
46.5655 25.9795 li
43.587 25.9795 li
cp
@
42.899 25.75 mo
45.8775 25.75 li
45.8775 22.7715 li
42.899 22.7715 li
cp
f
42.899 22.771 mo
45.8775 22.771 li
45.8775 25.7495 li
42.899 25.7495 li
cp
@
41.983 25.598 mo
44.9615 25.598 li
44.9615 22.6195 li
41.983 22.6195 li
cp
f
41.983 22.619 mo
44.9615 22.619 li
44.9615 25.5976 li
41.983 25.5976 li
cp
@
41.143 25.444 mo
44.121 25.444 li
44.121 22.4655 li
41.143 22.4655 li
cp
f
41.143 22.466 mo
44.121 22.466 li
44.121 25.4445 li
41.143 25.4445 li
cp
@
40.226 25.216 mo
43.2045 25.216 li
43.2045 22.237 li
40.226 22.237 li
cp
f
40.226 22.237 mo
43.2045 22.237 li
43.2045 25.2155 li
40.226 25.2155 li
cp
@
39.386 25.139 mo
42.3646 25.139 li
42.3646 22.1604 li
39.386 22.1604 li
cp
f
39.386 22.16 mo
42.3646 22.16 li
42.3646 25.1385 li
39.386 25.1385 li
cp
@
38.546 24.986 mo
41.5245 24.986 li
41.5245 22.007 li
38.546 22.007 li
cp
f
38.546 22.008 mo
41.5245 22.008 li
41.5245 24.9865 li
38.546 24.9865 li
cp
@
37.63 24.834 mo
40.6085 24.834 li
40.6085 21.8555 li
37.63 21.8555 li
cp
f
37.63 21.855 mo
40.6085 21.855 li
40.6085 24.8335 li
37.63 24.8335 li
cp
@
36.789 24.757 mo
39.7675 24.757 li
39.7675 21.7785 li
36.789 21.7785 li
cp
f
36.789 21.778 mo
39.7675 21.778 li
39.7675 24.7565 li
36.789 24.7565 li
cp
@
35.873 24.681 mo
38.8515 24.681 li
38.8515 21.7024 li
35.873 21.7024 li
cp
f
35.873 21.702 mo
38.8515 21.702 li
38.8515 24.6806 li
35.873 24.6806 li
cp
@
35.033 24.681 mo
38.0115 24.681 li
38.0115 21.7024 li
35.033 21.7024 li
cp
f
35.033 21.702 mo
38.0115 21.702 li
38.0115 24.6806 li
35.033 24.6806 li
cp
@
34.193 24.681 mo
37.1715 24.681 li
37.1715 21.7024 li
34.193 21.7024 li
cp
f
34.193 21.702 mo
37.1715 21.702 li
37.1715 24.6806 li
34.193 24.6806 li
cp
@
33.276 24.528 mo
36.2545 24.528 li
36.2545 21.549 li
33.276 21.549 li
cp
f
33.276 21.55 mo
36.2545 21.55 li
36.2545 24.5285 li
33.276 24.5285 li
cp
@
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
32.589 24.528 mo
35.5675 24.528 li
35.5675 21.549 li
32.589 21.549 li
cp
f
32.589 21.55 mo
35.5675 21.55 li
35.5675 24.5285 li
32.589 24.5285 li
cp
@
grestore
175.328 15.058 mo
175.173 15.135 li
174.945 15.135 li
174.945 15.211 li
174.716 15.211 li
174.64 15.287 li
174.486 15.287 li
174.486 15.364 li
174.257 15.364 li
174.257 15.44 li
174.029 15.44 li
174.029 15.517 li
173.8 15.517 li
173.8 15.593 li
173.646 15.593 li
173.646 15.669 li
173.496 15.669 li
173.496 15.745 li
173.341 15.745 li
173.341 15.822 li
173.189 15.822 li
173.189 15.899 li
173.113 15.899 li
173.037 15.975 li
172.96 15.975 li
172.96 16.051 li
172.882 16.051 li
172.806 16.127 li
172.73 16.127 li
172.73 16.204 li
172.578 16.204 li
172.578 16.281 li
172.501 16.281 li
172.501 16.357 li
172.425 16.357 li
172.349 16.433 li
172.273 16.433 li
172.273 16.509 li
172.195 16.509 li
172.121 16.585 li
172.044 16.662 li
171.966 16.662 li
171.966 16.739 li
171.89 16.739 li
171.89 16.815 li
171.814 16.815 li
171.814 16.891 li
171.738 16.891 li
171.738 16.967 li
171.662 16.967 li
171.662 17.044 li
171.585 17.044 li
171.509 17.12 li
171.431 17.197 li
171.431 17.273 li
171.355 17.273 li
171.279 17.349 li
171.205 17.426 li
171.128 17.426 li
171.128 17.502 li
171.05 17.579 li
170.974 17.655 li
170.898 17.655 li
170.898 17.731 li
170.822 17.731 li
170.822 17.808 li
170.746 17.884 li
170.669 17.884 li
170.669 17.96 li
170.591 17.96 li
170.591 18.037 li
170.515 18.037 li
170.515 18.113 li
170.439 18.113 li
170.439 18.19 li
170.363 18.19 li
170.363 18.266 li
170.287 18.266 li
170.287 18.342 li
170.21 18.342 li
170.21 18.418 li
170.134 18.418 li
170.134 18.495 li
170.058 18.495 li
170.058 18.572 li
169.98 18.572 li
169.98 18.648 li
169.904 18.648 li
169.904 18.724 li
169.83 18.8 li
169.753 18.8 li
169.753 18.877 li
169.675 18.954 li
169.675 19.03 li
169.599 19.03 li
169.523 19.106 li
169.523 19.182 li
169.447 19.182 li
169.447 19.259 li
169.371 19.259 li
169.371 19.335 li
169.294 19.335 li
169.294 19.412 li
169.216 19.488 li
169.14 19.564 li
169.14 19.641 li
169.064 19.641 li
169.064 19.717 li
168.914 19.87 li
168.914 19.946 li
168.835 19.946 li
168.835 20.023 li
168.759 20.023 li
168.759 20.099 li
168.683 20.175 li
168.607 20.251 li
168.607 20.328 li
168.529 20.328 li
168.529 20.405 li
168.455 20.405 li
168.455 20.481 li
168.378 20.557 li
168.3 20.633 li
168.3 20.709 li
168.224 20.709 li
168.224 20.787 li
168.148 20.787 li
168.148 20.863 li
167.996 21.015 li
167.996 21.091 li
167.919 21.091 li
167.919 21.168 li
167.843 21.168 li
167.843 21.321 li
167.765 21.321 li
167.765 21.397 li
167.689 21.397 li
167.689 21.473 li
167.613 21.55 li
167.539 21.626 li
167.539 21.703 li
167.462 21.703 li
167.462 21.779 li
167.384 21.856 li
167.384 21.932 li
167.308 21.932 li
167.308 22.008 li
167.232 22.084 li
167.232 22.161 li
167.156 22.161 li
167.156 22.238 li
167.08 22.238 li
167.08 22.314 li
167.003 22.39 li
167.003 22.466 li
166.925 22.542 li
166.849 22.62 li
166.849 22.696 li
166.773 22.696 li
166.773 22.772 li
166.697 22.848 li
166.697 22.924 li
166.621 22.924 li
166.621 23.001 li
166.544 23.078 li
166.544 23.154 li
166.468 23.23 li
166.468 23.306 li
166.392 23.306 li
166.392 23.383 li
166.314 23.459 li
166.314 23.536 li
166.238 23.536 li
166.238 23.688 li
166.164 23.688 li
166.164 23.765 li
166.087 23.841 li
166.087 23.917 li
166.009 23.917 li
166.009 24.07 li
165.933 24.07 li
165.933 24.147 li
165.857 24.223 li
165.857 24.299 li
165.781 24.375 li
165.781 24.452 li
165.705 24.529 li
165.628 24.605 li
165.628 24.681 li
165.55 24.757 li
165.55 24.834 li
165.474 24.911 li
165.398 24.987 li
165.398 25.063 li
165.322 25.139 li
165.322 25.216 li
165.248 25.216 li
165.248 25.369 li
165.169 25.369 li
165.169 25.445 li
165.093 25.521 li
165.093 25.598 li
165.017 25.598 li
165.017 25.674 li
164.941 25.75 li
164.941 25.827 li
164.865 25.903 li
164.789 25.98 li
164.789 26.056 li
164.712 26.132 li
164.634 26.208 li
164.634 26.285 li
164.558 26.285 li
164.558 26.362 li
164.482 26.438 li
164.482 26.514 li
164.406 26.514 li
164.406 26.59 li
164.33 26.59 li
164.33 26.666 li
163.947 27.022 164.402 26.699 164.023 27.048 cv
164.023 27.125 li
163.947 27.125 li
163.947 27.202 li
163.873 27.202 li
163.873 27.278 li
163.796 27.354 li
163.718 27.43 li
163.718 27.507 li
163.642 27.507 li
163.642 27.583 li
163.566 27.583 li
163.566 27.66 li
163.49 27.736 li
163.414 27.736 li
163.414 27.812 li
163.337 27.889 li
163.259 27.965 li
163.259 28.041 li
163.183 28.041 li
163.183 28.118 li
163.107 28.118 li
163.107 28.194 li
163.031 28.271 li
163.031 28.347 li
162.957 28.347 li
162.957 28.423 li
162.878 28.423 li
162.878 28.499 li
162.802 28.577 li
162.802 28.653 li
162.726 28.653 li
162.726 28.729 li
162.65 28.729 li
162.65 28.805 li
162.574 28.881 li
162.574 28.958 li
162.498 28.958 li
162.498 29.035 li
162.421 29.035 li
162.421 29.111 li
162.343 29.187 li
162.343 29.263 li
162.267 29.263 li
162.267 29.34 li
162.191 29.34 li
162.191 29.416 li
162.115 29.493 li
162.115 29.569 li
162.039 29.569 li
162.039 29.645 li
161.962 29.722 li
161.886 29.798 li
161.886 29.874 li
161.81 29.874 li
161.81 29.951 li
161.732 30.027 li
161.658 30.104 li
161.658 30.18 li
161.582 30.18 li
161.582 30.256 li
161.505 30.332 li
161.427 30.409 li
161.427 30.486 li
161.351 30.486 li
161.351 30.562 li
161.199 30.714 li
161.199 30.79 li
161.123 30.79 li
161.123 30.868 li
160.968 31.02 li
160.968 31.096 li
160.892 31.096 li
160.892 31.172 li
160.816 31.249 li
160.816 31.326 li
160.742 31.326 li
160.742 31.402 li
160.664 31.402 li
160.664 31.478 li
160.587 31.555 li
160.587 31.631 li
160.511 31.631 li
160.511 31.707 li
160.435 31.784 li
160.359 31.86 li
160.359 31.937 li
160.281 32.013 li
160.207 32.089 li
160.207 32.165 li
160.13 32.242 li
160.13 32.319 li
160.052 32.319 li
160.052 32.471 li
159.976 32.471 li
159.976 32.547 li
159.9 32.547 li
159.9 32.701 li
159.824 32.701 li
159.824 32.777 li
159.748 32.853 li
159.748 32.929 li
159.671 33.005 li
159.671 33.082 li
159.595 33.082 li
159.595 33.235 li
159.517 33.235 li
159.517 33.311 li
159.441 33.387 li
159.441 33.464 li
159.367 33.54 li
159.367 33.617 li
159.291 33.617 li
159.291 33.769 li
159.214 33.846 li
159.136 33.922 li
159.136 34.075 li
159.06 34.075 li
159.06 34.151 li
158.919 34.31 158.896 34.529 158.755 34.686 cv
158.755 34.762 li
158.677 34.762 li
158.677 34.915 li
158.601 34.992 li
158.601 35.068 li
158.525 35.144 li
158.525 35.22 li
158.451 35.297 li
158.451 35.373 li
158.373 35.45 li
158.373 35.602 li
158.296 35.602 li
158.296 35.679 li
158.22 35.755 li
158.22 35.908 li
158.144 35.908 li
158.144 36.061 li
158.066 36.137 li
158.066 36.213 li
157.992 36.213 li
157.992 36.289 li
157.964 36.485 157.789 36.631 157.761 36.825 cv
157.761 36.901 li
157.685 36.901 li
157.685 36.977 li
157.658 37.171 157.484 37.317 157.457 37.511 cv
157.457 37.588 li
157.38 37.588 li
157.38 37.741 li
157.302 37.817 li
157.302 37.893 li
157.226 37.97 li
157.226 38.046 li
157.15 38.122 li
157.15 38.275 li
157.076 38.352 li
157 38.428 li
157 38.58 li
156.921 38.658 li
156.921 38.734 li
156.845 38.81 li
156.845 38.886 li
156.769 38.962 li
156.769 39.116 li
156.693 39.192 li
156.693 39.268 li
156.617 39.344 li
156.617 39.421 li
156.541 39.497 li
156.541 39.65 li
156.464 39.65 li
156.464 39.726 li
156.386 39.803 li
156.386 39.955 li
156.31 40.032 li
156.31 40.108 li
156.234 40.185 li
156.234 40.261 li
156.158 40.337 li
156.158 40.413 li
156.082 40.49 li
156.082 40.643 li
156.005 40.719 li
156.005 40.871 li
155.929 40.949 li
155.851 41.025 li
155.851 41.177 li
155.775 41.253 li
155.775 41.407 li
155.701 41.483 li
155.701 41.559 li
155.625 41.636 li
155.625 41.788 li
155.546 41.865 li
155.546 42.018 li
155.47 42.094 li
155.47 42.17 li
155.394 42.17 li
155.394 42.323 li
155.318 42.4 li
155.318 42.476 li
155.242 42.552 li
155.242 42.704 li
155.166 42.782 li
155.166 42.934 li
155.089 43.01 li
155.089 43.086 li
155.011 43.163 li
155.011 43.316 li
154.935 43.392 li
154.935 43.545 li
154.78 43.67 154.795 44.016 154.63 44.156 cv
154.63 44.309 li
154.554 44.385 li
154.554 44.461 li
154.478 44.537 li
154.478 44.691 li
154.402 44.767 li
154.402 44.843 li
154.326 44.919 li
154.326 45.073 li
154.25 45.149 li
154.25 45.301 li
154.171 45.377 li
154.171 45.454 li
154.095 45.531 li
154.095 45.683 li
154.019 45.759 li
154.019 45.912 li
153.943 45.989 li
153.943 46.065 li
153.867 46.142 li
153.867 46.294 li
153.791 46.37 li
153.791 46.524 li
153.714 46.6 li
153.714 46.676 li
153.638 46.752 li
153.638 46.906 li
153.56 46.982 li
153.56 47.134 li
153.484 47.21 li
153.484 47.287 li
153.41 47.364 li
153.41 47.516 li
153.333 47.592 li
153.333 47.822 li
153.255 47.898 li
153.255 48.051 li
153.179 48.127 li
153.179 48.204 li
153.103 48.28 li
153.103 48.433 li
153.027 48.509 li
153.027 48.662 li
152.951 48.739 li
152.951 48.891 li
152.875 48.967 li
152.875 49.12 li
152.796 49.197 li
152.796 49.349 li
152.72 49.502 li
152.72 49.579 li
152.644 49.655 li
152.644 49.807 li
152.568 49.884 li
152.568 50.113 li
152.494 50.189 li
152.494 50.266 li
152.416 50.342 li
152.416 50.571 li
152.339 50.648 li
152.339 50.876 li
152.263 50.954 li
152.263 51.03 li
152.187 51.106 li
152.187 51.335 li
152.111 51.412 li
152.111 51.564 li
152.035 51.64 li
152.052 52.02 152.015 51.759 151.88 52.175 cv
151.88 52.328 li
151.804 52.481 li
151.804 52.557 li
151.728 52.709 li
151.728 52.863 li
151.652 53.015 li
151.652 53.245 li
151.576 53.321 li
151.576 53.397 li
151.5 53.549 li
151.5 53.779 li
151.423 53.855 li
151.423 54.084 li
151.347 54.237 li
151.347 54.313 li
151.269 54.466 li
151.296 55.038 151.167 54.43 151.193 55 cv
151.119 55.154 li
151.119 55.23 li
151.042 55.382 li
151.042 55.612 li
150.964 55.688 li
150.964 55.84 li
150.888 55.994 li
150.888 56.223 li
150.812 56.299 li
150.812 56.528 li
150.736 56.681 li
150.736 56.833 li
150.66 56.91 li
150.66 57.139 li
150.583 57.291 li
150.583 57.521 li
150.33 58.167 150.269 58.869 150.048 59.506 cv
150.048 59.66 li
149.972 59.736 li
150 60.466 149.869 59.693 149.896 60.423 cv
149.818 60.499 li
149.818 60.652 li
149.744 60.805 li
149.744 61.034 li
149.667 61.187 li
149.667 61.415 li
149.589 61.569 li
149.589 61.645 li
149.513 61.797 li
149.513 62.027 li
149.437 62.18 li
149.437 62.409 li
149.361 62.562 li
149.361 62.714 li
149.285 62.867 li
149.285 63.096 li
149.185 63.374 149.105 63.431 149.132 63.707 cv
149.054 63.86 li
149.054 64.089 li
148.978 64.242 li
148.978 64.318 li
148.902 64.471 li
148.902 64.7 li
148.828 64.853 li
148.828 65.081 li
148.751 65.235 li
148.726 65.485 148.608 65.731 148.597 65.998 cv
148.521 66.075 li
148.521 66.304 li
148.421 66.581 148.341 66.639 148.369 66.914 cv
148.292 67.068 li
148.292 67.144 li
148.214 67.296 li
148.214 67.526 li
148.138 67.602 li
148.138 67.831 li
148.062 67.984 li
148.062 68.06 li
147.986 68.213 li
148.009 68.565 147.878 68.313 147.91 68.747 cv
147.833 68.824 li
147.833 68.901 li
147.757 69.053 li
147.757 69.283 li
147.681 69.359 li
147.681 69.587 li
147.603 69.664 li
147.603 69.741 li
147.527 69.894 li
147.527 70.046 li
147.453 70.122 li
147.453 70.275 li
147.376 70.352 li
147.376 70.504 li
147.298 70.657 li
147.298 70.81 li
147.222 70.886 li
147.222 70.962 li
147.146 71.038 li
147.146 71.269 li
147.07 71.344 li
147.07 71.496 li
146.994 71.574 li
146.994 71.65 li
146.917 71.727 li
146.917 71.878 li
146.839 72.032 li
146.839 72.108 li
146.763 72.185 li
146.763 72.337 li
146.687 72.337 li
146.687 72.413 li
146.611 72.49 li
146.611 72.644 li
146.537 72.719 li
146.537 72.795 li
146.458 72.871 li
146.458 73.025 li
146.382 73.025 li
146.382 73.177 li
146.306 73.253 li
146.306 73.329 li
146.23 73.329 li
146.23 73.483 li
146.152 73.56 li
146.152 73.635 li
146.078 73.711 li
146.001 73.788 li
146.001 73.865 li
145.923 73.941 li
145.923 74.017 li
145.771 74.17 li
145.771 74.246 li
145.695 74.246 li
145.695 74.323 li
145.619 74.323 li
145.619 74.399 li
145.542 74.476 li
145.542 74.552 li
145.466 74.552 li
145.466 74.628 li
145.388 74.628 li
145.388 74.704 li
145.312 74.781 li
145.236 74.858 li
145.162 74.934 li
145.085 75.01 li
145.007 75.01 li
145.007 75.086 li
144.931 75.086 li
144.931 75.162 li
144.855 75.162 li
144.779 75.24 li
144.703 75.24 li
144.703 75.316 li
144.626 75.316 li
144.548 75.393 li
144.396 75.393 li
144.396 75.468 li
143.787 75.468 li
143.71 75.393 li
143.556 75.393 li
143.556 75.316 li
143.404 75.316 li
143.404 75.24 li
143.251 75.24 li
143.251 75.162 li
143.175 75.162 li
143.175 75.086 li
143.097 75.086 li
143.021 75.01 li
142.945 75.01 li
142.945 74.934 li
142.871 74.934 li
142.871 74.858 li
142.794 74.858 li
142.716 74.781 li
142.64 74.704 li
142.564 74.628 li
142.488 74.628 li
142.488 74.552 li
142.412 74.552 li
142.412 74.476 li
142.335 74.476 li
142.335 74.399 li
142.257 74.399 li
142.257 74.323 li
142.181 74.323 li
142.105 74.246 li
142.029 74.17 li
141.953 74.093 li
141.876 74.093 li
141.876 74.017 li
141.8 74.017 li
141.8 73.941 li
141.724 73.941 li
141.648 73.865 li
141.57 73.788 li
141.496 73.788 li
141.496 73.711 li
141.419 73.635 li
141.341 73.635 li
141.341 73.56 li
141.189 73.407 li
141.189 73.329 li
141.113 73.329 li
141.113 73.253 li
140.871 73.039 140.844 72.726 140.654 72.49 cv
140.654 72.337 li
140.58 72.337 li
140.58 72.26 li
140.501 72.185 li
140.501 72.032 li
140.425 71.955 li
140.425 71.878 li
140.349 71.802 li
140.349 71.65 li
140.273 71.574 li
140.273 71.496 li
140.197 71.42 li
140.197 71.269 li
140.121 71.192 li
140.094 70.974 140.028 70.753 139.89 70.58 cv
139.89 70.428 li
139.814 70.352 li
139.814 70.275 li
139.738 70.199 li
139.738 69.969 li
139.662 69.894 li
139.662 69.817 li
139.585 69.741 li
139.585 69.587 li
139.509 69.511 li
139.509 69.435 li
139.433 69.283 li
139.433 69.129 li
139.355 69.053 li
139.355 68.977 li
139.279 68.901 li
139.279 68.747 li
139.205 68.671 li
139.205 68.595 li
139.128 68.519 li
139.128 68.289 li
139.05 68.213 li
139.05 68.136 li
138.974 68.06 li
138.974 67.908 li
138.898 67.831 li
138.898 67.754 li
138.822 67.678 li
138.822 67.526 li
138.746 67.45 li
138.746 67.372 li
138.669 67.296 li
138.669 67.144 li
138.591 67.068 li
138.591 66.991 li
138.515 66.914 li
138.515 66.762 li
138.439 66.686 li
138.439 66.533 li
138.363 66.456 li
138.363 66.38 li
138.287 66.304 li
138.258 66.088 138.198 65.864 138.058 65.693 cv
138.058 65.54 li
137.982 65.463 li
137.982 65.387 li
137.904 65.311 li
137.904 65.159 li
137.83 65.081 li
137.83 65.005 li
137.753 64.929 li
137.753 64.853 li
137.675 64.777 li
137.675 64.623 li
137.599 64.547 li
137.599 64.394 li
137.523 64.394 li
137.523 64.318 li
137.447 64.242 li
137.447 64.089 li
137.371 64.089 li
137.371 63.936 li
137.294 63.86 li
137.218 63.784 li
137.218 63.707 li
137.14 63.63 li
137.14 63.554 li
137.064 63.554 li
137.064 63.478 li
136.914 63.326 li
136.914 63.248 li
136.837 63.248 li
136.837 63.172 li
136.759 63.172 li
136.759 63.096 li
136.683 63.096 li
136.607 63.019 li
136.455 63.019 li
136.455 62.944 li
136.3 62.944 li
136.224 63.019 li
136.072 63.019 li
136.072 63.096 li
135.996 63.096 li
135.919 63.172 li
135.919 63.248 li
135.843 63.248 li
135.767 63.326 li
135.767 63.402 li
135.689 63.402 li
135.689 63.478 li
135.613 63.554 li
135.613 63.63 li
135.539 63.707 li
135.539 63.784 li
135.462 63.784 li
135.462 63.936 li
135.384 63.936 li
135.384 64.089 li
135.308 64.165 li
135.308 64.242 li
135.232 64.318 li
135.232 64.471 li
135.156 64.547 li
135.156 64.623 li
135.08 64.7 li
135.08 64.853 li
135.003 64.929 li
135.003 65.081 li
134.925 65.159 li
134.849 65.235 li
134.849 65.387 li
134.773 65.463 li
134.773 65.617 li
134.697 65.693 li
134.709 65.992 134.249 66.736 134.24 66.991 cv
134.164 67.068 li
134.164 67.22 li
134.087 67.296 li
134.087 67.372 li
134.009 67.45 li
134.009 67.602 li
133.933 67.678 li
133.933 67.831 li
133.857 67.908 li
133.857 67.984 li
133.781 68.06 li
133.781 68.213 li
133.705 68.289 li
133.705 68.366 li
133.628 68.442 li
133.628 68.595 li
133.552 68.671 li
133.552 68.747 li
133.476 68.824 li
133.476 68.977 li
133.398 69.053 li
133.398 69.129 li
133.322 69.205 li
133.322 69.359 li
133.248 69.435 li
133.248 69.587 li
133.171 69.664 li
133.171 69.741 li
133.093 69.817 li
133.093 69.969 li
133.017 70.046 li
133.017 70.199 li
132.941 70.275 li
132.941 70.352 li
132.865 70.352 li
132.865 70.504 li
132.718 70.637 132.672 71.065 132.482 71.269 cv
132.482 71.42 li
132.408 71.42 li
132.408 71.574 li
132.332 71.65 li
132.332 71.727 li
132.253 71.802 li
132.253 71.878 li
132.177 71.955 li
132.177 72.108 li
132.101 72.185 li
132.101 72.26 li
132.025 72.26 li
132.025 72.413 li
131.876 72.601 131.716 73.067 131.566 73.253 cv
131.566 73.407 li
131.49 73.407 li
131.49 73.56 li
131.325 73.732 131.313 73.987 131.183 74.17 cv
131.183 74.246 li
131.107 74.246 li
131.107 74.399 li
131.031 74.476 li
131.031 74.552 li
130.957 74.628 li
130.957 74.704 li
130.88 74.781 li
130.88 74.934 li
130.802 75.01 li
130.802 75.086 li
130.726 75.162 li
130.726 75.316 li
130.65 75.393 li
130.65 75.468 li
130.574 75.544 li
130.574 75.621 li
130.498 75.698 li
130.498 75.851 li
130.421 75.926 li
130.421 76.079 li
130.343 76.156 li
130.343 76.232 li
130.267 76.308 li
130.267 76.537 li
130.191 76.614 li
130.191 76.69 li
130.117 76.768 li
130.117 76.919 li
130.039 76.995 li
130.039 77.072 li
129.962 77.149 li
129.962 77.377 li
129.886 77.454 li
129.886 77.531 li
129.81 77.607 li
129.81 77.835 li
129.734 77.912 li
129.734 77.989 li
129.656 78.065 li
129.656 78.294 li
129.582 78.37 li
129.582 78.447 li
129.505 78.601 li
129.505 78.752 li
129.427 78.829 li
129.427 78.982 li
129.351 79.059 li
129.351 79.287 li
129.275 79.364 li
129.275 79.516 li
129.199 79.592 li
129.199 79.822 li
129.123 79.898 li
129.123 79.975 li
129.046 80.127 li
129.046 80.356 li
128.97 80.432 li
128.97 80.585 li
128.892 80.662 li
128.892 80.892 li
128.816 80.967 li
128.816 81.196 li
128.742 81.35 li
128.742 81.425 li
128.666 81.578 li
128.666 81.807 li
128.589 81.883 li
128.589 82.113 li
128.511 82.266 li
128.511 82.342 li
128.435 82.495 li
128.435 82.725 li
128.359 82.8 li
128.359 82.953 li
128.283 83.029 li
128.283 83.258 li
128.207 83.411 li
128.207 83.64 li
128.13 83.716 li
128.13 83.87 li
128.052 83.946 li
128.052 84.174 li
127.976 84.328 li
127.976 84.557 li
127.9 84.633 li
127.9 84.786 li
127.824 84.862 li
127.824 85.091 li
127.748 85.167 li
127.748 85.397 li
127.671 85.473 li
127.671 85.625 li
127.595 85.703 li
127.595 85.931 li
127.519 86.007 li
127.519 86.084 li
127.441 86.237 li
127.441 86.389 li
127.367 86.542 li
127.367 86.619 li
127.291 86.695 li
127.291 86.924 li
127.214 87 li
127.214 87.077 li
127.136 87.153 li
127.136 87.306 li
127.06 87.458 li
127.06 87.535 li
126.984 87.612 li
126.984 87.764 li
126.908 87.84 li
126.908 87.916 li
126.832 87.994 li
126.832 88.146 li
126.755 88.222 li
126.755 88.299 li
126.677 88.375 li
126.677 88.528 li
126.601 88.604 li
126.601 88.681 li
126.525 88.757 li
126.525 88.91 li
126.451 88.986 li
126.451 89.063 li
126.375 89.139 li
126.375 89.215 li
126.296 89.291 li
126.296 89.368 li
126.22 89.445 li
126.22 89.597 li
126.144 89.597 li
126.144 89.749 li
126.068 89.827 li
125.992 89.903 li
125.992 90.055 li
125.916 90.055 li
125.916 90.208 li
125.839 90.285 li
125.761 90.361 li
125.761 90.437 li
125.685 90.513 li
125.685 90.59 li
125.609 90.666 li
125.533 90.743 li
125.533 90.819 li
125.457 90.895 li
125.457 90.972 li
125.38 90.972 li
125.38 91.048 li
125.304 91.048 li
125.304 91.124 li
125.226 91.201 li
125.226 91.277 li
125.15 91.277 li
125.15 91.354 li
125.076 91.43 li
125 91.43 li
125 91.506 li
124.921 91.506 li
124.921 91.582 li
124.845 91.659 li
124.769 91.659 li
124.769 91.736 li
124.693 91.736 li
124.693 91.812 li
124.541 91.812 li
124.541 91.888 li
124.386 91.888 li
124.386 91.964 li
124.234 91.964 li
124.234 92.04 li
124.005 92.04 li
124.005 92.118 li
123.625 92.118 li
123.625 92.194 li
123.546 92.194 li
123.394 92.194 123.242 92.194 123.089 92.194 cv
123.013 92.194 li
123.013 92.27 li
122.63 92.27 li
122.554 92.346 li
122.326 92.346 li
122.326 92.423 li
122.095 92.423 li
122.095 92.499 li
121.943 92.499 li
121.869 92.576 li
121.714 92.576 li
121.714 92.652 li
121.562 92.652 li
121.562 92.728 li
121.333 92.728 li
121.333 92.805 li
121.179 92.805 li
121.179 92.881 li
121.027 92.881 li
120.951 92.957 li
120.875 92.957 li
120.798 93.034 li
120.644 93.034 li
120.644 93.11 li
120.494 93.11 li
120.494 93.187 li
120.339 93.187 li
120.339 93.263 li
120.187 93.263 li
120.111 93.339 li
120.035 93.339 li
119.958 93.415 li
119.804 93.415 li
119.728 93.492 li
119.576 93.492 li
119.5 93.569 li
119.271 93.569 li
119.193 93.645 li
119.042 93.645 li
118.964 93.721 li
118.736 93.721 li
118.66 93.797 li
118.429 93.797 li
118.429 93.874 li
118.203 93.874 li
118.203 93.951 li
117.896 93.951 li
117.896 94.027 li
117.82 94.027 li
117.667 94.027 117.513 94.027 117.361 94.027 cv
117.285 94.027 li
117.285 93.951 li
117.132 93.951 li
117.056 93.874 li
116.978 93.874 li
116.978 93.797 li
116.902 93.797 li
116.902 93.721 li
116.828 93.721 li
116.701 93.594 116.572 93.467 116.445 93.339 cv
116.445 93.263 li
116.369 93.263 li
116.369 93.187 li
116.292 93.11 li
116.214 93.034 li
116.138 92.957 li
116.062 92.881 li
116.062 92.805 li
115.986 92.805 li
115.986 92.728 li
115.912 92.728 li
115.912 92.652 li
115.833 92.652 li
115.833 92.576 li
115.757 92.499 li
115.681 92.423 li
115.681 92.346 li
115.605 92.346 li
115.605 92.27 li
115.529 92.27 li
115.453 92.194 li
115.376 92.194 li
115.376 92.118 li
115.298 92.04 li
115.222 92.04 li
115.222 91.964 li
115.146 91.964 li
115.146 91.888 li
114.994 91.888 li
114.994 91.812 li
114.917 91.812 li
114.841 91.736 li
114.763 91.659 li
114.687 91.659 li
114.687 91.582 li
114.611 91.582 li
114.46 91.43 li
114.382 91.43 li
114.382 91.354 li
114.306 91.354 li
114.306 91.277 li
114.23 91.277 li
114.23 91.201 li
114.154 91.201 li
114.154 91.124 li
114.078 91.048 li
114.001 90.972 li
113.923 90.895 li
113.923 90.819 li
113.847 90.819 li
113.847 90.743 li
113.771 90.743 li
113.771 90.666 li
113.695 90.666 li
113.695 90.59 li
113.619 90.59 li
113.619 90.513 li
113.542 90.437 li
113.466 90.361 li
113.466 90.285 li
113.39 90.285 li
113.39 90.208 li
113.314 90.208 li
113.314 90.131 li
113.236 90.131 li
113.236 90.055 li
113.162 90.055 li
113.162 89.979 li
113.085 89.979 li
113.085 89.903 li
113.007 89.827 li
112.931 89.749 li
112.855 89.749 li
112.855 89.673 li
112.779 89.673 li
112.779 89.597 li
112.703 89.597 li
112.703 89.521 li
112.626 89.521 li
112.55 89.445 li
112.472 89.445 li
112.472 89.368 li
112.396 89.368 li
112.32 89.291 li
112.246 89.291 li
112.169 89.215 li
112.015 89.215 li
112.015 89.139 li
111.863 89.139 li
111.863 89.063 li
111.71 89.063 li
111.632 88.986 li
111.48 88.986 li
111.48 88.91 li
111.404 88.91 li
111.328 88.833 li
111.251 88.833 li
111.251 88.757 li
111.175 88.757 li
111.175 88.681 li
111.099 88.681 li
111.099 88.604 li
111.021 88.604 li
111.021 88.528 li
110.945 88.528 li
110.945 88.452 li
110.871 88.452 li
110.871 88.375 li
110.794 88.299 li
110.716 88.222 li
110.716 88.146 li
110.64 88.07 li
110.64 87.994 li
110.564 87.994 li
110.564 87.916 li
110.488 87.916 li
110.488 87.764 li
110.412 87.764 li
110.412 87.612 li
110.335 87.612 li
110.335 87.535 li
110.257 87.535 li
110.257 87.382 li
110.181 87.382 li
110.181 87.23 li
110.105 87.23 li
110.105 87.153 li
110.029 87.077 li
110.029 87 li
109.955 86.924 li
109.955 86.848 li
109.876 86.848 li
109.876 86.695 li
109.8 86.695 li
109.8 86.619 li
109.724 86.542 li
109.724 86.466 li
109.648 86.389 li
109.572 86.313 li
109.572 86.237 li
109.496 86.161 li
109.496 86.084 li
109.419 86.084 li
109.419 86.007 li
109.341 85.931 li
109.341 85.855 li
109.265 85.855 li
109.265 85.779 li
109.189 85.703 li
109.189 85.625 li
109.113 85.625 li
109.113 85.549 li
108.96 85.397 li
108.96 85.321 li
108.884 85.321 li
108.884 85.244 li
108.806 85.244 li
108.806 85.167 li
108.73 85.091 li
108.654 85.016 li
108.654 84.939 li
108.58 84.939 li
108.58 84.862 li
108.503 84.862 li
108.503 84.786 li
108.425 84.786 li
108.425 84.709 li
108.349 84.709 li
108.349 84.633 li
108.273 84.557 li
108.197 84.557 li
108.197 84.48 li
108.121 84.404 li
108.044 84.404 li
108.044 84.328 li
107.966 84.251 li
107.89 84.174 li
107.814 84.174 li
107.814 84.098 li
107.738 84.022 li
107.662 83.946 li
107.585 83.946 li
107.585 83.87 li
107.509 83.87 li
107.509 83.792 li
107.433 83.716 li
107.357 83.716 li
107.357 83.64 li
107.279 83.64 li
107.279 83.564 li
107.205 83.564 li
107.205 83.488 li
107.128 83.488 li
107.128 83.411 li
107.05 83.411 li
107.05 83.334 li
106.974 83.334 li
106.974 83.258 li
106.898 83.258 li
106.898 83.182 li
106.822 83.182 li
106.822 83.106 li
106.746 83.029 li
106.669 82.953 li
106.593 82.876 li
106.593 82.8 li
106.515 82.8 li
106.515 82.725 li
106.439 82.725 li
106.439 82.647 li
106.363 82.571 li
106.289 82.571 li
106.289 82.495 li
106.212 82.418 li
106.212 82.342 li
106.134 82.342 li
106.134 82.266 li
106.058 82.266 li
106.058 82.189 li
105.982 82.189 li
105.982 82.113 li
105.906 82.037 li
105.83 82.037 li
105.83 81.959 li
105.753 81.883 li
105.675 81.807 li
105.599 81.807 li
105.599 81.731 li
105.523 81.731 li
105.523 81.655 li
105.447 81.655 li
105.447 81.578 li
105.371 81.578 li
105.294 81.501 li
105.218 81.425 li
105.142 81.425 li
105.142 81.35 li
105.064 81.35 li
105.064 81.273 li
104.988 81.273 li
104.914 81.196 li
104.837 81.12 li
104.759 81.12 li
104.759 81.043 li
104.683 81.043 li
104.683 80.967 li
104.607 80.967 li
104.429 80.787 104.25 80.612 104.072 80.432 cv
104.072 80.356 li
103.998 80.356 li
103.998 80.28 li
103.919 80.204 li
103.843 80.127 li
103.843 80.05 li
103.767 80.05 li
103.767 79.975 li
103.691 79.975 li
103.691 79.898 li
103.615 79.822 li
103.539 79.745 li
103.539 79.668 li
103.462 79.668 li
103.462 79.592 li
103.384 79.592 li
103.384 79.44 li
103.308 79.44 li
103.308 79.364 li
103.232 79.287 li
103.156 79.21 li
103.156 79.134 li
103.08 79.134 li
103.08 79.059 li
103.003 78.982 li
102.927 78.905 li
102.927 78.829 li
102.851 78.829 li
102.851 78.752 li
102.773 78.676 li
102.697 78.601 li
102.697 78.523 li
102.623 78.523 li
102.623 78.447 li
102.468 78.294 li
102.468 78.217 li
102.392 78.217 li
102.392 78.141 li
102.316 78.141 li
102.316 78.065 li
102.24 77.989 li
102.164 77.912 li
102.087 77.835 li
102.087 77.759 li
102.009 77.759 li
102.009 77.684 li
101.933 77.684 li
101.933 77.607 li
101.857 77.607 li
101.857 77.531 li
101.781 77.531 li
101.781 77.454 li
101.706 77.377 li
101.628 77.377 li
101.628 77.301 li
101.552 77.225 li
101.476 77.149 li
101.476 77.072 li
101.399 77.072 li
101.323 76.995 li
101.323 76.919 li
101.247 76.919 li
101.247 76.843 li
101.17 76.843 li
101.17 76.768 li
101.094 76.768 li
101.094 76.69 li
101.018 76.69 li
101.018 76.614 li
100.942 76.537 li
100.865 76.461 li
100.789 76.385 li
100.789 76.308 li
100.712 76.308 li
100.712 76.232 li
100.636 76.232 li
100.636 76.156 li
100.483 76.003 li
100.483 75.926 li
100.407 75.926 li
100.407 75.851 li
100.331 75.774 li
100.254 75.698 li
100.254 75.621 li
100.177 75.621 li
100.177 75.544 li
100.025 75.393 li
100.025 75.316 li
99.949 75.316 li
99.949 75.162 li
99.873 75.162 li
99.873 75.086 li
99.795 75.086 li
99.795 75.01 li
99.719 74.934 li
99.719 74.858 li
99.643 74.781 li
99.567 74.704 li
99.567 74.628 li
99.491 74.552 li
99.414 74.476 li
99.414 74.399 li
99.337 74.323 li
99.337 74.246 li
99.261 74.246 li
99.261 74.093 li
99.185 74.093 li
99.185 74.017 li
99.109 73.941 li
99.109 73.865 li
99.032 73.788 li
98.956 73.711 li
98.956 73.635 li
98.879 73.56 li
98.879 73.483 li
98.803 73.483 li
98.803 73.329 li
98.727 73.253 li
98.65 73.177 li
98.65 73.025 li
98.574 73.025 li
98.574 72.948 li
98.498 72.871 li
98.498 72.795 li
98.421 72.719 li
98.421 72.644 li
98.345 72.644 li
98.345 72.49 li
98.268 72.413 li
98.192 72.337 li
98.192 72.185 li
98.116 72.185 li
98.116 72.108 li
98.04 72.032 li
98.04 71.955 li
97.963 71.878 li
97.963 71.802 li
97.886 71.802 li
97.886 71.65 li
97.81 71.65 li
97.81 71.574 li
97.734 71.496 li
97.734 71.42 li
97.658 71.344 li
97.658 71.269 li
97.581 71.269 li
97.581 71.115 li
97.504 71.115 li
97.504 71.038 li
97.428 71.038 li
97.428 70.886 li
97.352 70.886 li
97.352 70.81 li
97.276 70.733 li
97.276 70.657 li
97.199 70.58 li
97.199 70.504 li
97.123 70.504 li
97.123 70.428 li
97.046 70.352 li
97.046 70.275 li
96.97 70.275 li
96.97 70.199 li
96.894 70.122 li
96.894 70.046 li
96.817 70.046 li
96.817 69.969 li
96.741 69.894 li
96.665 69.817 li
96.665 69.741 li
96.588 69.664 li
96.588 69.587 li
96.512 69.587 li
96.512 69.511 li
96.435 69.511 li
96.435 69.435 li
96.359 69.359 li
96.359 69.283 li
96.283 69.205 li
96.206 69.129 li
96.206 69.053 li
96.13 69.053 li
96.13 68.977 li
96.053 68.901 li
96.053 68.824 li
95.977 68.824 li
95.977 68.747 li
95.597 68.397 96.051 68.714 95.671 68.366 cv
95.671 68.289 li
95.595 68.289 li
95.595 68.213 li
95.519 68.136 li
95.519 68.06 li
95.443 68.06 li
95.443 67.984 li
95.29 67.831 li
95.29 67.754 li
95.213 67.678 li
95.213 67.602 li
95.137 67.602 li
95.137 67.526 li
95.06 67.526 li
95.06 67.45 li
94.985 67.372 li
94.908 67.296 li
94.908 67.22 li
94.831 67.144 li
94.831 67.068 li
94.755 67.068 li
94.755 66.991 li
94.679 66.991 li
94.679 66.914 li
94.602 66.838 li
94.602 66.762 li
94.526 66.762 li
94.526 66.686 li
94.45 66.609 li
94.45 66.533 li
94.373 66.533 li
94.373 66.456 li
94.297 66.38 li
94.22 66.304 li
94.22 66.227 li
94.144 66.227 li
94.144 66.151 li
94.068 66.151 li
94.068 66.075 li
93.992 65.998 li
93.915 65.922 li
93.915 65.845 li
93.838 65.845 li
93.838 65.769 li
93.762 65.769 li
93.762 65.693 li
93.685 65.693 li
93.685 65.617 li
93.61 65.617 li
93.61 65.54 li
93.534 65.54 li
93.534 65.463 li
93.456 65.463 li
93.456 65.387 li
93.38 65.387 li
93.38 65.311 li
93.304 65.311 li
93.304 65.235 li
93.227 65.235 li
93.152 65.159 li
93.075 65.159 li
93.075 65.081 li
92.998 65.081 li
92.998 65.005 li
92.846 65.005 li
92.846 64.929 li
92.769 64.929 li
92.769 64.853 li
92.693 64.853 li
92.617 64.777 li
92.54 64.7 li
92.464 64.7 li
92.464 64.623 li
92.388 64.623 li
92.388 64.547 li
92.31 64.547 li
92.235 64.471 li
92.159 64.394 li
92.082 64.318 li
92.006 64.318 li
92.006 64.242 li
91.929 64.165 li
91.852 64.089 li
91.777 64.012 li
91.701 63.936 li
91.701 63.86 li
91.623 63.86 li
91.623 63.784 li
91.547 63.784 li
91.547 63.707 li
91.471 63.63 li
91.394 63.63 li
91.394 63.554 li
91.319 63.478 li
91.242 63.402 li
91.242 63.326 li
91.165 63.326 li
91.089 63.248 li
91.089 63.172 li
91.013 63.172 li
91.013 63.096 li
90.936 63.096 li
90.86 63.019 li
90.784 62.944 li
90.707 62.944 li
90.707 62.867 li
90.555 62.867 li
90.555 62.79 li
90.402 62.79 li
90.402 62.714 li
90.173 62.714 li
90.173 62.639 li
89.944 62.639 li
89.944 62.562 li
89.714 62.562 li
89.714 62.485 li
89.561 62.485 li
89.486 62.409 li
89.41 62.409 li
89.41 62.332 li
89.332 62.332 li
89.332 62.256 li
89.256 62.256 li
89.256 62.18 li
89.18 62.18 li
89.103 62.103 li
89.103 62.027 li
89.028 62.027 li
89.028 61.951 li
88.951 61.874 li
88.874 61.797 li
88.874 61.721 li
88.722 61.569 li
88.722 61.493 li
88.645 61.415 li
88.645 61.339 li
88.569 61.339 li
88.569 61.263 li
88.493 61.187 li
88.493 61.111 li
88.416 61.034 li
88.416 60.957 li
88.34 60.881 li
88.264 60.805 li
88.264 60.729 li
88.186 60.652 li
88.186 60.576 li
88.111 60.576 li
88.111 60.499 li
88.035 60.499 li
88.035 60.347 li
87.958 60.347 li
87.958 60.27 li
87.881 60.27 li
87.881 60.194 li
87.728 60.041 li
87.728 59.965 li
87.653 59.965 li
87.653 59.888 li
87.577 59.888 li
87.577 59.812 li
87.499 59.812 li
87.499 59.736 li
87.423 59.66 li
87.347 59.66 li
87.347 59.583 li
87.27 59.583 li
87.27 59.506 li
87.195 59.506 li
87.195 59.43 li
87.118 59.43 li
87.118 59.354 li
87.041 59.354 li
86.889 59.202 li
86.812 59.124 li
86.736 59.124 li
86.736 59.048 li
86.66 58.972 li
86.66 58.896 li
86.584 58.896 li
86.507 58.82 li
86.507 58.743 li
86.431 58.666 li
86.431 58.59 li
86.353 58.59 li
86.353 58.514 li
86.278 58.514 li
86.278 58.361 li
86.202 58.361 li
86.202 58.285 li
86.126 58.208 li
86.126 58.132 li
86.049 58.132 li
86.049 58.055 li
85.972 57.979 li
85.972 57.903 li
85.82 57.75 li
85.82 57.673 li
85.744 57.597 li
85.744 57.521 li
85.668 57.445 li
85.668 57.369 li
85.59 57.369 li
85.59 57.291 li
85.514 57.215 li
85.514 57.139 li
85.362 56.987 li
85.362 56.91 li
85.286 56.833 li
85.209 56.757 li
85.132 56.681 li
85.132 56.605 li
85.056 56.605 li
85.056 56.528 li
84.979 56.528 li
84.979 56.452 li
84.903 56.452 li
84.827 56.375 li
84.751 56.375 li
84.751 56.299 li
84.52 56.299 li
84.52 56.223 li
84.445 56.223 li
84.318 56.223 84.189 56.223 84.062 56.223 cv
83.987 56.223 li
83.987 56.146 li
83.757 56.146 li
83.757 56.07 li
83.604 56.07 li
83.604 55.994 li
83.453 55.994 li
83.453 55.917 li
83.376 55.917 li
83.299 55.84 li
83.223 55.84 li
83.223 55.764 li
83.146 55.764 li
83.071 55.688 li
82.994 55.688 li
82.994 55.612 li
82.918 55.612 li
82.918 55.536 li
82.841 55.536 li
82.765 55.458 li
82.688 55.458 li
82.688 55.382 li
82.612 55.382 li
82.536 55.306 li
82.46 55.23 li
82.383 55.23 li
82.383 55.154 li
82.307 55.154 li
82.307 55.077 li
82.229 55.077 li
82.229 55 li
82.154 55 li
82.002 54.848 li
81.924 54.848 li
81.924 54.772 li
81.848 54.772 li
81.848 54.696 li
81.771 54.696 li
81.771 54.619 li
81.696 54.619 li
81.696 54.542 li
81.62 54.542 li
81.62 54.466 li
81.543 54.466 li
81.466 54.39 li
81.39 54.313 li
81.313 54.237 li
81.238 54.237 li
81.238 54.161 li
81.161 54.161 li
81.161 54.084 li
81.085 54.084 li
81.085 54.008 li
81.008 54.008 li
81.008 53.931 li
80.932 53.931 li
80.805 53.804 80.676 53.678 80.55 53.549 cv
80.55 53.473 li
80.474 53.473 li
80.474 53.397 li
80.396 53.397 li
80.396 53.321 li
80.321 53.245 li
80.321 53.167 li
80.245 53.167 li
80.245 53.091 li
80.169 53.091 li
80.169 53.015 li
80.092 52.939 li
80.092 52.863 li
80.015 52.863 li
80.015 52.786 li
79.863 52.633 li
79.863 52.557 li
79.787 52.481 li
79.787 52.404 li
79.711 52.404 li
79.711 52.328 li
79.633 52.251 li
79.633 52.175 li
79.557 52.099 li
79.48 52.022 li
79.48 51.946 li
79.405 51.87 li
79.405 51.793 li
79.252 51.64 li
79.252 51.564 li
79.175 51.488 li
79.099 51.412 li
79.099 51.335 li
79.022 51.335 li
79.022 51.258 li
78.947 51.182 li
78.87 51.106 li
78.87 51.03 li
78.794 51.03 li
78.794 50.954 li
78.717 50.876 li
78.641 50.876 li
78.641 50.8 li
78.564 50.8 li
78.564 50.724 li
78.488 50.724 li
78.488 50.648 li
78.412 50.648 li
78.412 50.571 li
78.259 50.571 li
78.259 50.495 li
78.182 50.495 li
78.105 50.418 li
78.03 50.418 li
78.03 50.342 li
77.878 50.342 li
77.878 50.266 li
77.724 50.266 li
77.724 50.189 li
77.572 50.189 li
77.572 50.113 li
77.419 50.113 li
77.419 50.037 li
77.342 50.037 li
77.266 49.96 li
77.189 49.96 li
77.189 49.884 li
77.037 49.884 li
77.037 49.807 li
76.961 49.807 li
76.961 49.731 li
76.884 49.731 li
76.731 49.579 li
76.731 49.502 li
76.655 49.502 li
76.503 49.349 li
76.426 49.349 li
76.426 49.273 li
76.35 49.197 li
76.272 49.12 li
76.197 49.12 li
76.197 49.043 li
76.121 49.043 li
76.121 48.967 li
76.045 48.967 li
75.968 48.891 li
75.891 48.891 li
75.891 48.815 li
75.739 48.815 li
75.739 48.739 li
75.587 48.739 li
75.587 48.662 li
75.433 48.662 li
75.356 48.585 li
75.281 48.585 li
75.205 48.509 li
75.128 48.509 li
75.051 48.433 li
74.975 48.433 li
74.975 48.356 li
74.899 48.356 li
74.771 48.229 74.643 48.102 74.517 47.974 cv
74.517 47.898 li
74.441 47.898 li
74.364 47.822 li
74.364 47.745 li
74.288 47.745 li
74.288 47.592 li
74.212 47.592 li
74.212 47.516 li
74.135 47.44 li
74.059 47.364 li
74.059 47.287 li
73.982 47.21 li
73.982 47.134 li
73.906 47.058 li
73.83 46.982 li
73.83 46.906 li
73.753 46.829 li
73.753 46.752 li
73.677 46.752 li
73.677 46.676 li
73.6 46.6 li
73.6 46.524 li
73.524 46.524 li
73.524 46.447 li
73.448 46.37 li
73.371 46.37 li
73.371 46.294 li
73.295 46.218 li
73.218 46.142 li
73.142 46.142 li
73.142 46.065 li
72.989 46.065 li
72.989 45.989 li
72.837 45.989 li
72.76 45.912 li
72.302 45.912 li
72.226 45.836 li
71.844 45.836 li
71.844 45.759 li
71.768 45.759 li
71.691 45.683 li
71.615 45.683 li
71.615 45.607 li
71.538 45.607 li
71.538 45.531 li
71.462 45.531 li
71.386 45.454 li
71.386 45.377 li
71.309 45.377 li
71.233 45.301 li
71.233 45.225 li
71.156 45.225 li
71.08 45.149 li
71.08 45.073 li
71.004 45.073 li
71.004 44.996 li
70.927 44.996 li
70.927 44.919 li
70.851 44.919 li
70.851 44.843 li
70.774 44.843 li
70.774 44.767 li
70.698 44.767 li
70.698 44.691 li
70.622 44.691 li
70.622 44.614 li
70.469 44.614 li
70.469 44.537 li
70.393 44.537 li
70.393 44.461 li
70.24 44.461 li
70.164 44.385 li
69.476 44.385 li
69.476 44.461 li
69.4 44.461 li
69.222 44.461 69.044 44.461 68.865 44.461 cv
68.789 44.461 li
68.789 44.385 li
68.56 44.385 li
68.56 44.309 li
68.407 44.309 li
68.407 44.232 li
68.331 44.232 li
68.254 44.156 li
68.178 44.079 li
68.102 44.079 li
68.102 44.003 li
68.025 44.003 li
67.949 43.927 li
67.949 43.85 li
67.873 43.85 li
67.72 43.698 li
67.72 43.621 li
67.643 43.621 li
67.567 43.545 li
67.491 43.468 li
67.491 43.392 li
67.414 43.392 li
67.338 43.316 li
67.261 43.24 li
67.261 43.163 li
67.185 43.163 li
67.185 43.086 li
67.032 43.086 li
67.032 43.01 li
66.956 43.01 li
66.956 42.934 li
66.879 42.934 li
66.879 42.858 li
66.803 42.858 li
66.727 42.782 li
66.65 42.704 li
66.574 42.704 li
66.574 42.628 li
66.498 42.628 li
66.421 42.552 li
66.345 42.552 li
66.345 42.476 li
66.269 42.476 li
66.192 42.4 li
66.116 42.4 li
66.116 42.323 li
65.963 42.323 li
65.963 42.246 li
65.887 42.246 li
65.81 42.17 li
65.734 42.094 li
65.658 42.094 li
65.658 42.018 li
65.581 42.018 li
65.581 41.941 li
65.505 41.941 li
65.505 41.865 li
65.429 41.865 li
65.429 41.788 li
65.352 41.788 li
65.352 41.712 li
65.276 41.712 li
65.276 41.636 li
65.199 41.636 li
65.199 41.559 li
65.123 41.559 li
65.123 41.483 li
65.047 41.407 li
64.97 41.33 li
64.894 41.253 li
64.894 41.177 li
64.817 41.177 li
64.817 41.101 li
64.741 41.101 li
64.741 41.025 li
64.665 40.949 li
64.665 40.871 li
64.588 40.871 li
64.588 40.795 li
64.512 40.719 li
64.435 40.643 li
64.435 40.567 li
64.359 40.567 li
64.359 40.49 li
64.283 40.413 li
64.206 40.337 li
64.206 40.261 li
64.13 40.261 li
64.13 40.185 li
64.054 40.108 li
63.977 40.032 li
63.977 39.955 li
63.901 39.955 li
63.901 39.879 li
63.825 39.803 li
63.825 39.726 li
63.748 39.726 li
63.748 39.65 li
63.672 39.574 li
63.672 39.497 li
63.596 39.497 li
63.596 39.421 li
63.519 39.344 li
63.519 39.268 li
63.443 39.268 li
63.443 39.192 li
63.367 39.192 li
63.367 39.116 li
63.29 39.039 li
63.214 38.962 li
63.214 38.886 li
63.137 38.886 li
63.137 38.81 li
63.06 38.81 li
63.06 38.734 li
62.985 38.658 li
62.908 38.58 li
62.908 38.504 li
62.831 38.504 li
62.755 38.428 li
62.679 38.352 li
62.602 38.352 li
62.602 38.275 li
62.526 38.275 li
62.526 38.199 li
62.45 38.199 li
62.45 38.122 li
62.373 38.122 li
62.297 38.046 li
62.221 38.046 li
62.221 37.97 li
62.144 37.97 li
62.144 37.893 li
62.068 37.893 li
62.068 37.817 li
61.915 37.817 li
61.915 37.741 li
61.839 37.741 li
61.839 37.664 li
61.763 37.588 li
61.686 37.588 li
61.686 37.511 li
61.61 37.511 li
61.61 37.435 li
61.534 37.435 li
61.534 37.359 li
61.456 37.359 li
61.456 37.283 li
61.381 37.283 li
61.381 37.206 li
61.305 37.206 li
61.305 37.129 li
61.227 37.129 li
61.227 37.053 li
61.152 37.053 li
61.152 36.977 li
61.075 36.977 li
61.075 36.901 li
60.998 36.901 li
60.998 36.825 li
60.923 36.825 li
60.923 36.747 li
60.846 36.747 li
60.846 36.671 li
60.769 36.671 li
60.769 36.595 li
60.693 36.595 li
60.693 36.519 li
60.617 36.519 li
60.617 36.443 li
60.54 36.443 li
60.464 36.366 li
60.464 36.289 li
60.388 36.289 li
60.388 36.213 li
60.311 36.213 li
60.235 36.137 li
60.159 36.061 li
60.159 35.984 li
60.082 35.984 li
60.006 35.908 li
60.006 35.831 li
59.93 35.831 li
59.853 35.755 li
59.853 35.679 li
59.777 35.679 li
59.777 35.602 li
59.701 35.602 li
59.701 35.526 li
59.624 35.45 li
59.548 35.373 li
59.548 35.297 li
59.472 35.22 li
59.394 35.144 li
59.394 35.068 li
59.319 34.992 li
59.319 34.915 li
59.243 34.915 li
59.243 34.762 li
59.165 34.762 li
59.165 34.686 li
59.09 34.61 li
59.09 34.533 li
59.013 34.456 li
59.013 34.38 li
58.936 34.38 li
58.936 34.228 li
58.86 34.228 li
58.86 34.151 li
58.784 34.075 li
58.784 33.998 li
58.707 33.922 li
58.631 33.846 li
58.631 33.769 li
58.555 33.769 li
58.478 33.693 li
58.402 33.617 li
58.249 33.617 li
58.249 33.54 li
58.173 33.54 li
58.173 33.617 li
57.944 33.617 li
57.944 33.693 li
57.868 33.693 li
57.868 33.769 li
57.791 33.769 li
57.715 33.846 li
57.639 33.922 li
57.639 33.998 li
57.562 33.998 li
57.562 34.075 li
57.486 34.075 li
57.486 34.151 li
57.41 34.228 li
57.41 34.304 li
57.332 34.304 li
57.332 34.38 li
57.257 34.38 li
57.257 34.456 li
57.18 34.533 li
57.103 34.61 li
57.028 34.61 li
57.028 34.686 li
56.798 34.686 li
56.722 34.61 li
56.645 34.61 li
56.645 34.456 li
56.569 34.456 li
56.569 34.304 li
56.493 34.304 li
56.493 34.228 li
56.416 34.151 li
56.416 33.998 li
56.34 33.922 li
56.34 33.846 li
56.264 33.769 li
56.264 33.54 li
56.187 33.464 li
56.187 33.387 li
56.111 33.311 li
56.111 33.159 li
56.035 33.005 li
56.035 32.853 li
55.958 32.777 li
55.958 32.701 li
55.882 32.547 li
55.882 32.395 li
55.806 32.319 li
55.806 32.165 li
55.729 32.089 li
55.729 31.937 li
55.653 31.86 li
55.653 31.784 li
55.577 31.707 li
55.577 31.555 li
55.5 31.555 li
55.5 31.402 li
55.424 31.402 li
55.424 31.249 li
55.348 31.249 li
55.348 31.172 li
55.27 31.172 li
55.27 31.096 li
55.195 31.096 li
55.195 31.02 li
54.966 31.02 li
54.966 31.096 li
54.889 31.096 li
54.889 31.172 li
54.812 31.172 li
54.812 31.249 li
54.736 31.326 li
54.736 31.402 li
54.66 31.478 li
54.583 31.555 li
54.583 31.631 li
54.507 31.707 li
54.507 31.784 li
54.431 31.784 li
54.431 31.86 li
54.354 31.86 li
54.354 32.013 li
54.278 32.013 li
54.202 32.089 li
54.125 32.165 li
54.049 32.165 li
54.049 32.242 li
53.667 32.242 li
53.667 32.165 li
53.591 32.165 li
53.515 32.089 li
53.437 32.089 li
53.437 32.013 li
53.362 32.013 li
53.362 31.937 li
53.286 31.86 li
53.208 31.784 li
53.133 31.707 li
53.056 31.631 li
53.056 31.555 li
52.979 31.478 li
52.904 31.402 li
52.904 31.326 li
52.827 31.249 li
52.827 31.172 li
52.75 31.172 li
52.75 31.096 li
52.674 31.02 li
52.674 30.944 li
52.598 30.868 li
52.598 30.714 li
52.521 30.714 li
52.521 30.638 li
52.445 30.562 li
52.445 30.486 li
52.369 30.409 li
52.369 30.332 li
52.292 30.332 li
52.292 30.18 li
52.216 30.18 li
52.216 30.027 li
52.14 30.027 li
52.14 29.874 li
52.063 29.874 li
52.063 29.798 li
51.987 29.798 li
51.987 29.722 li
51.911 29.645 li
51.911 29.569 li
51.835 29.569 li
51.835 29.493 li
51.758 29.416 li
51.758 29.34 li
51.682 29.34 li
51.682 29.263 li
51.605 29.263 li
51.605 29.187 li
51.529 29.187 li
51.529 29.111 li
51.453 29.111 li
51.453 29.035 li
51.375 29.035 li
51.3 28.958 li
50.842 28.958 li
50.842 29.035 li
50.688 29.035 li
50.688 29.111 li
50.612 29.111 li
50.612 29.187 li
50.536 29.187 li
50.536 29.263 li
50.46 29.263 li
50.46 29.34 li
50.383 29.34 li
50.383 29.416 li
50.307 29.416 li
50.307 29.493 li
50.23 29.493 li
50.23 29.569 li
50.154 29.569 li
50.154 29.645 li
50.078 29.645 li
50.002 29.722 li
49.62 29.722 li
49.62 29.645 li
49.544 29.645 li
49.145 29.294 49.436 29.447 49.238 29.263 cv
49.238 29.187 li
49.161 29.187 li
49.161 29.111 li
49.084 29.035 li
49.084 28.958 li
49.009 28.881 li
49.009 28.805 li
48.932 28.729 li
48.932 28.577 li
48.855 28.499 li
48.855 28.423 li
48.78 28.347 li
48.78 28.194 li
48.703 28.118 li
48.703 28.041 li
48.627 27.965 li
48.627 27.736 li
48.55 27.66 li
48.55 27.583 li
48.474 27.507 li
48.474 27.354 li
48.397 27.278 li
48.397 27.125 li
48.321 27.048 li
48.321 26.972 li
48.245 26.972 li
48.245 26.896 li
48.222 26.752 48.136 26.618 48.016 26.514 cv
47.94 26.514 li
47.94 26.438 li
47.863 26.438 li
47.863 26.514 li
47.787 26.514 li
47.711 26.59 li
47.711 26.666 li
47.634 26.666 li
47.634 26.744 li
47.558 26.82 li
47.558 26.896 li
47.48 26.972 li
47.48 27.048 li
47.405 27.125 li
47.405 27.278 li
47.329 27.278 li
47.329 27.354 li
47.252 27.43 li
47.252 27.583 li
47.176 27.66 li
47.099 27.736 li
47.099 27.889 li
47.023 27.889 li
47.023 27.965 li
46.947 28.041 li
46.947 28.118 li
46.87 28.194 li
46.794 28.194 li
46.794 28.271 li
46.717 28.347 li
46.641 28.347 li
46.641 28.423 li
46.336 28.423 li
46.336 28.347 li
46.259 28.347 li
46.259 28.271 li
46.183 28.271 li
46.183 28.194 li
46.106 28.194 li
46.106 28.041 li
46.03 27.965 li
46.03 27.889 li
45.954 27.812 li
45.954 27.736 li
45.878 27.66 li
45.878 27.507 li
45.801 27.43 li
45.801 27.354 li
45.725 27.278 li
45.725 27.125 li
45.649 27.048 li
45.649 26.896 li
45.572 26.744 li
45.572 26.666 li
45.496 26.59 li
45.496 26.362 li
45.419 26.285 li
45.419 26.208 li
45.343 26.056 li
45.343 25.903 li
45.267 25.827 li
45.267 25.75 li
45.189 25.674 li
45.189 25.521 li
45.114 25.445 li
45.114 25.292 li
45.037 25.216 li
45.037 25.139 li
44.961 25.063 li
44.961 24.987 li
44.885 24.911 li
44.885 24.834 li
44.808 24.834 li
44.808 24.757 li
44.732 24.757 li
44.655 24.681 li
44.426 24.681 li
44.35 24.757 li
44.274 24.757 li
44.274 24.834 li
44.197 24.834 li
44.121 24.911 li
44.045 24.911 li
44.045 24.987 li
43.968 24.987 li
43.968 25.063 li
43.892 25.063 li
43.816 25.139 li
43.739 25.216 li
43.663 25.216 li
43.663 25.292 li
43.587 25.292 li
43.458 25.292 43.331 25.292 43.205 25.292 cv
43.128 25.292 li
43.128 25.216 li
42.975 25.216 li
42.975 25.139 li
42.899 25.139 li
42.823 25.063 li
42.746 24.987 li
42.746 24.911 li
42.67 24.911 li
42.593 24.834 li
42.593 24.757 li
42.517 24.757 li
42.517 24.681 li
42.441 24.681 li
42.441 24.605 li
42.364 24.605 li
42.364 24.529 li
42.288 24.452 li
42.212 24.375 li
42.135 24.299 li
42.059 24.223 li
42.059 24.147 li
41.981 24.147 li
41.981 24.07 li
41.906 24.07 li
41.906 23.994 li
41.83 23.917 li
41.753 23.841 li
41.677 23.765 li
41.601 23.688 li
41.601 23.612 li
41.524 23.612 li
41.448 23.536 li
41.372 23.459 li
41.372 23.383 li
41.295 23.383 li
41.169 23.255 41.04 23.129 40.913 23.001 cv
40.913 22.924 li
40.837 22.924 li
40.837 22.848 li
40.761 22.772 li
40.684 22.696 li
40.684 22.62 li
40.608 22.62 li
40.608 22.542 li
40.531 22.466 li
40.455 22.39 li
40.455 22.314 li
40.378 22.238 li
40.378 22.161 li
40.302 22.084 li
40.302 22.008 li
40.226 22.008 li
40.226 21.856 li
40.149 21.779 li
40.149 21.703 li
40.073 21.626 li
40.073 21.55 li
39.997 21.473 li
39.997 21.397 li
39.92 21.321 li
39.92 21.168 li
39.844 21.091 li
39.844 21.015 li
39.768 20.939 li
39.768 20.787 li
39.691 20.709 li
39.691 20.633 li
39.615 20.557 li
39.615 20.405 li
39.539 20.328 li
39.539 20.175 li
39.462 20.099 li
39.462 19.946 li
39.386 19.87 li
39.386 19.793 li
39.31 19.717 li
39.31 19.564 li
39.195 19.214 39.043 18.933 39.004 18.572 cv
38.928 18.495 li
38.928 18.418 li
38.851 18.342 li
38.851 18.19 li
38.775 18.113 li
38.775 17.884 li
38.699 17.808 li
38.699 17.731 li
38.622 17.655 li
38.622 17.502 li
38.546 17.426 li
38.546 17.349 li
38.469 17.273 li
38.469 17.12 li
38.393 17.12 li
38.393 16.967 li
38.25 16.812 38.229 16.589 38.087 16.433 cv
38.087 16.357 li
38.011 16.357 li
38.011 16.204 li
37.935 16.204 li
37.935 16.127 li
37.858 16.051 li
37.858 15.975 li
37.782 15.975 li
37.782 15.899 li
37.706 15.899 li
37.706 15.822 li
37.629 15.745 li
37.553 15.669 li
37.553 15.593 li
37.477 15.593 li
37.477 15.517 li
37.4 15.44 li
37.4 15.364 li
37.324 15.364 li
37.324 15.287 li
37.248 15.211 li
37.248 15.135 li
37.171 15.135 li
37.171 15.058 li
37.095 15.058 li
37.095 14.982 li
37.018 14.906 li
37.018 14.829 li
36.942 14.829 li
36.942 14.752 li
36.866 14.752 li
36.866 14.6 li
36.789 14.6 li
36.789 14.524 li
36.713 14.448 li
36.713 14.37 li
36.636 14.37 li
36.636 14.218 li
36.56 14.218 li
36.56 14.066 li
36.484 13.989 li
36.484 13.912 li
36.407 13.836 li
36.407 13.76 li
36.331 13.76 li
36.331 13.607 li
36.254 13.531 li
36.254 13.454 li
36.178 13.378 li
36.178 13.302 li
36.102 13.225 li
36.102 13.149 li
36.025 13.073 li
36.025 12.996 li
35.949 12.92 li
35.873 12.843 li
35.873 12.767 li
35.796 12.691 li
35.796 12.615 li
35.72 12.615 li
35.644 12.538 li
35.567 12.461 li
35.491 12.461 li
35.415 12.385 li
35.185 12.385 li
35.185 12.461 li
34.956 12.461 li
34.956 12.538 li
34.88 12.538 li
34.804 12.615 li
34.727 12.615 li
34.727 12.691 li
34.651 12.691 li
34.651 12.767 li
34.498 12.767 li
34.498 12.843 li
34.421 12.843 li
34.421 12.92 li
34.345 12.92 li
34.345 12.996 li
34.269 12.996 li
34.269 13.073 li
34.116 13.149 li
0 .915251 .82208 0 cmyk
@
173.57 15.02 mo
173.57 14.066 174.335 13.302 175.291 13.302 cv
176.244 13.302 177.007 14.066 177.007 15.02 cv
177.007 15.975 176.244 16.739 175.291 16.739 cv
174.335 16.739 173.57 15.975 173.57 15.02 cv
ef
173.57 15.02 mo
173.57 14.066 174.335 13.302 175.291 13.302 cv
176.244 13.302 177.007 14.066 177.007 15.02 cv
177.007 15.975 176.244 16.739 175.291 16.739 cv
174.335 16.739 173.57 15.975 173.57 15.02 cv
cp
@
172.806 15.249 mo
172.806 14.294 173.57 13.53 174.525 13.53 cv
175.48 13.53 176.244 14.294 176.244 15.249 cv
176.244 16.203 175.48 16.967 174.525 16.967 cv
173.57 16.967 172.806 16.203 172.806 15.249 cv
ef
172.806 15.249 mo
172.806 14.294 173.57 13.53 174.525 13.53 cv
175.48 13.53 176.244 14.294 176.244 15.249 cv
176.244 16.203 175.48 16.967 174.525 16.967 cv
173.57 16.967 172.806 16.203 172.806 15.249 cv
cp
@
171.89 15.555 mo
171.89 14.6 172.654 13.836 173.609 13.836 cv
174.564 13.836 175.328 14.6 175.328 15.555 cv
175.328 16.509 174.564 17.273 173.609 17.273 cv
172.654 17.273 171.89 16.509 171.89 15.555 cv
ef
171.89 15.555 mo
171.89 14.6 172.654 13.836 173.609 13.836 cv
174.564 13.836 175.328 14.6 175.328 15.555 cv
175.328 16.509 174.564 17.273 173.609 17.273 cv
172.654 17.273 171.89 16.509 171.89 15.555 cv
cp
@
170.974 16.089 mo
170.974 15.135 171.738 14.37 172.693 14.37 cv
173.646 14.37 174.412 15.135 174.412 16.089 cv
174.412 17.043 173.646 17.808 172.693 17.808 cv
171.738 17.808 170.974 17.043 170.974 16.089 cv
ef
170.974 16.089 mo
170.974 15.135 171.738 14.37 172.693 14.37 cv
173.646 14.37 174.412 15.135 174.412 16.089 cv
174.412 17.043 173.646 17.808 172.693 17.808 cv
171.738 17.808 170.974 17.043 170.974 16.089 cv
cp
@
170.058 16.776 mo
170.058 15.821 170.822 15.057 171.775 15.057 cv
172.73 15.057 173.496 15.821 173.496 16.776 cv
173.496 17.73 172.73 18.494 171.775 18.494 cv
170.822 18.494 170.058 17.73 170.058 16.776 cv
ef
170.058 16.776 mo
170.058 15.821 170.822 15.057 171.775 15.057 cv
172.73 15.057 173.496 15.821 173.496 16.776 cv
173.496 17.73 172.73 18.494 171.775 18.494 cv
170.822 18.494 170.058 17.73 170.058 16.776 cv
cp
@
169.216 17.616 mo
169.216 16.662 169.98 15.898 170.935 15.898 cv
171.89 15.898 172.654 16.662 172.654 17.616 cv
172.654 18.571 171.89 19.335 170.935 19.335 cv
169.98 19.335 169.216 18.571 169.216 17.616 cv
ef
169.216 17.616 mo
169.216 16.662 169.98 15.898 170.935 15.898 cv
171.89 15.898 172.654 16.662 172.654 17.616 cv
172.654 18.571 171.89 19.335 170.935 19.335 cv
169.98 19.335 169.216 18.571 169.216 17.616 cv
cp
@
168.3 18.456 mo
168.3 17.502 169.064 16.738 170.019 16.738 cv
170.974 16.738 171.738 17.502 171.738 18.456 cv
171.738 19.411 170.974 20.175 170.019 20.175 cv
169.064 20.175 168.3 19.411 168.3 18.456 cv
ef
168.3 18.456 mo
168.3 17.502 169.064 16.738 170.019 16.738 cv
170.974 16.738 171.738 17.502 171.738 18.456 cv
171.738 19.411 170.974 20.175 170.019 20.175 cv
169.064 20.175 168.3 19.411 168.3 18.456 cv
cp
@
167.462 19.449 mo
167.462 18.494 168.224 17.73 169.179 17.73 cv
170.134 17.73 170.898 18.494 170.898 19.449 cv
170.898 20.404 170.134 21.168 169.179 21.168 cv
168.224 21.168 167.462 20.404 167.462 19.449 cv
ef
167.462 19.449 mo
167.462 18.494 168.224 17.73 169.179 17.73 cv
170.134 17.73 170.898 18.494 170.898 19.449 cv
170.898 20.404 170.134 21.168 169.179 21.168 cv
168.224 21.168 167.462 20.404 167.462 19.449 cv
cp
@
166.544 20.595 mo
166.544 19.641 167.308 18.877 168.263 18.877 cv
169.216 18.877 169.98 19.641 169.98 20.595 cv
169.98 21.55 169.216 22.314 168.263 22.314 cv
167.308 22.314 166.544 21.55 166.544 20.595 cv
ef
166.544 20.595 mo
166.544 19.641 167.308 18.877 168.263 18.877 cv
169.216 18.877 169.98 19.641 169.98 20.595 cv
169.98 21.55 169.216 22.314 168.263 22.314 cv
167.308 22.314 166.544 21.55 166.544 20.595 cv
cp
@
165.628 21.816 mo
165.628 20.862 166.392 20.098 167.345 20.098 cv
168.3 20.098 169.064 20.862 169.064 21.816 cv
169.064 22.771 168.3 23.535 167.345 23.535 cv
166.392 23.535 165.628 22.771 165.628 21.816 cv
ef
165.628 21.816 mo
165.628 20.862 166.392 20.098 167.345 20.098 cv
168.3 20.098 169.064 20.862 169.064 21.816 cv
169.064 22.771 168.3 23.535 167.345 23.535 cv
166.392 23.535 165.628 22.771 165.628 21.816 cv
cp
@
164.789 23.039 mo
164.789 22.084 165.55 21.32 166.505 21.32 cv
167.462 21.32 168.224 22.084 168.224 23.039 cv
168.224 23.993 167.462 24.757 166.505 24.757 cv
165.55 24.757 164.789 23.993 164.789 23.039 cv
ef
164.789 23.039 mo
164.789 22.084 165.55 21.32 166.505 21.32 cv
167.462 21.32 168.224 22.084 168.224 23.039 cv
168.224 23.993 167.462 24.757 166.505 24.757 cv
165.55 24.757 164.789 23.993 164.789 23.039 cv
cp
@
163.947 24.49 mo
163.947 23.535 164.712 22.771 165.667 22.771 cv
166.621 22.771 167.384 23.535 167.384 24.49 cv
167.384 25.444 166.621 26.208 165.667 26.208 cv
164.712 26.208 163.947 25.444 163.947 24.49 cv
ef
163.947 24.49 mo
163.947 23.535 164.712 22.771 165.667 22.771 cv
166.621 22.771 167.384 23.535 167.384 24.49 cv
167.384 25.444 166.621 26.208 165.667 26.208 cv
164.712 26.208 163.947 25.444 163.947 24.49 cv
cp
@
163.031 26.018 mo
163.031 25.063 163.796 24.299 164.75 24.299 cv
165.705 24.299 166.468 25.063 166.468 26.018 cv
166.468 26.972 165.705 27.736 164.75 27.736 cv
163.796 27.736 163.031 26.972 163.031 26.018 cv
ef
163.031 26.018 mo
163.031 25.063 163.796 24.299 164.75 24.299 cv
165.705 24.299 166.468 25.063 166.468 26.018 cv
166.468 26.972 165.705 27.736 164.75 27.736 cv
163.796 27.736 163.031 26.972 163.031 26.018 cv
cp
@
162.115 27.239 mo
162.115 26.284 162.878 25.52 163.833 25.52 cv
164.789 25.52 165.55 26.284 165.55 27.239 cv
165.55 28.193 164.789 28.958 163.833 28.958 cv
162.878 28.958 162.115 28.193 162.115 27.239 cv
ef
162.115 27.239 mo
162.115 26.284 162.878 25.52 163.833 25.52 cv
164.789 25.52 165.55 26.284 165.55 27.239 cv
165.55 28.193 164.789 28.958 163.833 28.958 cv
162.878 28.958 162.115 28.193 162.115 27.239 cv
cp
@
161.199 28.309 mo
161.199 27.354 161.962 26.59 162.917 26.59 cv
163.873 26.59 164.634 27.354 164.634 28.309 cv
164.634 29.263 163.873 30.027 162.917 30.027 cv
161.962 30.027 161.199 29.263 161.199 28.309 cv
ef
161.199 28.309 mo
161.199 27.354 161.962 26.59 162.917 26.59 cv
163.873 26.59 164.634 27.354 164.634 28.309 cv
164.634 29.263 163.873 30.027 162.917 30.027 cv
161.962 30.027 161.199 29.263 161.199 28.309 cv
cp
@
160.359 29.454 mo
160.359 28.499 161.123 27.735 162.078 27.735 cv
163.031 27.735 163.796 28.499 163.796 29.454 cv
163.796 30.408 163.031 31.172 162.078 31.172 cv
161.123 31.172 160.359 30.408 160.359 29.454 cv
ef
160.359 29.454 mo
160.359 28.499 161.123 27.735 162.078 27.735 cv
163.031 27.735 163.796 28.499 163.796 29.454 cv
163.796 30.408 163.031 31.172 162.078 31.172 cv
161.123 31.172 160.359 30.408 160.359 29.454 cv
cp
@
159.517 30.6 mo
159.517 29.645 160.281 28.881 161.236 28.881 cv
162.191 28.881 162.957 29.645 162.957 30.6 cv
162.957 31.555 162.191 32.319 161.236 32.319 cv
160.281 32.319 159.517 31.555 159.517 30.6 cv
ef
159.517 30.6 mo
159.517 29.645 160.281 28.881 161.236 28.881 cv
162.191 28.881 162.957 29.645 162.957 30.6 cv
162.957 31.555 162.191 32.319 161.236 32.319 cv
160.281 32.319 159.517 31.555 159.517 30.6 cv
cp
@
158.601 31.821 mo
158.601 30.867 159.367 30.103 160.32 30.103 cv
161.275 30.103 162.039 30.867 162.039 31.821 cv
162.039 32.776 161.275 33.54 160.32 33.54 cv
159.367 33.54 158.601 32.776 158.601 31.821 cv
ef
158.601 31.821 mo
158.601 30.867 159.367 30.103 160.32 30.103 cv
161.275 30.103 162.039 30.867 162.039 31.821 cv
162.039 32.776 161.275 33.54 160.32 33.54 cv
159.367 33.54 158.601 32.776 158.601 31.821 cv
cp
@
157.685 33.349 mo
157.685 32.395 158.451 31.631 159.404 31.631 cv
160.359 31.631 161.123 32.395 161.123 33.349 cv
161.123 34.304 160.359 35.068 159.404 35.068 cv
158.451 35.068 157.685 34.304 157.685 33.349 cv
ef
157.685 33.349 mo
157.685 32.395 158.451 31.631 159.404 31.631 cv
160.359 31.631 161.123 32.395 161.123 33.349 cv
161.123 34.304 160.359 35.068 159.404 35.068 cv
158.451 35.068 157.685 34.304 157.685 33.349 cv
cp
@
156.769 35.105 mo
156.769 34.15 157.533 33.386 158.488 33.386 cv
159.441 33.386 160.207 34.15 160.207 35.105 cv
160.207 36.06 159.441 36.824 158.488 36.824 cv
157.533 36.824 156.769 36.06 156.769 35.105 cv
ef
156.769 35.105 mo
156.769 34.15 157.533 33.386 158.488 33.386 cv
159.441 33.386 160.207 34.15 160.207 35.105 cv
160.207 36.06 159.441 36.824 158.488 36.824 cv
157.533 36.824 156.769 36.06 156.769 35.105 cv
cp
@
155.929 36.938 mo
155.929 35.983 156.693 35.219 157.646 35.219 cv
158.601 35.219 159.367 35.983 159.367 36.938 cv
159.367 37.892 158.601 38.657 157.646 38.657 cv
156.693 38.657 155.929 37.892 155.929 36.938 cv
ef
155.929 36.938 mo
155.929 35.983 156.693 35.219 157.646 35.219 cv
158.601 35.219 159.367 35.983 159.367 36.938 cv
159.367 37.892 158.601 38.657 157.646 38.657 cv
156.693 38.657 155.929 37.892 155.929 36.938 cv
cp
@
155.089 38.848 mo
155.089 37.893 155.851 37.129 156.806 37.129 cv
157.761 37.129 158.525 37.893 158.525 38.848 cv
158.525 39.803 157.761 40.567 156.806 40.567 cv
155.851 40.567 155.089 39.803 155.089 38.848 cv
ef
155.089 38.848 mo
155.089 37.893 155.851 37.129 156.806 37.129 cv
157.761 37.129 158.525 37.893 158.525 38.848 cv
158.525 39.803 157.761 40.567 156.806 40.567 cv
155.851 40.567 155.089 39.803 155.089 38.848 cv
cp
@
154.171 40.833 mo
154.171 39.879 154.935 39.115 155.89 39.115 cv
156.845 39.115 157.609 39.879 157.609 40.833 cv
157.609 41.788 156.845 42.552 155.89 42.552 cv
154.935 42.552 154.171 41.788 154.171 40.833 cv
ef
154.171 40.833 mo
154.171 39.879 154.935 39.115 155.89 39.115 cv
156.845 39.115 157.609 39.879 157.609 40.833 cv
157.609 41.788 156.845 42.552 155.89 42.552 cv
154.935 42.552 154.171 41.788 154.171 40.833 cv
cp
@
153.333 43.048 mo
153.333 42.094 154.095 41.33 155.05 41.33 cv
156.005 41.33 156.769 42.094 156.769 43.048 cv
156.769 44.003 156.005 44.767 155.05 44.767 cv
154.095 44.767 153.333 44.003 153.333 43.048 cv
ef
153.333 43.048 mo
153.333 42.094 154.095 41.33 155.05 41.33 cv
156.005 41.33 156.769 42.094 156.769 43.048 cv
156.769 44.003 156.005 44.767 155.05 44.767 cv
154.095 44.767 153.333 44.003 153.333 43.048 cv
cp
@
152.416 45.339 mo
152.416 44.385 153.179 43.621 154.134 43.621 cv
155.089 43.621 155.851 44.385 155.851 45.339 cv
155.851 46.293 155.089 47.058 154.134 47.058 cv
153.179 47.058 152.416 46.293 152.416 45.339 cv
ef
152.416 45.339 mo
152.416 44.385 153.179 43.621 154.134 43.621 cv
155.089 43.621 155.851 44.385 155.851 45.339 cv
155.851 46.293 155.089 47.058 154.134 47.058 cv
153.179 47.058 152.416 46.293 152.416 45.339 cv
cp
@
151.576 47.631 mo
151.576 46.676 152.339 45.912 153.294 45.912 cv
154.25 45.912 155.011 46.676 155.011 47.631 cv
155.011 48.585 154.25 49.349 153.294 49.349 cv
152.339 49.349 151.576 48.585 151.576 47.631 cv
ef
151.576 47.631 mo
151.576 46.676 152.339 45.912 153.294 45.912 cv
154.25 45.912 155.011 46.676 155.011 47.631 cv
155.011 48.585 154.25 49.349 153.294 49.349 cv
152.339 49.349 151.576 48.585 151.576 47.631 cv
cp
@
150.736 50.15 mo
150.736 49.196 151.5 48.432 152.455 48.432 cv
153.41 48.432 154.171 49.196 154.171 50.15 cv
154.171 51.105 153.41 51.869 152.455 51.869 cv
151.5 51.869 150.736 51.105 150.736 50.15 cv
ef
150.736 50.15 mo
150.736 49.196 151.5 48.432 152.455 48.432 cv
153.41 48.432 154.171 49.196 154.171 50.15 cv
154.171 51.105 153.41 51.869 152.455 51.869 cv
151.5 51.869 150.736 51.105 150.736 50.15 cv
cp
@
149.818 53.205 mo
149.818 52.251 150.583 51.487 151.539 51.487 cv
152.494 51.487 153.255 52.251 153.255 53.205 cv
153.255 54.16 152.494 54.924 151.539 54.924 cv
150.583 54.924 149.818 54.16 149.818 53.205 cv
ef
149.818 53.205 mo
149.818 52.251 150.583 51.487 151.539 51.487 cv
152.494 51.487 153.255 52.251 153.255 53.205 cv
153.255 54.16 152.494 54.924 151.539 54.924 cv
150.583 54.924 149.818 54.16 149.818 53.205 cv
cp
@
148.978 56.719 mo
148.978 55.764 149.744 55 150.697 55 cv
151.652 55 152.416 55.764 152.416 56.719 cv
152.416 57.673 151.652 58.438 150.697 58.438 cv
149.744 58.438 148.978 57.673 148.978 56.719 cv
ef
148.978 56.719 mo
148.978 55.764 149.744 55 150.697 55 cv
151.652 55 152.416 55.764 152.416 56.719 cv
152.416 57.673 151.652 58.438 150.697 58.438 cv
149.744 58.438 148.978 57.673 148.978 56.719 cv
cp
@
148.062 60.461 mo
148.062 59.506 148.828 58.742 149.781 58.742 cv
150.736 58.742 151.5 59.506 151.5 60.461 cv
151.5 61.415 150.736 62.18 149.781 62.18 cv
148.828 62.18 148.062 61.415 148.062 60.461 cv
ef
148.062 60.461 mo
148.062 59.506 148.828 58.742 149.781 58.742 cv
150.736 58.742 151.5 59.506 151.5 60.461 cv
151.5 61.415 150.736 62.18 149.781 62.18 cv
148.828 62.18 148.062 61.415 148.062 60.461 cv
cp
@
147.222 64.355 mo
147.222 63.401 147.986 62.636 148.941 62.636 cv
149.896 62.636 150.66 63.401 150.66 64.355 cv
150.66 65.31 149.896 66.074 148.941 66.074 cv
147.986 66.074 147.222 65.31 147.222 64.355 cv
ef
147.222 64.355 mo
147.222 63.401 147.986 62.636 148.941 62.636 cv
149.896 62.636 150.66 63.401 150.66 64.355 cv
150.66 65.31 149.896 66.074 148.941 66.074 cv
147.986 66.074 147.222 65.31 147.222 64.355 cv
cp
@
146.306 68.022 mo
146.306 67.068 147.07 66.303 148.025 66.303 cv
148.978 66.303 149.744 67.068 149.744 68.022 cv
149.744 68.977 148.978 69.741 148.025 69.741 cv
147.07 69.741 146.306 68.977 146.306 68.022 cv
ef
146.306 68.022 mo
146.306 67.068 147.07 66.303 148.025 66.303 cv
148.978 66.303 149.744 67.068 149.744 68.022 cv
149.744 68.977 148.978 69.741 148.025 69.741 cv
147.07 69.741 146.306 68.977 146.306 68.022 cv
cp
@
145.466 71.076 mo
145.466 70.122 146.23 69.358 147.183 69.358 cv
148.138 69.358 148.902 70.122 148.902 71.076 cv
148.902 72.031 148.138 72.795 147.183 72.795 cv
146.23 72.795 145.466 72.031 145.466 71.076 cv
ef
145.466 71.076 mo
145.466 70.122 146.23 69.358 147.183 69.358 cv
148.138 69.358 148.902 70.122 148.902 71.076 cv
148.902 72.031 148.138 72.795 147.183 72.795 cv
146.23 72.795 145.466 72.031 145.466 71.076 cv
cp
@
144.548 73.367 mo
144.548 72.413 145.312 71.649 146.267 71.649 cv
147.222 71.649 147.986 72.413 147.986 73.367 cv
147.986 74.322 147.222 75.086 146.267 75.086 cv
145.312 75.086 144.548 74.322 144.548 73.367 cv
ef
144.548 73.367 mo
144.548 72.413 145.312 71.649 146.267 71.649 cv
147.222 71.649 147.986 72.413 147.986 73.367 cv
147.986 74.322 147.222 75.086 146.267 75.086 cv
145.312 75.086 144.548 74.322 144.548 73.367 cv
cp
@
143.71 74.666 mo
143.71 73.711 144.472 72.947 145.427 72.947 cv
146.382 72.947 147.146 73.711 147.146 74.666 cv
147.146 75.621 146.382 76.385 145.427 76.385 cv
144.472 76.385 143.71 75.621 143.71 74.666 cv
ef
143.71 74.666 mo
143.71 73.711 144.472 72.947 145.427 72.947 cv
146.382 72.947 147.146 73.711 147.146 74.666 cv
147.146 75.621 146.382 76.385 145.427 76.385 cv
144.472 76.385 143.71 75.621 143.71 74.666 cv
cp
@
142.794 75.43 mo
142.794 74.476 143.556 73.711 144.511 73.711 cv
145.466 73.711 146.23 74.476 146.23 75.43 cv
146.23 76.385 145.466 77.15 144.511 77.15 cv
143.556 77.15 142.794 76.385 142.794 75.43 cv
ef
142.794 75.43 mo
142.794 74.476 143.556 73.711 144.511 73.711 cv
145.466 73.711 146.23 74.476 146.23 75.43 cv
146.23 76.385 145.466 77.15 144.511 77.15 cv
143.556 77.15 142.794 76.385 142.794 75.43 cv
cp
@
141.953 75.506 mo
141.953 74.552 142.716 73.788 143.671 73.788 cv
144.626 73.788 145.388 74.552 145.388 75.506 cv
145.388 76.461 144.626 77.226 143.671 77.226 cv
142.716 77.226 141.953 76.461 141.953 75.506 cv
ef
141.953 75.506 mo
141.953 74.552 142.716 73.788 143.671 73.788 cv
144.626 73.788 145.388 74.552 145.388 75.506 cv
145.388 76.461 144.626 77.226 143.671 77.226 cv
142.716 77.226 141.953 76.461 141.953 75.506 cv
cp
@
141.037 74.818 mo
141.037 73.864 141.8 73.1 142.755 73.1 cv
143.71 73.1 144.472 73.864 144.472 74.818 cv
144.472 75.773 143.71 76.537 142.755 76.537 cv
141.8 76.537 141.037 75.773 141.037 74.818 cv
ef
141.037 74.818 mo
141.037 73.864 141.8 73.1 142.755 73.1 cv
143.71 73.1 144.472 73.864 144.472 74.818 cv
144.472 75.773 143.71 76.537 142.755 76.537 cv
141.8 76.537 141.037 75.773 141.037 74.818 cv
cp
@
140.197 74.055 mo
140.197 73.102 140.96 72.337 141.916 72.337 cv
142.871 72.337 143.632 73.102 143.632 74.055 cv
143.632 75.01 142.871 75.775 141.916 75.775 cv
140.96 75.775 140.197 75.01 140.197 74.055 cv
ef
140.197 74.055 mo
140.197 73.102 140.96 72.337 141.916 72.337 cv
142.871 72.337 143.632 73.102 143.632 74.055 cv
143.632 75.01 142.871 75.775 141.916 75.775 cv
140.96 75.775 140.197 75.01 140.197 74.055 cv
cp
@
139.279 73.367 mo
139.279 72.413 140.044 71.649 141 71.649 cv
141.953 71.649 142.716 72.413 142.716 73.367 cv
142.716 74.322 141.953 75.086 141 75.086 cv
140.044 75.086 139.279 74.322 139.279 73.367 cv
ef
139.279 73.367 mo
139.279 72.413 140.044 71.649 141 71.649 cv
141.953 71.649 142.716 72.413 142.716 73.367 cv
142.716 74.322 141.953 75.086 141 75.086 cv
140.044 75.086 139.279 74.322 139.279 73.367 cv
cp
@
138.439 71.382 mo
138.439 70.428 139.205 69.664 140.158 69.664 cv
141.113 69.664 141.876 70.428 141.876 71.382 cv
141.876 72.337 141.113 73.102 140.158 73.102 cv
139.205 73.102 138.439 72.337 138.439 71.382 cv
ef
138.439 71.382 mo
138.439 70.428 139.205 69.664 140.158 69.664 cv
141.113 69.664 141.876 70.428 141.876 71.382 cv
141.876 72.337 141.113 73.102 140.158 73.102 cv
139.205 73.102 138.439 72.337 138.439 71.382 cv
cp
@
137.523 68.709 mo
137.523 67.754 138.287 66.99 139.242 66.99 cv
140.197 66.99 140.96 67.754 140.96 68.709 cv
140.96 69.664 140.197 70.428 139.242 70.428 cv
138.287 70.428 137.523 69.664 137.523 68.709 cv
ef
137.523 68.709 mo
137.523 67.754 138.287 66.99 139.242 66.99 cv
140.197 66.99 140.96 67.754 140.96 68.709 cv
140.96 69.664 140.197 70.428 139.242 70.428 cv
138.287 70.428 137.523 69.664 137.523 68.709 cv
cp
@
136.607 66.418 mo
136.607 65.463 137.371 64.699 138.326 64.699 cv
139.279 64.699 140.044 65.463 140.044 66.418 cv
140.044 67.372 139.279 68.136 138.326 68.136 cv
137.371 68.136 136.607 67.372 136.607 66.418 cv
ef
136.607 66.418 mo
136.607 65.463 137.371 64.699 138.326 64.699 cv
139.279 64.699 140.044 65.463 140.044 66.418 cv
140.044 67.372 139.279 68.136 138.326 68.136 cv
137.371 68.136 136.607 67.372 136.607 66.418 cv
cp
@
135.767 64.127 mo
135.767 63.172 136.531 62.408 137.484 62.408 cv
138.439 62.408 139.205 63.172 139.205 64.127 cv
139.205 65.081 138.439 65.845 137.484 65.845 cv
136.531 65.845 135.767 65.081 135.767 64.127 cv
ef
135.767 64.127 mo
135.767 63.172 136.531 62.408 137.484 62.408 cv
138.439 62.408 139.205 63.172 139.205 64.127 cv
139.205 65.081 138.439 65.845 137.484 65.845 cv
136.531 65.845 135.767 65.081 135.767 64.127 cv
cp
@
134.849 62.676 mo
134.849 61.721 135.613 60.957 136.568 60.957 cv
137.523 60.957 138.287 61.721 138.287 62.676 cv
138.287 63.63 137.523 64.395 136.568 64.395 cv
135.613 64.395 134.849 63.63 134.849 62.676 cv
ef
134.849 62.676 mo
134.849 61.721 135.613 60.957 136.568 60.957 cv
137.523 60.957 138.287 61.721 138.287 62.676 cv
138.287 63.63 137.523 64.395 136.568 64.395 cv
135.613 64.395 134.849 63.63 134.849 62.676 cv
cp
@
133.933 63.135 mo
133.933 62.18 134.697 61.415 135.652 61.415 cv
136.607 61.415 137.371 62.18 137.371 63.135 cv
137.371 64.089 136.607 64.854 135.652 64.854 cv
134.697 64.854 133.933 64.089 133.933 63.135 cv
ef
133.933 63.135 mo
133.933 62.18 134.697 61.415 135.652 61.415 cv
136.607 61.415 137.371 62.18 137.371 63.135 cv
137.371 64.089 136.607 64.854 135.652 64.854 cv
134.697 64.854 133.933 64.089 133.933 63.135 cv
cp
@
133.171 65.119 mo
133.171 64.165 133.933 63.401 134.888 63.401 cv
135.843 63.401 136.607 64.165 136.607 65.119 cv
136.607 66.074 135.843 66.838 134.888 66.838 cv
133.933 66.838 133.171 66.074 133.171 65.119 cv
ef
133.171 65.119 mo
133.171 64.165 133.933 63.401 134.888 63.401 cv
135.843 63.401 136.607 64.165 136.607 65.119 cv
136.607 66.074 135.843 66.838 134.888 66.838 cv
133.933 66.838 133.171 66.074 133.171 65.119 cv
cp
@
132.332 67.334 mo
132.332 66.38 133.093 65.616 134.048 65.616 cv
135.003 65.616 135.767 66.38 135.767 67.334 cv
135.767 68.289 135.003 69.053 134.048 69.053 cv
133.093 69.053 132.332 68.289 132.332 67.334 cv
ef
132.332 67.334 mo
132.332 66.38 133.093 65.616 134.048 65.616 cv
135.003 65.616 135.767 66.38 135.767 67.334 cv
135.767 68.289 135.003 69.053 134.048 69.053 cv
133.093 69.053 132.332 68.289 132.332 67.334 cv
cp
@
131.414 69.702 mo
131.414 68.747 132.177 67.983 133.132 67.983 cv
134.087 67.983 134.849 68.747 134.849 69.702 cv
134.849 70.656 134.087 71.42 133.132 71.42 cv
132.177 71.42 131.414 70.656 131.414 69.702 cv
ef
131.414 69.702 mo
131.414 68.747 132.177 67.983 133.132 67.983 cv
134.087 67.983 134.849 68.747 134.849 69.702 cv
134.849 70.656 134.087 71.42 133.132 71.42 cv
132.177 71.42 131.414 70.656 131.414 69.702 cv
cp
@
130.574 71.688 mo
130.574 70.733 131.337 69.968 132.292 69.968 cv
133.248 69.968 134.009 70.733 134.009 71.688 cv
134.009 72.643 133.248 73.407 132.292 73.407 cv
131.337 73.407 130.574 72.643 130.574 71.688 cv
ef
130.574 71.688 mo
130.574 70.733 131.337 69.968 132.292 69.968 cv
133.248 69.968 134.009 70.733 134.009 71.688 cv
134.009 72.643 133.248 73.407 132.292 73.407 cv
131.337 73.407 130.574 72.643 130.574 71.688 cv
cp
@
129.656 73.597 mo
129.656 72.644 130.421 71.878 131.376 71.878 cv
132.332 71.878 133.093 72.644 133.093 73.597 cv
133.093 74.552 132.332 75.317 131.376 75.317 cv
130.421 75.317 129.656 74.552 129.656 73.597 cv
ef
129.656 73.597 mo
129.656 72.644 130.421 71.878 131.376 71.878 cv
132.332 71.878 133.093 72.644 133.093 73.597 cv
133.093 74.552 132.332 75.317 131.376 75.317 cv
130.421 75.317 129.656 74.552 129.656 73.597 cv
cp
@
128.816 75.506 mo
128.816 74.552 129.582 73.788 130.537 73.788 cv
131.49 73.788 132.253 74.552 132.253 75.506 cv
132.253 76.461 131.49 77.226 130.537 77.226 cv
129.582 77.226 128.816 76.461 128.816 75.506 cv
ef
128.816 75.506 mo
128.816 74.552 129.582 73.788 130.537 73.788 cv
131.49 73.788 132.253 74.552 132.253 75.506 cv
132.253 76.461 131.49 77.226 130.537 77.226 cv
129.582 77.226 128.816 76.461 128.816 75.506 cv
cp
@
127.9 78.026 mo
127.9 77.071 128.666 76.306 129.619 76.306 cv
130.574 76.306 131.337 77.071 131.337 78.026 cv
131.337 78.981 130.574 79.745 129.619 79.745 cv
128.666 79.745 127.9 78.981 127.9 78.026 cv
ef
127.9 78.026 mo
127.9 77.071 128.666 76.306 129.619 76.306 cv
130.574 76.306 131.337 77.071 131.337 78.026 cv
131.337 78.981 130.574 79.745 129.619 79.745 cv
128.666 79.745 127.9 78.981 127.9 78.026 cv
cp
@
126.984 81.234 mo
126.984 80.279 127.748 79.514 128.703 79.514 cv
129.656 79.514 130.421 80.279 130.421 81.234 cv
130.421 82.188 129.656 82.952 128.703 82.952 cv
127.748 82.952 126.984 82.188 126.984 81.234 cv
ef
126.984 81.234 mo
126.984 80.279 127.748 79.514 128.703 79.514 cv
129.656 79.514 130.421 80.279 130.421 81.234 cv
130.421 82.188 129.656 82.952 128.703 82.952 cv
127.748 82.952 126.984 82.188 126.984 81.234 cv
cp
@
126.144 84.823 mo
126.144 83.869 126.908 83.105 127.863 83.105 cv
128.816 83.105 129.582 83.869 129.582 84.823 cv
129.582 85.778 128.816 86.542 127.863 86.542 cv
126.908 86.542 126.144 85.778 126.144 84.823 cv
ef
126.144 84.823 mo
126.144 83.869 126.908 83.105 127.863 83.105 cv
128.816 83.105 129.582 83.869 129.582 84.823 cv
129.582 85.778 128.816 86.542 127.863 86.542 cv
126.908 86.542 126.144 85.778 126.144 84.823 cv
cp
@
125.226 87.802 mo
125.226 86.848 125.992 86.084 126.945 86.084 cv
127.9 86.084 128.666 86.848 128.666 87.802 cv
128.666 88.757 127.9 89.522 126.945 89.522 cv
125.992 89.522 125.226 88.757 125.226 87.802 cv
ef
125.226 87.802 mo
125.226 86.848 125.992 86.084 126.945 86.084 cv
127.9 86.084 128.666 86.848 128.666 87.802 cv
128.666 88.757 127.9 89.522 126.945 89.522 cv
125.992 89.522 125.226 88.757 125.226 87.802 cv
cp
@
124.31 89.864 mo
124.31 88.909 125.076 88.145 126.029 88.145 cv
126.984 88.145 127.748 88.909 127.748 89.864 cv
127.748 90.818 126.984 91.582 126.029 91.582 cv
125.076 91.582 124.31 90.818 124.31 89.864 cv
ef
124.31 89.864 mo
124.31 88.909 125.076 88.145 126.029 88.145 cv
126.984 88.145 127.748 88.909 127.748 89.864 cv
127.748 90.818 126.984 91.582 126.029 91.582 cv
125.076 91.582 124.31 90.818 124.31 89.864 cv
cp
@
123.47 91.315 mo
123.47 90.36 124.234 89.595 125.189 89.595 cv
126.144 89.595 126.908 90.36 126.908 91.315 cv
126.908 92.269 126.144 93.033 125.189 93.033 cv
124.234 93.033 123.47 92.269 123.47 91.315 cv
ef
123.47 91.315 mo
123.47 90.36 124.234 89.595 125.189 89.595 cv
126.144 89.595 126.908 90.36 126.908 91.315 cv
126.908 92.269 126.144 93.033 125.189 93.033 cv
124.234 93.033 123.47 92.269 123.47 91.315 cv
cp
@
122.63 92.002 mo
122.63 91.048 123.394 90.284 124.349 90.284 cv
125.304 90.284 126.068 91.048 126.068 92.002 cv
126.068 92.957 125.304 93.721 124.349 93.721 cv
123.394 93.721 122.63 92.957 122.63 92.002 cv
ef
122.63 92.002 mo
122.63 91.048 123.394 90.284 124.349 90.284 cv
125.304 90.284 126.068 91.048 126.068 92.002 cv
126.068 92.957 125.304 93.721 124.349 93.721 cv
123.394 93.721 122.63 92.957 122.63 92.002 cv
cp
@
121.638 92.155 mo
121.638 91.2 122.402 90.436 123.355 90.436 cv
124.31 90.436 125.076 91.2 125.076 92.155 cv
125.076 93.109 124.31 93.873 123.355 93.873 cv
122.402 93.873 121.638 93.109 121.638 92.155 cv
ef
121.638 92.155 mo
121.638 91.2 122.402 90.436 123.355 90.436 cv
124.31 90.436 125.076 91.2 125.076 92.155 cv
125.076 93.109 124.31 93.873 123.355 93.873 cv
122.402 93.873 121.638 93.109 121.638 92.155 cv
cp
@
120.798 92.231 mo
120.798 91.276 121.562 90.511 122.515 90.511 cv
123.47 90.511 124.234 91.276 124.234 92.231 cv
124.234 93.186 123.47 93.95 122.515 93.95 cv
121.562 93.95 120.798 93.186 120.798 92.231 cv
ef
120.798 92.231 mo
120.798 91.276 121.562 90.511 122.515 90.511 cv
123.47 90.511 124.234 91.276 124.234 92.231 cv
124.234 93.186 123.47 93.95 122.515 93.95 cv
121.562 93.95 120.798 93.186 120.798 92.231 cv
cp
@
119.88 92.613 mo
119.88 91.658 120.644 90.894 121.599 90.894 cv
122.554 90.894 123.318 91.658 123.318 92.613 cv
123.318 93.568 122.554 94.332 121.599 94.332 cv
120.644 94.332 119.88 93.568 119.88 92.613 cv
ef
119.88 92.613 mo
119.88 91.658 120.644 90.894 121.599 90.894 cv
122.554 90.894 123.318 91.658 123.318 92.613 cv
123.318 93.568 122.554 94.332 121.599 94.332 cv
120.644 94.332 119.88 93.568 119.88 92.613 cv
cp
@
119.119 92.919 mo
119.119 91.964 119.88 91.2 120.837 91.2 cv
121.791 91.2 122.554 91.964 122.554 92.919 cv
122.554 93.873 121.791 94.637 120.837 94.637 cv
119.88 94.637 119.119 93.873 119.119 92.919 cv
ef
119.119 92.919 mo
119.119 91.964 119.88 91.2 120.837 91.2 cv
121.791 91.2 122.554 91.964 122.554 92.919 cv
122.554 93.873 121.791 94.637 120.837 94.637 cv
119.88 94.637 119.119 93.873 119.119 92.919 cv
cp
@
118.203 93.377 mo
118.203 92.423 118.964 91.658 119.919 91.658 cv
120.875 91.658 121.638 92.423 121.638 93.377 cv
121.638 94.332 120.875 95.096 119.919 95.096 cv
118.964 95.096 118.203 94.332 118.203 93.377 cv
ef
118.203 93.377 mo
118.203 92.423 118.964 91.658 119.919 91.658 cv
120.875 91.658 121.638 92.423 121.638 93.377 cv
121.638 94.332 120.875 95.096 119.919 95.096 cv
118.964 95.096 118.203 94.332 118.203 93.377 cv
cp
@
117.361 93.606 mo
117.361 92.651 118.125 91.886 119.08 91.886 cv
120.035 91.886 120.798 92.651 120.798 93.606 cv
120.798 94.56 120.035 95.324 119.08 95.324 cv
118.125 95.324 117.361 94.56 117.361 93.606 cv
ef
117.361 93.606 mo
117.361 92.651 118.125 91.886 119.08 91.886 cv
120.035 91.886 120.798 92.651 120.798 93.606 cv
120.798 94.56 120.035 95.324 119.08 95.324 cv
118.125 95.324 117.361 94.56 117.361 93.606 cv
cp
@
116.521 93.835 mo
116.521 92.881 117.285 92.117 118.24 92.117 cv
119.193 92.117 119.958 92.881 119.958 93.835 cv
119.958 94.79 119.193 95.554 118.24 95.554 cv
117.285 95.554 116.521 94.79 116.521 93.835 cv
ef
116.521 93.835 mo
116.521 92.881 117.285 92.117 118.24 92.117 cv
119.193 92.117 119.958 92.881 119.958 93.835 cv
119.958 94.79 119.193 95.554 118.24 95.554 cv
117.285 95.554 116.521 94.79 116.521 93.835 cv
cp
@
115.605 94.141 mo
115.605 93.188 116.369 92.423 117.322 92.423 cv
118.277 92.423 119.042 93.188 119.042 94.141 cv
119.042 95.096 118.277 95.861 117.322 95.861 cv
116.369 95.861 115.605 95.096 115.605 94.141 cv
ef
115.605 94.141 mo
115.605 93.188 116.369 92.423 117.322 92.423 cv
118.277 92.423 119.042 93.188 119.042 94.141 cv
119.042 95.096 118.277 95.861 117.322 95.861 cv
116.369 95.861 115.605 95.096 115.605 94.141 cv
cp
@
114.763 93.453 mo
114.763 92.499 115.529 91.735 116.482 91.735 cv
117.437 91.735 118.203 92.499 118.203 93.453 cv
118.203 94.408 117.437 95.172 116.482 95.172 cv
115.529 95.172 114.763 94.408 114.763 93.453 cv
ef
114.763 93.453 mo
114.763 92.499 115.529 91.735 116.482 91.735 cv
117.437 91.735 118.203 92.499 118.203 93.453 cv
118.203 94.408 117.437 95.172 116.482 95.172 cv
115.529 95.172 114.763 94.408 114.763 93.453 cv
cp
@
113.847 92.155 mo
113.847 91.2 114.611 90.436 115.566 90.436 cv
116.521 90.436 117.285 91.2 117.285 92.155 cv
117.285 93.109 116.521 93.873 115.566 93.873 cv
114.611 93.873 113.847 93.109 113.847 92.155 cv
ef
113.847 92.155 mo
113.847 91.2 114.611 90.436 115.566 90.436 cv
116.521 90.436 117.285 91.2 117.285 92.155 cv
117.285 93.109 116.521 93.873 115.566 93.873 cv
114.611 93.873 113.847 93.109 113.847 92.155 cv
cp
@
112.779 91.544 mo
112.779 90.59 113.542 89.826 114.498 89.826 cv
115.453 89.826 116.214 90.59 116.214 91.544 cv
116.214 92.499 115.453 93.263 114.498 93.263 cv
113.542 93.263 112.779 92.499 112.779 91.544 cv
ef
112.779 91.544 mo
112.779 90.59 113.542 89.826 114.498 89.826 cv
115.453 89.826 116.214 90.59 116.214 91.544 cv
116.214 92.499 115.453 93.263 114.498 93.263 cv
113.542 93.263 112.779 92.499 112.779 91.544 cv
cp
@
112.091 90.78 mo
112.091 89.826 112.855 89.062 113.81 89.062 cv
114.763 89.062 115.529 89.826 115.529 90.78 cv
115.529 91.735 114.763 92.499 113.81 92.499 cv
112.855 92.499 112.091 91.735 112.091 90.78 cv
ef
112.091 90.78 mo
112.091 89.826 112.855 89.062 113.81 89.062 cv
114.763 89.062 115.529 89.826 115.529 90.78 cv
115.529 91.735 114.763 92.499 113.81 92.499 cv
112.855 92.499 112.091 91.735 112.091 90.78 cv
cp
@
111.175 89.635 mo
111.175 88.681 111.939 87.916 112.892 87.916 cv
113.847 87.916 114.611 88.681 114.611 89.635 cv
114.611 90.59 113.847 91.355 112.892 91.355 cv
111.939 91.355 111.175 90.59 111.175 89.635 cv
ef
111.175 89.635 mo
111.175 88.681 111.939 87.916 112.892 87.916 cv
113.847 87.916 114.611 88.681 114.611 89.635 cv
114.611 90.59 113.847 91.355 112.892 91.355 cv
111.939 91.355 111.175 90.59 111.175 89.635 cv
cp
@
110.335 89.102 mo
110.335 88.147 111.099 87.382 112.052 87.382 cv
113.007 87.382 113.771 88.147 113.771 89.102 cv
113.771 90.055 113.007 90.82 112.052 90.82 cv
111.099 90.82 110.335 90.055 110.335 89.102 cv
ef
110.335 89.102 mo
110.335 88.147 111.099 87.382 112.052 87.382 cv
113.007 87.382 113.771 88.147 113.771 89.102 cv
113.771 90.055 113.007 90.82 112.052 90.82 cv
111.099 90.82 110.335 90.055 110.335 89.102 cv
cp
@
109.419 88.871 mo
109.419 87.916 110.181 87.152 111.136 87.152 cv
112.091 87.152 112.855 87.916 112.855 88.871 cv
112.855 89.826 112.091 90.59 111.136 90.59 cv
110.181 90.59 109.419 89.826 109.419 88.871 cv
ef
109.419 88.871 mo
109.419 87.916 110.181 87.152 111.136 87.152 cv
112.091 87.152 112.855 87.916 112.855 88.871 cv
112.855 89.826 112.091 90.59 111.136 90.59 cv
110.181 90.59 109.419 89.826 109.419 88.871 cv
cp
@
108.58 87.573 mo
108.58 86.618 109.341 85.854 110.296 85.854 cv
111.251 85.854 112.015 86.618 112.015 87.573 cv
112.015 88.527 111.251 89.291 110.296 89.291 cv
109.341 89.291 108.58 88.527 108.58 87.573 cv
ef
108.58 87.573 mo
108.58 86.618 109.341 85.854 110.296 85.854 cv
111.251 85.854 112.015 86.618 112.015 87.573 cv
112.015 88.527 111.251 89.291 110.296 89.291 cv
109.341 89.291 108.58 88.527 108.58 87.573 cv
cp
@
107.662 85.894 mo
107.662 84.94 108.425 84.174 109.38 84.174 cv
110.335 84.174 111.099 84.94 111.099 85.894 cv
111.099 86.848 110.335 87.613 109.38 87.613 cv
108.425 87.613 107.662 86.848 107.662 85.894 cv
ef
107.662 85.894 mo
107.662 84.94 108.425 84.174 109.38 84.174 cv
110.335 84.174 111.099 84.94 111.099 85.894 cv
111.099 86.848 110.335 87.613 109.38 87.613 cv
108.425 87.613 107.662 86.848 107.662 85.894 cv
cp
@
106.746 84.747 mo
106.746 83.792 107.509 83.028 108.464 83.028 cv
109.419 83.028 110.181 83.792 110.181 84.747 cv
110.181 85.702 109.419 86.466 108.464 86.466 cv
107.509 86.466 106.746 85.702 106.746 84.747 cv
ef
106.746 84.747 mo
106.746 83.792 107.509 83.028 108.464 83.028 cv
109.419 83.028 110.181 83.792 110.181 84.747 cv
110.181 85.702 109.419 86.466 108.464 86.466 cv
107.509 86.466 106.746 85.702 106.746 84.747 cv
cp
@
105.906 83.907 mo
105.906 82.952 106.669 82.188 107.625 82.188 cv
108.58 82.188 109.341 82.952 109.341 83.907 cv
109.341 84.861 108.58 85.625 107.625 85.625 cv
106.669 85.625 105.906 84.861 105.906 83.907 cv
ef
105.906 83.907 mo
105.906 82.952 106.669 82.188 107.625 82.188 cv
108.58 82.188 109.341 82.952 109.341 83.907 cv
109.341 84.861 108.58 85.625 107.625 85.625 cv
106.669 85.625 105.906 84.861 105.906 83.907 cv
cp
@
104.988 83.066 mo
104.988 82.112 105.753 81.347 106.708 81.347 cv
107.662 81.347 108.425 82.112 108.425 83.066 cv
108.425 84.021 107.662 84.785 106.708 84.785 cv
105.753 84.785 104.988 84.021 104.988 83.066 cv
ef
104.988 83.066 mo
104.988 82.112 105.753 81.347 106.708 81.347 cv
107.662 81.347 108.425 82.112 108.425 83.066 cv
108.425 84.021 107.662 84.785 106.708 84.785 cv
105.753 84.785 104.988 84.021 104.988 83.066 cv
cp
@
104.148 81.921 mo
104.148 80.967 104.914 80.203 105.869 80.203 cv
106.822 80.203 107.585 80.967 107.585 81.921 cv
107.585 82.876 106.822 83.64 105.869 83.64 cv
104.914 83.64 104.148 82.876 104.148 81.921 cv
ef
104.148 81.921 mo
104.148 80.967 104.914 80.203 105.869 80.203 cv
106.822 80.203 107.585 80.967 107.585 81.921 cv
107.585 82.876 106.822 83.64 105.869 83.64 cv
104.914 83.64 104.148 82.876 104.148 81.921 cv
cp
@
103.232 81.234 mo
103.232 80.279 103.998 79.514 104.951 79.514 cv
105.906 79.514 106.669 80.279 106.669 81.234 cv
106.669 82.188 105.906 82.952 104.951 82.952 cv
103.998 82.952 103.232 82.188 103.232 81.234 cv
ef
103.232 81.234 mo
103.232 80.279 103.998 79.514 104.951 79.514 cv
105.906 79.514 106.669 80.279 106.669 81.234 cv
106.669 82.188 105.906 82.952 104.951 82.952 cv
103.998 82.952 103.232 82.188 103.232 81.234 cv
cp
@
102.392 80.547 mo
102.392 79.592 103.156 78.828 104.111 78.828 cv
105.064 78.828 105.83 79.592 105.83 80.547 cv
105.83 81.501 105.064 82.266 104.111 82.266 cv
103.156 82.266 102.392 81.501 102.392 80.547 cv
ef
102.392 80.547 mo
102.392 79.592 103.156 78.828 104.111 78.828 cv
105.064 78.828 105.83 79.592 105.83 80.547 cv
105.83 81.501 105.064 82.266 104.111 82.266 cv
103.156 82.266 102.392 81.501 102.392 80.547 cv
cp
@
101.476 79.248 mo
101.476 78.294 102.24 77.53 103.193 77.53 cv
104.148 77.53 104.914 78.294 104.914 79.248 cv
104.914 80.203 104.148 80.967 103.193 80.967 cv
102.24 80.967 101.476 80.203 101.476 79.248 cv
ef
101.476 79.248 mo
101.476 78.294 102.24 77.53 103.193 77.53 cv
104.148 77.53 104.914 78.294 104.914 79.248 cv
104.914 80.203 104.148 80.967 103.193 80.967 cv
102.24 80.967 101.476 80.203 101.476 79.248 cv
cp
@
100.636 78.104 mo
100.636 77.15 101.399 76.385 102.353 76.385 cv
103.308 76.385 104.072 77.15 104.072 78.104 cv
104.072 79.059 103.308 79.823 102.353 79.823 cv
101.399 79.823 100.636 79.059 100.636 78.104 cv
ef
100.636 78.104 mo
100.636 77.15 101.399 76.385 102.353 76.385 cv
103.308 76.385 104.072 77.15 104.072 78.104 cv
104.072 79.059 103.308 79.823 102.353 79.823 cv
101.399 79.823 100.636 79.059 100.636 78.104 cv
cp
@
99.795 77.187 mo
99.795 76.232 100.559 75.467 101.514 75.467 cv
102.468 75.467 103.232 76.232 103.232 77.187 cv
103.232 78.14 102.468 78.905 101.514 78.905 cv
100.559 78.905 99.795 78.14 99.795 77.187 cv
ef
99.795 77.187 mo
99.795 76.232 100.559 75.467 101.514 75.467 cv
102.468 75.467 103.232 76.232 103.232 77.187 cv
103.232 78.14 102.468 78.905 101.514 78.905 cv
100.559 78.905 99.795 78.14 99.795 77.187 cv
cp
@
98.956 76.271 mo
98.956 75.317 99.72 74.552 100.675 74.552 cv
101.629 74.552 102.392 75.317 102.392 76.271 cv
102.392 77.226 101.629 77.99 100.675 77.99 cv
99.72 77.99 98.956 77.226 98.956 76.271 cv
ef
98.956 76.271 mo
98.956 75.317 99.72 74.552 100.675 74.552 cv
101.629 74.552 102.392 75.317 102.392 76.271 cv
102.392 77.226 101.629 77.99 100.675 77.99 cv
99.72 77.99 98.956 77.226 98.956 76.271 cv
cp
@
98.116 75.124 mo
98.116 74.17 98.88 73.406 99.835 73.406 cv
100.789 73.406 101.553 74.17 101.553 75.124 cv
101.553 76.079 100.789 76.843 99.835 76.843 cv
98.88 76.843 98.116 76.079 98.116 75.124 cv
ef
98.116 75.124 mo
98.116 74.17 98.88 73.406 99.835 73.406 cv
100.789 73.406 101.553 74.17 101.553 75.124 cv
101.553 76.079 100.789 76.843 99.835 76.843 cv
98.88 76.843 98.116 76.079 98.116 75.124 cv
cp
@
97.199 73.673 mo
97.199 72.719 97.964 71.955 98.918 71.955 cv
99.873 71.955 100.637 72.719 100.637 73.673 cv
100.637 74.628 99.873 75.393 98.918 75.393 cv
97.964 75.393 97.199 74.628 97.199 73.673 cv
ef
97.199 73.673 mo
97.199 72.719 97.964 71.955 98.918 71.955 cv
99.873 71.955 100.637 72.719 100.637 73.673 cv
100.637 74.628 99.873 75.393 98.918 75.393 cv
97.964 75.393 97.199 74.628 97.199 73.673 cv
cp
@
96.283 71.917 mo
96.283 70.962 97.047 70.198 98.002 70.198 cv
98.956 70.198 99.72 70.962 99.72 71.917 cv
99.72 72.871 98.956 73.635 98.002 73.635 cv
97.047 73.635 96.283 72.871 96.283 71.917 cv
ef
96.283 71.917 mo
96.283 70.962 97.047 70.198 98.002 70.198 cv
98.956 70.198 99.72 70.962 99.72 71.917 cv
99.72 72.871 98.956 73.635 98.002 73.635 cv
97.047 73.635 96.283 72.871 96.283 71.917 cv
cp
@
95.367 70.391 mo
95.367 69.436 96.131 68.671 97.085 68.671 cv
98.04 68.671 98.804 69.436 98.804 70.391 cv
98.804 71.344 98.04 72.109 97.085 72.109 cv
96.131 72.109 95.367 71.344 95.367 70.391 cv
ef
95.367 70.391 mo
95.367 69.436 96.131 68.671 97.085 68.671 cv
98.04 68.671 98.804 69.436 98.804 70.391 cv
98.804 71.344 98.04 72.109 97.085 72.109 cv
96.131 72.109 95.367 71.344 95.367 70.391 cv
cp
@
94.526 69.167 mo
94.526 68.213 95.29 67.449 96.245 67.449 cv
97.199 67.449 97.964 68.213 97.964 69.167 cv
97.964 70.122 97.199 70.886 96.245 70.886 cv
95.29 70.886 94.526 70.122 94.526 69.167 cv
ef
94.526 69.167 mo
94.526 68.213 95.29 67.449 96.245 67.449 cv
97.199 67.449 97.964 68.213 97.964 69.167 cv
97.964 70.122 97.199 70.886 96.245 70.886 cv
95.29 70.886 94.526 70.122 94.526 69.167 cv
cp
@
93.61 67.869 mo
93.61 66.914 94.374 66.15 95.328 66.15 cv
96.283 66.15 97.046 66.914 97.046 67.869 cv
97.046 68.823 96.283 69.587 95.328 69.587 cv
94.374 69.587 93.61 68.823 93.61 67.869 cv
ef
93.61 67.869 mo
93.61 66.914 94.374 66.15 95.328 66.15 cv
96.283 66.15 97.046 66.914 97.046 67.869 cv
97.046 68.823 96.283 69.587 95.328 69.587 cv
94.374 69.587 93.61 68.823 93.61 67.869 cv
cp
@
92.77 66.646 mo
92.77 65.692 93.534 64.927 94.488 64.927 cv
95.443 64.927 96.207 65.692 96.207 66.646 cv
96.207 67.601 95.443 68.365 94.488 68.365 cv
93.534 68.365 92.77 67.601 92.77 66.646 cv
ef
92.77 66.646 mo
92.77 65.692 93.534 64.927 94.488 64.927 cv
95.443 64.927 96.207 65.692 96.207 66.646 cv
96.207 67.601 95.443 68.365 94.488 68.365 cv
93.534 68.365 92.77 67.601 92.77 66.646 cv
cp
@
91.853 65.425 mo
91.853 64.471 92.617 63.707 93.572 63.707 cv
94.526 63.707 95.29 64.471 95.29 65.425 cv
95.29 66.38 94.526 67.145 93.572 67.145 cv
92.617 67.145 91.853 66.38 91.853 65.425 cv
ef
91.853 65.425 mo
91.853 64.471 92.617 63.707 93.572 63.707 cv
94.526 63.707 95.29 64.471 95.29 65.425 cv
95.29 66.38 94.526 67.145 93.572 67.145 cv
92.617 67.145 91.853 66.38 91.853 65.425 cv
cp
@
90.936 64.814 mo
90.936 63.859 91.7 63.095 92.654 63.095 cv
93.609 63.095 94.373 63.859 94.373 64.814 cv
94.373 65.768 93.609 66.532 92.654 66.532 cv
91.7 66.532 90.936 65.768 90.936 64.814 cv
ef
90.936 64.814 mo
90.936 63.859 91.7 63.095 92.654 63.095 cv
93.609 63.095 94.373 63.859 94.373 64.814 cv
94.373 65.768 93.609 66.532 92.654 66.532 cv
91.7 66.532 90.936 65.768 90.936 64.814 cv
cp
@
90.096 64.127 mo
90.096 63.172 90.86 62.408 91.815 62.408 cv
92.77 62.408 93.534 63.172 93.534 64.127 cv
93.534 65.081 92.77 65.845 91.815 65.845 cv
90.86 65.845 90.096 65.081 90.096 64.127 cv
ef
90.096 64.127 mo
90.096 63.172 90.86 62.408 91.815 62.408 cv
92.77 62.408 93.534 63.172 93.534 64.127 cv
93.534 65.081 92.77 65.845 91.815 65.845 cv
90.86 65.845 90.096 65.081 90.096 64.127 cv
cp
@
89.18 62.904 mo
89.18 61.95 89.944 61.186 90.899 61.186 cv
91.853 61.186 92.617 61.95 92.617 62.904 cv
92.617 63.859 91.853 64.623 90.899 64.623 cv
89.944 64.623 89.18 63.859 89.18 62.904 cv
ef
89.18 62.904 mo
89.18 61.95 89.944 61.186 90.899 61.186 cv
91.853 61.186 92.617 61.95 92.617 62.904 cv
92.617 63.859 91.853 64.623 90.899 64.623 cv
89.944 64.623 89.18 63.859 89.18 62.904 cv
cp
@
88.341 62.6 mo
88.341 61.645 89.105 60.882 90.059 60.882 cv
91.014 60.882 91.778 61.645 91.778 62.6 cv
91.778 63.554 91.014 64.319 90.059 64.319 cv
89.105 64.319 88.341 63.554 88.341 62.6 cv
ef
88.341 62.6 mo
88.341 61.645 89.105 60.882 90.059 60.882 cv
91.014 60.882 91.778 61.645 91.778 62.6 cv
91.778 63.554 91.014 64.319 90.059 64.319 cv
89.105 64.319 88.341 63.554 88.341 62.6 cv
cp
@
87.424 62.37 mo
87.424 61.415 88.188 60.651 89.143 60.651 cv
90.097 60.651 90.861 61.415 90.861 62.37 cv
90.861 63.325 90.097 64.089 89.143 64.089 cv
88.188 64.089 87.424 63.325 87.424 62.37 cv
ef
87.424 62.37 mo
87.424 61.415 88.188 60.651 89.143 60.651 cv
90.097 60.651 90.861 61.415 90.861 62.37 cv
90.861 63.325 90.097 64.089 89.143 64.089 cv
88.188 64.089 87.424 63.325 87.424 62.37 cv
cp
@
86.584 60.767 mo
86.584 59.812 87.348 59.048 88.303 59.048 cv
89.257 59.048 90.021 59.812 90.021 60.767 cv
90.021 61.721 89.257 62.485 88.303 62.485 cv
87.348 62.485 86.584 61.721 86.584 60.767 cv
ef
86.584 60.767 mo
86.584 59.812 87.348 59.048 88.303 59.048 cv
89.257 59.048 90.021 59.812 90.021 60.767 cv
90.021 61.721 89.257 62.485 88.303 62.485 cv
87.348 62.485 86.584 61.721 86.584 60.767 cv
cp
@
85.668 59.545 mo
85.668 58.59 86.432 57.826 87.386 57.826 cv
88.341 57.826 89.105 58.59 89.105 59.545 cv
89.105 60.499 88.341 61.263 87.386 61.263 cv
86.432 61.263 85.668 60.499 85.668 59.545 cv
ef
85.668 59.545 mo
85.668 58.59 86.432 57.826 87.386 57.826 cv
88.341 57.826 89.105 58.59 89.105 59.545 cv
89.105 60.499 88.341 61.263 87.386 61.263 cv
86.432 61.263 85.668 60.499 85.668 59.545 cv
cp
@
84.827 59.01 mo
84.827 58.055 85.591 57.291 86.546 57.291 cv
87.5 57.291 88.265 58.055 88.265 59.01 cv
88.265 59.965 87.5 60.729 86.546 60.729 cv
85.591 60.729 84.827 59.965 84.827 59.01 cv
ef
84.827 59.01 mo
84.827 58.055 85.591 57.291 86.546 57.291 cv
87.5 57.291 88.265 58.055 88.265 59.01 cv
88.265 59.965 87.5 60.729 86.546 60.729 cv
85.591 60.729 84.827 59.965 84.827 59.01 cv
cp
@
83.911 57.33 mo
83.911 56.375 84.675 55.611 85.629 55.611 cv
86.584 55.611 87.348 56.375 87.348 57.33 cv
87.348 58.284 86.584 59.048 85.629 59.048 cv
84.675 59.048 83.911 58.284 83.911 57.33 cv
ef
83.911 57.33 mo
83.911 56.375 84.675 55.611 85.629 55.611 cv
86.584 55.611 87.348 56.375 87.348 57.33 cv
87.348 58.284 86.584 59.048 85.629 59.048 cv
84.675 59.048 83.911 58.284 83.911 57.33 cv
cp
@
83.071 56.107 mo
83.071 55.153 83.835 54.389 84.789 54.389 cv
85.744 54.389 86.508 55.153 86.508 56.107 cv
86.508 57.062 85.744 57.826 84.789 57.826 cv
83.835 57.826 83.071 57.062 83.071 56.107 cv
ef
83.071 56.107 mo
83.071 55.153 83.835 54.389 84.789 54.389 cv
85.744 54.389 86.508 55.153 86.508 56.107 cv
86.508 57.062 85.744 57.826 84.789 57.826 cv
83.835 57.826 83.071 57.062 83.071 56.107 cv
cp
@
82.229 56.261 mo
82.229 55.306 82.993 54.542 83.948 54.542 cv
84.902 54.542 85.668 55.306 85.668 56.261 cv
85.668 57.215 84.902 57.979 83.948 57.979 cv
82.993 57.979 82.229 57.215 82.229 56.261 cv
ef
82.229 56.261 mo
82.229 55.306 82.993 54.542 83.948 54.542 cv
84.902 54.542 85.668 55.306 85.668 56.261 cv
85.668 57.215 84.902 57.979 83.948 57.979 cv
82.993 57.979 82.229 57.215 82.229 56.261 cv
cp
@
81.39 55.726 mo
81.39 54.772 82.154 54.008 83.109 54.008 cv
84.063 54.008 84.827 54.772 84.827 55.726 cv
84.827 56.681 84.063 57.445 83.109 57.445 cv
82.154 57.445 81.39 56.681 81.39 55.726 cv
ef
81.39 55.726 mo
81.39 54.772 82.154 54.008 83.109 54.008 cv
84.063 54.008 84.827 54.772 84.827 55.726 cv
84.827 56.681 84.063 57.445 83.109 57.445 cv
82.154 57.445 81.39 56.681 81.39 55.726 cv
cp
@
80.474 55.038 mo
80.474 54.084 81.238 53.32 82.192 53.32 cv
83.147 53.32 83.911 54.084 83.911 55.038 cv
83.911 55.993 83.147 56.757 82.192 56.757 cv
81.238 56.757 80.474 55.993 80.474 55.038 cv
ef
80.474 55.038 mo
80.474 54.084 81.238 53.32 82.192 53.32 cv
83.147 53.32 83.911 54.084 83.911 55.038 cv
83.911 55.993 83.147 56.757 82.192 56.757 cv
81.238 56.757 80.474 55.993 80.474 55.038 cv
cp
@
79.557 54.198 mo
79.557 53.244 80.321 52.48 81.276 52.48 cv
82.23 52.48 82.994 53.244 82.994 54.198 cv
82.994 55.153 82.23 55.917 81.276 55.917 cv
80.321 55.917 79.557 55.153 79.557 54.198 cv
ef
79.557 54.198 mo
79.557 53.244 80.321 52.48 81.276 52.48 cv
82.23 52.48 82.994 53.244 82.994 54.198 cv
82.994 55.153 82.23 55.917 81.276 55.917 cv
80.321 55.917 79.557 55.153 79.557 54.198 cv
cp
@
78.717 53.511 mo
78.717 52.557 79.481 51.793 80.436 51.793 cv
81.39 51.793 82.154 52.557 82.154 53.511 cv
82.154 54.466 81.39 55.23 80.436 55.23 cv
79.481 55.23 78.717 54.466 78.717 53.511 cv
ef
78.717 53.511 mo
78.717 52.557 79.481 51.793 80.436 51.793 cv
81.39 51.793 82.154 52.557 82.154 53.511 cv
82.154 54.466 81.39 55.23 80.436 55.23 cv
79.481 55.23 78.717 54.466 78.717 53.511 cv
cp
@
77.801 52.06 mo
77.801 51.106 78.565 50.342 79.519 50.342 cv
80.474 50.342 81.238 51.106 81.238 52.06 cv
81.238 53.015 80.474 53.779 79.519 53.779 cv
78.565 53.779 77.801 53.015 77.801 52.06 cv
ef
77.801 52.06 mo
77.801 51.106 78.565 50.342 79.519 50.342 cv
80.474 50.342 81.238 51.106 81.238 52.06 cv
81.238 53.015 80.474 53.779 79.519 53.779 cv
78.565 53.779 77.801 53.015 77.801 52.06 cv
cp
@
76.961 50.686 mo
76.961 49.731 77.725 48.967 78.68 48.967 cv
79.634 48.967 80.398 49.731 80.398 50.686 cv
80.398 51.64 79.634 52.404 78.68 52.404 cv
77.725 52.404 76.961 51.64 76.961 50.686 cv
ef
76.961 50.686 mo
76.961 49.731 77.725 48.967 78.68 48.967 cv
79.634 48.967 80.398 49.731 80.398 50.686 cv
80.398 51.64 79.634 52.404 78.68 52.404 cv
77.725 52.404 76.961 51.64 76.961 50.686 cv
cp
@
76.045 50.227 mo
76.045 49.273 76.809 48.509 77.763 48.509 cv
78.718 48.509 79.482 49.273 79.482 50.227 cv
79.482 51.182 78.718 51.946 77.763 51.946 cv
76.809 51.946 76.045 51.182 76.045 50.227 cv
ef
76.045 50.227 mo
76.045 49.273 76.809 48.509 77.763 48.509 cv
78.718 48.509 79.482 49.273 79.482 50.227 cv
79.482 51.182 78.718 51.946 77.763 51.946 cv
76.809 51.946 76.045 51.182 76.045 50.227 cv
cp
@
75.128 49.769 mo
75.128 48.815 75.892 48.051 76.847 48.051 cv
77.802 48.051 78.566 48.815 78.566 49.769 cv
78.566 50.724 77.802 51.488 76.847 51.488 cv
75.892 51.488 75.128 50.724 75.128 49.769 cv
ef
75.128 49.769 mo
75.128 48.815 75.892 48.051 76.847 48.051 cv
77.802 48.051 78.566 48.815 78.566 49.769 cv
78.566 50.724 77.802 51.488 76.847 51.488 cv
75.892 51.488 75.128 50.724 75.128 49.769 cv
cp
@
74.288 48.776 mo
74.288 47.821 75.052 47.057 76.007 47.057 cv
76.961 47.057 77.725 47.821 77.725 48.776 cv
77.725 49.73 76.961 50.494 76.007 50.494 cv
75.052 50.494 74.288 49.73 74.288 48.776 cv
ef
74.288 48.776 mo
74.288 47.821 75.052 47.057 76.007 47.057 cv
76.961 47.057 77.725 47.821 77.725 48.776 cv
77.725 49.73 76.961 50.494 76.007 50.494 cv
75.052 50.494 74.288 49.73 74.288 48.776 cv
cp
@
73.371 48.547 mo
73.371 47.592 74.135 46.828 75.089 46.828 cv
76.044 46.828 76.808 47.592 76.808 48.547 cv
76.808 49.502 76.044 50.266 75.089 50.266 cv
74.135 50.266 73.371 49.502 73.371 48.547 cv
ef
73.371 48.547 mo
73.371 47.592 74.135 46.828 75.089 46.828 cv
76.044 46.828 76.808 47.592 76.808 48.547 cv
76.808 49.502 76.044 50.266 75.089 50.266 cv
74.135 50.266 73.371 49.502 73.371 48.547 cv
cp
@
72.531 47.783 mo
72.531 46.828 73.295 46.064 74.249 46.064 cv
75.204 46.064 75.968 46.828 75.968 47.783 cv
75.968 48.738 75.204 49.502 74.249 49.502 cv
73.295 49.502 72.531 48.738 72.531 47.783 cv
ef
72.531 47.783 mo
72.531 46.828 73.295 46.064 74.249 46.064 cv
75.204 46.064 75.968 46.828 75.968 47.783 cv
75.968 48.738 75.204 49.502 74.249 49.502 cv
73.295 49.502 72.531 48.738 72.531 47.783 cv
cp
@
71.691 46.103 mo
71.691 45.148 72.455 44.384 73.41 44.384 cv
74.364 44.384 75.128 45.148 75.128 46.103 cv
75.128 47.057 74.364 47.821 73.41 47.821 cv
72.455 47.821 71.691 47.057 71.691 46.103 cv
ef
71.691 46.103 mo
71.691 45.148 72.455 44.384 73.41 44.384 cv
74.364 44.384 75.128 45.148 75.128 46.103 cv
75.128 47.057 74.364 47.821 73.41 47.821 cv
72.455 47.821 71.691 47.057 71.691 46.103 cv
cp
@
70.775 45.798 mo
70.775 44.843 71.539 44.079 72.493 44.079 cv
73.448 44.079 74.212 44.843 74.212 45.798 cv
74.212 46.752 73.448 47.516 72.493 47.516 cv
71.539 47.516 70.775 46.752 70.775 45.798 cv
ef
70.775 45.798 mo
70.775 44.843 71.539 44.079 72.493 44.079 cv
73.448 44.079 74.212 44.843 74.212 45.798 cv
74.212 46.752 73.448 47.516 72.493 47.516 cv
71.539 47.516 70.775 46.752 70.775 45.798 cv
cp
@
69.935 45.874 mo
69.935 44.919 70.699 44.155 71.653 44.155 cv
72.608 44.155 73.372 44.919 73.372 45.874 cv
73.372 46.828 72.608 47.592 71.653 47.592 cv
70.699 47.592 69.935 46.828 69.935 45.874 cv
ef
69.935 45.874 mo
69.935 44.919 70.699 44.155 71.653 44.155 cv
72.608 44.155 73.372 44.919 73.372 45.874 cv
73.372 46.828 72.608 47.592 71.653 47.592 cv
70.699 47.592 69.935 46.828 69.935 45.874 cv
cp
@
69.018 44.652 mo
69.018 43.697 69.782 42.933 70.736 42.933 cv
71.691 42.933 72.455 43.697 72.455 44.652 cv
72.455 45.606 71.691 46.37 70.736 46.37 cv
69.782 46.37 69.018 45.606 69.018 44.652 cv
ef
69.018 44.652 mo
69.018 43.697 69.782 42.933 70.736 42.933 cv
71.691 42.933 72.455 43.697 72.455 44.652 cv
72.455 45.606 71.691 46.37 70.736 46.37 cv
69.782 46.37 69.018 45.606 69.018 44.652 cv
cp
@
68.178 44.193 mo
68.178 43.239 68.942 42.475 69.897 42.475 cv
70.851 42.475 71.615 43.239 71.615 44.193 cv
71.615 45.147 70.851 45.912 69.897 45.912 cv
68.942 45.912 68.178 45.147 68.178 44.193 cv
ef
68.178 44.193 mo
68.178 43.239 68.942 42.475 69.897 42.475 cv
70.851 42.475 71.615 43.239 71.615 44.193 cv
71.615 45.147 70.851 45.912 69.897 45.912 cv
68.942 45.912 68.178 45.147 68.178 44.193 cv
cp
@
67.338 44.575 mo
67.338 43.621 68.102 42.857 69.056 42.857 cv
70.011 42.857 70.775 43.621 70.775 44.575 cv
70.775 45.53 70.011 46.294 69.056 46.294 cv
68.102 46.294 67.338 45.53 67.338 44.575 cv
ef
67.338 44.575 mo
67.338 43.621 68.102 42.857 69.056 42.857 cv
70.011 42.857 70.775 43.621 70.775 44.575 cv
70.775 45.53 70.011 46.294 69.056 46.294 cv
68.102 46.294 67.338 45.53 67.338 44.575 cv
cp
@
66.345 44.117 mo
66.345 43.163 67.109 42.399 68.063 42.399 cv
69.018 42.399 69.782 43.163 69.782 44.117 cv
69.782 45.072 69.018 45.836 68.063 45.836 cv
67.109 45.836 66.345 45.072 66.345 44.117 cv
ef
66.345 44.117 mo
66.345 43.163 67.109 42.399 68.063 42.399 cv
69.018 42.399 69.782 43.163 69.782 44.117 cv
69.782 45.072 69.018 45.836 68.063 45.836 cv
67.109 45.836 66.345 45.072 66.345 44.117 cv
cp
@
65.505 43.124 mo
65.505 42.17 66.269 41.406 67.223 41.406 cv
68.178 41.406 68.941 42.17 68.941 43.124 cv
68.941 44.079 68.178 44.843 67.223 44.843 cv
66.269 44.843 65.505 44.079 65.505 43.124 cv
ef
65.505 43.124 mo
65.505 42.17 66.269 41.406 67.223 41.406 cv
68.178 41.406 68.941 42.17 68.941 43.124 cv
68.941 44.079 68.178 44.843 67.223 44.843 cv
66.269 44.843 65.505 44.079 65.505 43.124 cv
cp
@
64.665 42.514 mo
64.665 41.559 65.429 40.795 66.383 40.795 cv
67.338 40.795 68.102 41.559 68.102 42.514 cv
68.102 43.468 67.338 44.232 66.383 44.232 cv
65.429 44.232 64.665 43.468 64.665 42.514 cv
ef
64.665 42.514 mo
64.665 41.559 65.429 40.795 66.383 40.795 cv
67.338 40.795 68.102 41.559 68.102 42.514 cv
68.102 43.468 67.338 44.232 66.383 44.232 cv
65.429 44.232 64.665 43.468 64.665 42.514 cv
cp
@
63.748 41.978 mo
63.748 41.024 64.512 40.26 65.466 40.26 cv
66.421 40.26 67.185 41.024 67.185 41.978 cv
67.185 42.933 66.421 43.697 65.466 43.697 cv
64.512 43.697 63.748 42.933 63.748 41.978 cv
ef
63.748 41.978 mo
63.748 41.024 64.512 40.26 65.466 40.26 cv
66.421 40.26 67.185 41.024 67.185 41.978 cv
67.185 42.933 66.421 43.697 65.466 43.697 cv
64.512 43.697 63.748 42.933 63.748 41.978 cv
cp
@
62.908 40.91 mo
62.908 39.955 63.672 39.191 64.626 39.191 cv
65.581 39.191 66.345 39.955 66.345 40.91 cv
66.345 41.864 65.581 42.628 64.626 42.628 cv
63.672 42.628 62.908 41.864 62.908 40.91 cv
ef
62.908 40.91 mo
62.908 39.955 63.672 39.191 64.626 39.191 cv
65.581 39.191 66.345 39.955 66.345 40.91 cv
66.345 41.864 65.581 42.628 64.626 42.628 cv
63.672 42.628 62.908 41.864 62.908 40.91 cv
cp
@
62.068 39.765 mo
62.068 38.81 62.832 38.046 63.786 38.046 cv
64.741 38.046 65.505 38.81 65.505 39.765 cv
65.505 40.719 64.741 41.483 63.786 41.483 cv
62.832 41.483 62.068 40.719 62.068 39.765 cv
ef
62.068 39.765 mo
62.068 38.81 62.832 38.046 63.786 38.046 cv
64.741 38.046 65.505 38.81 65.505 39.765 cv
65.505 40.719 64.741 41.483 63.786 41.483 cv
62.832 41.483 62.068 40.719 62.068 39.765 cv
cp
@
61.152 38.39 mo
61.152 37.435 61.916 36.671 62.87 36.671 cv
63.825 36.671 64.589 37.435 64.589 38.39 cv
64.589 39.344 63.825 40.108 62.87 40.108 cv
61.916 40.108 61.152 39.344 61.152 38.39 cv
ef
61.152 38.39 mo
61.152 37.435 61.916 36.671 62.87 36.671 cv
63.825 36.671 64.589 37.435 64.589 38.39 cv
64.589 39.344 63.825 40.108 62.87 40.108 cv
61.916 40.108 61.152 39.344 61.152 38.39 cv
cp
@
60.235 37.854 mo
60.235 36.9 60.999 36.136 61.953 36.136 cv
62.908 36.136 63.672 36.9 63.672 37.854 cv
63.672 38.809 62.908 39.573 61.953 39.573 cv
60.999 39.573 60.235 38.809 60.235 37.854 cv
ef
60.235 37.854 mo
60.235 36.9 60.999 36.136 61.953 36.136 cv
62.908 36.136 63.672 36.9 63.672 37.854 cv
63.672 38.809 62.908 39.573 61.953 39.573 cv
60.999 39.573 60.235 38.809 60.235 37.854 cv
cp
@
59.394 36.938 mo
59.394 35.983 60.158 35.219 61.113 35.219 cv
62.067 35.219 62.831 35.983 62.831 36.938 cv
62.831 37.892 62.067 38.657 61.113 38.657 cv
60.158 38.657 59.394 37.892 59.394 36.938 cv
ef
59.394 36.938 mo
59.394 35.983 60.158 35.219 61.113 35.219 cv
62.067 35.219 62.831 35.983 62.831 36.938 cv
62.831 37.892 62.067 38.657 61.113 38.657 cv
60.158 38.657 59.394 37.892 59.394 36.938 cv
cp
@
58.555 36.175 mo
58.555 35.22 59.319 34.456 60.273 34.456 cv
61.228 34.456 61.992 35.22 61.992 36.175 cv
61.992 37.129 61.228 37.893 60.273 37.893 cv
59.319 37.893 58.555 37.129 58.555 36.175 cv
ef
58.555 36.175 mo
58.555 35.22 59.319 34.456 60.273 34.456 cv
61.228 34.456 61.992 35.22 61.992 36.175 cv
61.992 37.129 61.228 37.893 60.273 37.893 cv
59.319 37.893 58.555 37.129 58.555 36.175 cv
cp
@
57.639 35.258 mo
57.639 34.304 58.403 33.54 59.357 33.54 cv
60.312 33.54 61.076 34.304 61.076 35.258 cv
61.076 36.213 60.312 36.977 59.357 36.977 cv
58.403 36.977 57.639 36.213 57.639 35.258 cv
ef
57.639 35.258 mo
57.639 34.304 58.403 33.54 59.357 33.54 cv
60.312 33.54 61.076 34.304 61.076 35.258 cv
61.076 36.213 60.312 36.977 59.357 36.977 cv
58.403 36.977 57.639 36.213 57.639 35.258 cv
cp
@
56.722 33.196 mo
56.722 32.241 57.486 31.477 58.44 31.477 cv
59.395 31.477 60.159 32.241 60.159 33.196 cv
60.159 34.15 59.395 34.915 58.44 34.915 cv
57.486 34.915 56.722 34.15 56.722 33.196 cv
ef
56.722 33.196 mo
56.722 32.241 57.486 31.477 58.44 31.477 cv
59.395 31.477 60.159 32.241 60.159 33.196 cv
60.159 34.15 59.395 34.915 58.44 34.915 cv
57.486 34.915 56.722 34.15 56.722 33.196 cv
cp
@
55.806 33.808 mo
55.806 32.853 56.57 32.089 57.524 32.089 cv
58.479 32.089 59.243 32.853 59.243 33.808 cv
59.243 34.762 58.479 35.526 57.524 35.526 cv
56.57 35.526 55.806 34.762 55.806 33.808 cv
ef
55.806 33.808 mo
55.806 32.853 56.57 32.089 57.524 32.089 cv
58.479 32.089 59.243 32.853 59.243 33.808 cv
59.243 34.762 58.479 35.526 57.524 35.526 cv
56.57 35.526 55.806 34.762 55.806 33.808 cv
cp
@
54.966 35.411 mo
54.966 34.456 55.73 33.692 56.684 33.692 cv
57.639 33.692 58.403 34.456 58.403 35.411 cv
58.403 36.365 57.639 37.129 56.684 37.129 cv
55.73 37.129 54.966 36.365 54.966 35.411 cv
ef
54.966 35.411 mo
54.966 34.456 55.73 33.692 56.684 33.692 cv
57.639 33.692 58.403 34.456 58.403 35.411 cv
58.403 36.365 57.639 37.129 56.684 37.129 cv
55.73 37.129 54.966 36.365 54.966 35.411 cv
cp
@
54.049 31.975 mo
54.049 31.02 54.813 30.256 55.767 30.256 cv
56.722 30.256 57.486 31.02 57.486 31.975 cv
57.486 32.929 56.722 33.693 55.767 33.693 cv
54.813 33.693 54.049 32.929 54.049 31.975 cv
ef
54.049 31.975 mo
54.049 31.02 54.813 30.256 55.767 30.256 cv
56.722 30.256 57.486 31.02 57.486 31.975 cv
57.486 32.929 56.722 33.693 55.767 33.693 cv
54.813 33.693 54.049 32.929 54.049 31.975 cv
cp
@
53.286 30.37 mo
53.286 29.416 54.05 28.652 55.004 28.652 cv
55.959 28.652 56.723 29.416 56.723 30.37 cv
56.723 31.325 55.959 32.089 55.004 32.089 cv
54.05 32.089 53.286 31.325 53.286 30.37 cv
ef
53.286 30.37 mo
53.286 29.416 54.05 28.652 55.004 28.652 cv
55.959 28.652 56.723 29.416 56.723 30.37 cv
56.723 31.325 55.959 32.089 55.004 32.089 cv
54.05 32.089 53.286 31.325 53.286 30.37 cv
cp
@
52.445 32.585 mo
52.445 31.631 53.209 30.867 54.163 30.867 cv
55.118 30.867 55.882 31.631 55.882 32.585 cv
55.882 33.54 55.118 34.304 54.163 34.304 cv
53.209 34.304 52.445 33.54 52.445 32.585 cv
ef
52.445 32.585 mo
52.445 31.631 53.209 30.867 54.163 30.867 cv
55.118 30.867 55.882 31.631 55.882 32.585 cv
55.882 33.54 55.118 34.304 54.163 34.304 cv
53.209 34.304 52.445 33.54 52.445 32.585 cv
cp
@
51.375 31.897 mo
51.375 30.943 52.139 30.179 53.094 30.179 cv
54.048 30.179 54.812 30.943 54.812 31.897 cv
54.812 32.852 54.048 33.616 53.094 33.616 cv
52.139 33.616 51.375 32.852 51.375 31.897 cv
ef
51.375 31.897 mo
51.375 30.943 52.139 30.179 53.094 30.179 cv
54.048 30.179 54.812 30.943 54.812 31.897 cv
54.812 32.852 54.048 33.616 53.094 33.616 cv
52.139 33.616 51.375 32.852 51.375 31.897 cv
cp
@
50.46 29.988 mo
50.46 29.034 51.224 28.27 52.179 28.27 cv
53.133 28.27 53.897 29.034 53.897 29.988 cv
53.897 30.943 53.133 31.707 52.179 31.707 cv
51.224 31.707 50.46 30.943 50.46 29.988 cv
ef
50.46 29.988 mo
50.46 29.034 51.224 28.27 52.179 28.27 cv
53.133 28.27 53.897 29.034 53.897 29.988 cv
53.897 30.943 53.133 31.707 52.179 31.707 cv
51.224 31.707 50.46 30.943 50.46 29.988 cv
cp
@
49.696 28.843 mo
49.696 27.889 50.46 27.125 51.415 27.125 cv
52.369 27.125 53.133 27.889 53.133 28.843 cv
53.133 29.798 52.369 30.562 51.415 30.562 cv
50.46 30.562 49.696 29.798 49.696 28.843 cv
ef
49.696 28.843 mo
49.696 27.889 50.46 27.125 51.415 27.125 cv
52.369 27.125 53.133 27.889 53.133 28.843 cv
53.133 29.798 52.369 30.562 51.415 30.562 cv
50.46 30.562 49.696 29.798 49.696 28.843 cv
cp
@
48.932 28.843 mo
48.932 27.889 49.696 27.125 50.651 27.125 cv
51.605 27.125 52.369 27.889 52.369 28.843 cv
52.369 29.798 51.605 30.562 50.651 30.562 cv
49.696 30.562 48.932 29.798 48.932 28.843 cv
ef
48.932 28.843 mo
48.932 27.889 49.696 27.125 50.651 27.125 cv
51.605 27.125 52.369 27.889 52.369 28.843 cv
52.369 29.798 51.605 30.562 50.651 30.562 cv
49.696 30.562 48.932 29.798 48.932 28.843 cv
cp
@
48.016 30.218 mo
48.016 29.263 48.78 28.499 49.735 28.499 cv
50.689 28.499 51.453 29.263 51.453 30.218 cv
51.453 31.172 50.689 31.937 49.735 31.937 cv
48.78 31.937 48.016 31.172 48.016 30.218 cv
ef
48.016 30.218 mo
48.016 29.263 48.78 28.499 49.735 28.499 cv
50.689 28.499 51.453 29.263 51.453 30.218 cv
51.453 31.172 50.689 31.937 49.735 31.937 cv
48.78 31.937 48.016 31.172 48.016 30.218 cv
cp
@
47.023 28.537 mo
47.023 27.583 47.787 26.819 48.741 26.819 cv
49.696 26.819 50.46 27.583 50.46 28.537 cv
50.46 29.492 49.696 30.256 48.741 30.256 cv
47.787 30.256 47.023 29.492 47.023 28.537 cv
ef
47.023 28.537 mo
47.023 27.583 47.787 26.819 48.741 26.819 cv
49.696 26.819 50.46 27.583 50.46 28.537 cv
50.46 29.492 49.696 30.256 48.741 30.256 cv
47.787 30.256 47.023 29.492 47.023 28.537 cv
cp
@
46.183 25.482 mo
46.183 24.528 46.947 23.764 47.901 23.764 cv
48.856 23.764 49.62 24.528 49.62 25.482 cv
49.62 26.437 48.856 27.201 47.901 27.201 cv
46.947 27.201 46.183 26.437 46.183 25.482 cv
ef
46.183 25.482 mo
46.183 24.528 46.947 23.764 47.901 23.764 cv
48.856 23.764 49.62 24.528 49.62 25.482 cv
49.62 26.437 48.856 27.201 47.901 27.201 cv
46.947 27.201 46.183 26.437 46.183 25.482 cv
cp
@
45.343 28.155 mo
45.343 27.201 46.107 26.437 47.061 26.437 cv
48.016 26.437 48.78 27.201 48.78 28.155 cv
48.78 29.11 48.016 29.874 47.061 29.874 cv
46.107 29.874 45.343 29.11 45.343 28.155 cv
ef
45.343 28.155 mo
45.343 27.201 46.107 26.437 47.061 26.437 cv
48.016 26.437 48.78 27.201 48.78 28.155 cv
48.78 29.11 48.016 29.874 47.061 29.874 cv
46.107 29.874 45.343 29.11 45.343 28.155 cv
cp
@
44.35 28.843 mo
44.35 27.889 45.114 27.125 46.068 27.125 cv
47.023 27.125 47.786 27.889 47.786 28.843 cv
47.786 29.798 47.023 30.562 46.068 30.562 cv
45.114 30.562 44.35 29.798 44.35 28.843 cv
ef
44.35 28.843 mo
44.35 27.889 45.114 27.125 46.068 27.125 cv
47.023 27.125 47.786 27.889 47.786 28.843 cv
47.786 29.798 47.023 30.562 46.068 30.562 cv
45.114 30.562 44.35 29.798 44.35 28.843 cv
cp
@
43.357 24.872 mo
43.357 23.917 44.121 23.153 45.076 23.153 cv
46.03 23.153 46.794 23.917 46.794 24.872 cv
46.794 25.826 46.03 26.59 45.076 26.59 cv
44.121 26.59 43.357 25.826 43.357 24.872 cv
ef
43.357 24.872 mo
43.357 23.917 44.121 23.153 45.076 23.153 cv
46.03 23.153 46.794 23.917 46.794 24.872 cv
46.794 25.826 46.03 26.59 45.076 26.59 cv
44.121 26.59 43.357 25.826 43.357 24.872 cv
cp
@
42.67 24.413 mo
42.67 23.459 43.434 22.695 44.388 22.695 cv
45.343 22.695 46.107 23.459 46.107 24.413 cv
46.107 25.368 45.343 26.132 44.388 26.132 cv
43.434 26.132 42.67 25.368 42.67 24.413 cv
ef
42.67 24.413 mo
42.67 23.459 43.434 22.695 44.388 22.695 cv
45.343 22.695 46.107 23.459 46.107 24.413 cv
46.107 25.368 45.343 26.132 44.388 26.132 cv
43.434 26.132 42.67 25.368 42.67 24.413 cv
cp
@
41.754 25.559 mo
41.754 24.605 42.518 23.841 43.472 23.841 cv
44.427 23.841 45.191 24.605 45.191 25.559 cv
45.191 26.514 44.427 27.278 43.472 27.278 cv
42.518 27.278 41.754 26.514 41.754 25.559 cv
ef
41.754 25.559 mo
41.754 24.605 42.518 23.841 43.472 23.841 cv
44.427 23.841 45.191 24.605 45.191 25.559 cv
45.191 26.514 44.427 27.278 43.472 27.278 cv
42.518 27.278 41.754 26.514 41.754 25.559 cv
cp
@
40.913 24.948 mo
40.913 23.993 41.677 23.229 42.632 23.229 cv
43.586 23.229 44.35 23.993 44.35 24.948 cv
44.35 25.902 43.586 26.666 42.632 26.666 cv
41.677 26.666 40.913 25.902 40.913 24.948 cv
ef
40.913 24.948 mo
40.913 23.993 41.677 23.229 42.632 23.229 cv
43.586 23.229 44.35 23.993 44.35 24.948 cv
44.35 25.902 43.586 26.666 42.632 26.666 cv
41.677 26.666 40.913 25.902 40.913 24.948 cv
cp
@
39.997 23.727 mo
39.997 22.772 40.761 22.008 41.716 22.008 cv
42.67 22.008 43.434 22.772 43.434 23.727 cv
43.434 24.681 42.67 25.445 41.716 25.445 cv
40.761 25.445 39.997 24.681 39.997 23.727 cv
ef
39.997 23.727 mo
39.997 22.772 40.761 22.008 41.716 22.008 cv
42.67 22.008 43.434 22.772 43.434 23.727 cv
43.434 24.681 42.67 25.445 41.716 25.445 cv
40.761 25.445 39.997 24.681 39.997 23.727 cv
cp
@
39.157 23.039 mo
39.157 22.084 39.921 21.32 40.875 21.32 cv
41.83 21.32 42.593 22.084 42.593 23.039 cv
42.593 23.993 41.83 24.757 40.875 24.757 cv
39.921 24.757 39.157 23.993 39.157 23.039 cv
ef
39.157 23.039 mo
39.157 22.084 39.921 21.32 40.875 21.32 cv
41.83 21.32 42.593 22.084 42.593 23.039 cv
42.593 23.993 41.83 24.757 40.875 24.757 cv
39.921 24.757 39.157 23.993 39.157 23.039 cv
cp
@
38.316 21.74 mo
38.316 20.786 39.08 20.022 40.035 20.022 cv
40.989 20.022 41.753 20.786 41.753 21.74 cv
41.753 22.695 40.989 23.459 40.035 23.459 cv
39.08 23.459 38.316 22.695 38.316 21.74 cv
ef
38.316 21.74 mo
38.316 20.786 39.08 20.022 40.035 20.022 cv
40.989 20.022 41.753 20.786 41.753 21.74 cv
41.753 22.695 40.989 23.459 40.035 23.459 cv
39.08 23.459 38.316 22.695 38.316 21.74 cv
cp
@
37.4 19.144 mo
37.4 18.19 38.164 17.426 39.119 17.426 cv
40.073 17.426 40.837 18.19 40.837 19.144 cv
40.837 20.099 40.073 20.863 39.119 20.863 cv
38.164 20.863 37.4 20.099 37.4 19.144 cv
ef
37.4 19.144 mo
37.4 18.19 38.164 17.426 39.119 17.426 cv
40.073 17.426 40.837 18.19 40.837 19.144 cv
40.837 20.099 40.073 20.863 39.119 20.863 cv
38.164 20.863 37.4 20.099 37.4 19.144 cv
cp
@
36.56 16.547 mo
36.56 15.593 37.324 14.829 38.278 14.829 cv
39.233 14.829 39.997 15.593 39.997 16.547 cv
39.997 17.502 39.233 18.266 38.278 18.266 cv
37.324 18.266 36.56 17.502 36.56 16.547 cv
ef
36.56 16.547 mo
36.56 15.593 37.324 14.829 38.278 14.829 cv
39.233 14.829 39.997 15.593 39.997 16.547 cv
39.997 17.502 39.233 18.266 38.278 18.266 cv
37.324 18.266 36.56 17.502 36.56 16.547 cv
cp
@
35.644 15.401 mo
35.644 14.447 36.408 13.683 37.362 13.683 cv
38.317 13.683 39.08 14.447 39.08 15.401 cv
39.08 16.356 38.317 17.12 37.362 17.12 cv
36.408 17.12 35.644 16.356 35.644 15.401 cv
ef
35.644 15.401 mo
35.644 14.447 36.408 13.683 37.362 13.683 cv
38.317 13.683 39.08 14.447 39.08 15.401 cv
39.08 16.356 38.317 17.12 37.362 17.12 cv
36.408 17.12 35.644 16.356 35.644 15.401 cv
cp
@
34.804 14.256 mo
34.804 13.302 35.568 12.538 36.522 12.538 cv
37.477 12.538 38.241 13.302 38.241 14.256 cv
38.241 15.211 37.477 15.975 36.522 15.975 cv
35.568 15.975 34.804 15.211 34.804 14.256 cv
ef
34.804 14.256 mo
34.804 13.302 35.568 12.538 36.522 12.538 cv
37.477 12.538 38.241 13.302 38.241 14.256 cv
38.241 15.211 37.477 15.975 36.522 15.975 cv
35.568 15.975 34.804 15.211 34.804 14.256 cv
cp
@
33.963 12.117 mo
33.963 11.163 34.727 10.399 35.681 10.399 cv
36.636 10.399 37.4 11.163 37.4 12.117 cv
37.4 13.072 36.636 13.836 35.681 13.836 cv
34.727 13.836 33.963 13.072 33.963 12.117 cv
ef
33.963 12.117 mo
33.963 11.163 34.727 10.399 35.681 10.399 cv
36.636 10.399 37.4 11.163 37.4 12.117 cv
37.4 13.072 36.636 13.836 35.681 13.836 cv
34.727 13.836 33.963 13.072 33.963 12.117 cv
cp
@
33.047 12.499 mo
33.047 11.545 33.811 10.781 34.765 10.781 cv
35.72 10.781 36.484 11.545 36.484 12.499 cv
36.484 13.454 35.72 14.218 34.765 14.218 cv
33.811 14.218 33.047 13.454 33.047 12.499 cv
ef
33.047 12.499 mo
33.047 11.545 33.811 10.781 34.765 10.781 cv
35.72 10.781 36.484 11.545 36.484 12.499 cv
36.484 13.454 35.72 14.218 34.765 14.218 cv
33.811 14.218 33.047 13.454 33.047 12.499 cv
cp
@
gsave
30.527 4.366 mo
184.339 4.366 li
184.339 103.19 li
30.527 103.19 li
cp
eclp
32.36 13.11 mo
32.36 12.156 33.124 11.391 34.078 11.391 cv
35.033 11.391 35.796 12.156 35.796 13.11 cv
35.796 14.065 35.033 14.829 34.078 14.829 cv
33.124 14.829 32.36 14.065 32.36 13.11 cv
ef
32.36 13.11 mo
32.36 12.156 33.124 11.391 34.078 11.391 cv
35.033 11.391 35.796 12.156 35.796 13.11 cv
35.796 14.065 35.033 14.829 34.078 14.829 cv
33.124 14.829 32.36 14.065 32.36 13.11 cv
cp
@
grestore
.815518 .799191 .76849 .613642 cmyk
%ADOBeginSubsetFont: PBAAAA+cplr7PS AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
PQRVXC+cplr7PS dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7E2CE045EB2B7154C3BBA5DFD22B7011030154CF2EB280
8713470E87CB4E1D662E2E79D55A4F7B2C9741E55731F4BD0B1642EFC5E9B164
CCB8FEF271591629B2CFCD29B58C9BE62EA4839151DB439E8C0BDBCF801045DF
C88FB0507E22BFED77EB0C516176F386C93D1C474A980010C6E4314FC34FA34D
8C5935F21ACF84DC3B437324DC69005D5A081EF59B09ECC8473D5E84A113A1A6
45D32D8F0AC991534889F1A389AAA22EDDA501DE79D6F7017347CDB027108F00
73946C3F7AA998B7F2C548EA92C5B954541F9FD30F886A82DF0243CC8AFC8F83
B4CC49A95FD3354F31AA605F21B316C5DC3E2CE57BC0B962A5680A6C928073C4
BEBE587A5A0096A6CE538EB78C3AD8875FDEEE48FA94F421B7F0751D0055EA38
9CD30854810ACE9> |-
/two <1C60D8A8C9B7E2CE1E36B73C5E1E2D23AF1DE1B196FDD8C8435B40E7C8
D09229AE9DAB1B1F19348E4964CD0E18ABADB28ADD436B78F2EFC754F05CC132
56A2CED99D1FC9757A95DDE04014EE0ED16906FB805D4A35AE27F4D5DFF9F019
354C8AA800802E01393968CCA3391D62384BB1643BC3A7000AD3DEE724A4BD2C
B1A3074C366295864182C0DB4F387294DFB2064E1547C96BA9FFC7CBBC36902B
62F88982ED08EC3F3031EFAC71026C2CEA43BF849249C9CD937B39C4D7725AAB
C9EB8CD83546913E75B30DABD180FAAF7DBEE1BE69E5AD83FDDDABA7781FA676
659B5BC5ACAE6606B825F02A> |-
/three <1C60D8A8C9B7E2CE28ABFAFA3EAB3E81F9FC5CB3D1CFC99E081BD612
69BB720323DC04969C2F56F0C75E51BDB0FC94DEF633A018FCF60456E88CCA4B
A153C01944E4E97C6D9D24E00352E2FC0D8DB2A80D47E870AD546D8901A64AAA
AE4BA42498709E0E37647FB24D06785555B6F9953003AC4B36880A8361396835
19CFEC3B31EB923F36763538461192AF3DA89B84619B041E5E024E77565956D9
1974BE354F92A84D87CE7A3CBF59B24D55242BDBD129868BCC4941FEF963DDA1
2004A503010908DC091C5CD2E5107E9AF005C9B1D71E457035C4C9B775E35A1B
79F83FD2AAE115E0628A0246D2228D94293CA36278F95706D316E146735F26B8
19672C43F5FC5952842E1A5C427D9842BFFD91AE564B1E3F2D7E93992DCD422A
EF53AF553674A61B77F7DA5565A15E5553F6C132AE236E29087AC0EBD1688D04
567A87EF18AA9D31848F0D179E8661B9C8EDFF1677> |-
/five <1C60D8A8C9B7E2CE2763A127D3F5735CDE8C89A69E974F94575EECF90
6108A435B0F478C64D344CC7284039ADF46DCE2E8BCE45443E03CB20538B4E1D
EDB18824006F25277F28DAFFEEAA44582BDA6C2DDD8C6CDD2A4CB2343C5213C3
9B8D19D62A1DFFA80DDEA0CCC8493D9C71FB3A4106FDB1434E748F0C6957012A
71A7685523BA7512F3437228A8E347E7BA3008263157876DD70C652A3A19E684
0C2A14A2350FF4258E12DBD3D8F5E2C4C931F1A6C6165B1764FF810ADED80332
4F867FA5DA7AFD7BDD45CF38FD570D4723D9E05071E89733E564C7741A29A95D
5100B51AB7D6341D3DE48790B62CBB7B6B6C48E79D52951A33B21B585FD1CA18
248B2D75D7424008964DDFC1CA4CB9C9257A25BB769299A90C66BB00E7B5C4CF
A23713C608004EB104AF767A34E0DCA0E1583895DF76BC6875A6668F6981D60C
D585AE167> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PQRVXC+cplr7PS /Encoding get
dup 48 /zero put
dup 50 /two put
dup 51 /three put
dup 53 /five put
pop
%ADOEndSubsetFont
/PQRVXC+cplr7PS*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /.notdef 
/slash /zero /one /two /three /.notdef /five 17{/.notdef}rp 
/G 3{/.notdef}rp /K 21{/.notdef}rp /a 2{/.notdef}rp /d /e 
/.notdef /g /h 4{/.notdef}rp /m /.notdef /o /p 
/.notdef /r /s /.notdef /u 138{/.notdef}rp]
PQRVXC+cplr7PS nf
PQRVXC+cplr7PS*1 [8 0 0 -8 0 0 ]msf
28.2324 112.427 mo
(0100200300)
[39.3264 4.5408 4.5512 34.8344 4.5512 4.5512 34.792 4.55121 4.55121 0 ]xsh
23.126 105.484 mo
(0)sh
18.5372 72.559 mo
(50)
[4.5504 0 ]xsh
13.9436 39.6478 mo
(100)
[4.552 4.552 0 ]xsh
13.9436 6.73341 mo
(150)
[4.552 4.552 0 ]xsh
100.101 54.004 mo
90.478 54.004 li
.912261 .865354 .871092 .774319 cmyk
@
184.263 103.11 mo
184.263 4.36201 li
182.964 4.36201 li
@
184.263 10.166 mo
181.667 10.166 li
@
184.263 15.971 mo
182.964 15.971 li
@
184.263 21.775 mo
181.667 21.775 li
@
184.263 27.58 mo
182.964 27.58 li
@
184.263 33.384 mo
181.667 33.384 li
@
184.263 39.189 mo
182.964 39.189 li
@
184.263 44.994 mo
181.667 44.994 li
@
184.263 50.798 mo
182.964 50.798 li
@
184.263 56.679 mo
181.667 56.679 li
@
184.263 62.483 mo
182.964 62.483 li
@
184.263 68.288 mo
181.667 68.288 li
@
184.263 74.092 mo
182.964 74.092 li
@
184.263 79.898 mo
181.667 79.898 li
@
184.263 85.703 mo
182.964 85.703 li
@
184.263 91.507 mo
181.667 91.507 li
@
184.263 97.313 mo
182.964 97.313 li
@
184.263 103.115 mo
181.667 103.115 li
@
30.527 4.367 mo
184.263 4.367 li
@
162.267 4.367 mo
162.267 4.367 li
@
140.349 4.367 mo
140.349 4.367 li
@
118.353 4.367 mo
118.353 4.367 li
@
96.435 4.367 mo
96.435 4.367 li
@
74.44 4.367 mo
74.44 4.367 li
@
52.522 4.367 mo
52.522 4.367 li
@
30.527 103.115 mo
30.527 4.367 li
33.124 4.367 li
@
30.527 20.863 mo
31.825 20.863 li
@
30.527 37.283 mo
33.124 37.283 li
@
30.527 53.779 mo
31.825 53.779 li
@
30.527 70.199 mo
33.124 70.199 li
@
30.527 86.695 mo
31.825 86.695 li
@
30.527 103.115 mo
33.124 103.115 li
@
30.527 103.115 mo
184.263 103.115 li
184.263 101.817 li
@
162.267 103.115 mo
162.267 100.52 li
@
140.349 103.115 mo
140.349 101.817 li
@
118.353 103.115 mo
118.353 100.52 li
@
96.435 103.115 mo
96.435 101.817 li
@
74.44 103.115 mo
74.44 100.52 li
@
52.522 103.115 mo
52.522 101.817 li
@
30.527 103.115 mo
30.527 100.52 li
@
90.477 54.008 mo
92.845 53.397 li
92.845 54.618 li
90.477 54.008 li
ef
162.421 40.185 mo
175.328 40.185 li
@
90.478 54.008 mo
92.846 53.397 li
92.846 54.618 li
90.478 54.008 li
cp
@
175.328 40.185 mo
172.96 40.795 li
172.96 39.574 li
175.328 40.185 li
ef
175.328 40.185 mo
172.96 40.795 li
172.96 39.574 li
175.328 40.185 li
cp
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/PQRVXD+cplr7i*1 uf
/PQRVXD+cplr7i uf
/HIBBAA+cplr7i uf
/PQRVXC+cplr7PS*1 uf
/PQRVXC+cplr7PS uf
/PBAAAA+cplr7PS uf
/PQRVXE+cplsy8PS*1 uf
/PQRVXE+cplsy8PS uf
/QJJAAA+cplsy8PS uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
